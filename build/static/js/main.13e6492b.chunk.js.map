{"version":3,"sources":["components/Header/header.module.css","components/ProfileStats/LineGraph/lineGraph.module.css","components/Counties/SectionsUI/AttributeBtns/attributeBtns.module.css","components/Counties/SectionsUI/CountyBtns/countyBtns.module.css","components/Summary/summary.module.css","components/DailyGraphs/TextBox/textBox.module.css","components/layout.js","UI/Sections/SectionWrapSimple/sectionWrapSimple.js","components/Summary/summary.js","components/DailyPage/ExtraInfo/extraInfo.js","UI/error.js","UI/loading.js","Store/store.js","components/DailyGraphs/dailyGraphs-store.js","UI/Sections/SectionWrap/sectionWrap.js","UI/Sections/SectionMain/sectionMain.js","UI/Sections/SectionSide/sectionSide.js","UI/Sections/SectionHeader/sectionHeader.js","components/DailyGraphs/LineGraphDaily/axis.js","UI/Graphs/yAxisLabel.js","components/DailyGraphs/LineGraphDaily/line.js","UI/Graphs/HoverRectangles/hoverRect.js","UI/Graphs/HoverRectangles/hoverRectangles.js","UI/Buttons/boringButton.js","components/DailyGraphs/LineGraphDaily/lineGraphDaily.js","components/Counties/SectionsUI/DailyAttributeBtns/dailyAttributeBtns.js","components/DailyGraphs/TextBox/textBox.js","components/DailyGraphs/dailyGraphs.js","components/DailyPage/dailyPage.js","components/Header/header.js","components/ProfileStats/LineGraph/lines.js","components/ProfileStats/LineGraph/circles.js","UI/Tooltips/TinyTooltip.js","UI/Graphs/axis.js","components/ProfileStats/LineGraph/lineGraph.js","components/ProfileStats/TextBox/textBox.js","components/ProfileStats/Sections/section-util.js","components/ProfileStats/Sections/section.js","components/ProfileStats/Intro/intro.js","components/ProfileStats/sections-data.js","components/ProfileStats/profileStats.js","components/Counties/counties-store.js","UI/Graphs/xAxisLabel.js","components/Counties/BarChart/barChart.js","components/Counties/TextBox/textBox.js","components/Counties/SectionsUI/AttributeBtns/attributeBtns.js","components/Counties/ClickArrows/clickArrows.js","components/Counties/BarChartSection/barChartSection.js","components/Counties/LineGraph2/line.js","components/Counties/ClickRectangles/clickRect.js","components/Counties/ClickRectangles/clickRectangles.js","components/Counties/LineGraph2/lineGraph2.js","components/Counties/SectionsUI/CountyBtns/countyBtns.js","components/Counties/LineChartSection/lineChartSection.js","components/Counties/counties.js","App.js","serviceWorker.js","index.js","components/ProfileStats/Sections/section.module.css","components/ProfileStats/TextBox/textBox.module.css","components/ProfileStats/Intro/intro.module.css","components/Counties/BarChart/barChart.module.css","UI/Sections/SectionWrapSimple/sectionWrapSimple.module.css","components/DailyGraphs/LineGraphDaily/lineGraphDaily2.module.css","components/DailyGraphs/LineGraphDaily/axis.module.css","components/ProfileStats/LineGraph/circles.module.css","UI/Graphs/axis.module.css","components/Counties/ClickArrows/clickArrows.module.css","components/Counties/LineGraph2/lineGraph2.module.css","components/Counties/TextBox/textBox.module.css","components/layout.module.css","UI/loading.module.css","UI/Sections/SectionWrap/sectionWrap.module.css","UI/Sections/SectionMain/sectionMain.module.css","UI/Sections/SectionSide/sectionSide.module.css","UI/Sections/SectionHeader/sectionHeader.module.css","components/Counties/SectionsUI/DailyAttributeBtns/dailyAttributeBtns.module.css"],"names":["module","exports","layout","children","className","classes","pageWrap","SectionWrapSimple","offsetBottom","minHeight","style","marginBottom","sectionWrapSimple","removeBottomOffset","Summary","stats","useState","latest","setLatest","useEffect","length","latestDailyStats","data","datesOnly","map","d","attributes","Date","newestDate","Math","max","filter","getLastestDailyStats","summaryWrap","sectionHeading","color","toString","substring","href","rel","target","summaryInfoWrap","summaryBox","TotalConfirmedCovidCases","toLocaleString","ConfirmedCovidCases","TotalCovidDeaths","ConfirmedCovidDeaths","HospitalisedCovidCases","StatisticsProfileDate","RequiringICUCovidCases","fontSize","fontWeight","ExtraInfo","ErrorComp","msg","background","padding","borderRadius","margin","LoadingComp","loader","sharedState","listeners","actions","useStore","shouldListen","setState","dispatch","actionId","param","newState","listener","push","l","initStore","userActions","initialState","removeFromNestedAttributes","obj","key","calculateAverageOverTime","ofWhat","numDays","newKeyName","theData","i","slice","added","reduce","acc","e","isNaN","fn","calculatePercentageChangeOf","v2","v1","change","percentageChange","round","percentageDailyChange","configureStore","SET_ALL_DAILY_GRAPHS","curState","response","copy","dailyGraphsStore","withAverageChangeDailyCases","with5DayAverage","withAverageDailyCasesEach5Days","graph","all","SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA","latestDate","c","latestData","a","selectedDate","selectedDateData","dailyAlt","SELECT_DAILY_GRAPHS_ATTRS","fieldName","graphId","id","newAvail","avail","selected","selectedAttributeNames","oldNames","includes","index","indexOf","splice","doAttrNames","name","sectionName","description","xAxisLabel","xAxisAttribute","xAxisDescription","SectionWrap","sectionWrap","SectionMain","sectionMain","SectionSide","title","subtitle","sectionSideWrap","SectionHeader","sectionHeader","Axis","dimensions","xScale","yScale","xAxisRef","selectLogScale","useRef","yAxisRef","xAxis","d3","yAxis","yTickWidth","abs","width","right","left","xTickWidth","height","top","bottom","doAxis","xRef","current","yRef","scale","ticks","every","theType","call","tickSize","ref","axisGroupX","transform","axisGroupY","YAxisLabel","text","yClass","fill","x","y","Line","graphData","handleHover","handleHoverLeave","path","line","stroke","strokeWidth","onMouseOver","onMouseLeave","HoverRect","rect","attr","handleHoverDate","handleHoverLeaveDate","handleTextBox","date","selectRect","isHovered","setIsHovered","onMouseEnter","localHandleHover","localHandleHoverLeave","xOffset","rectWidth","transition","cursor","opacity","onClick","localHandleTextBox","HoverRectangles","selectedRectDate","setSelectedRectDate","graphWidth","BoringButton","config","border","outline","minWidth","LineGraphDaily","daily","setSelectLogScale","svgRef","hoverInfo","setHoverInfo","hoverColor","setHoverColor","hoverPosition","setHoverPosition","getYScale","yExtent","extent","selectedExtents","maxValue","h","min","calculateYExtentOfSelectedAttributes","getYExtent","domain","clamp","range","nice","getXScale","xExtent","colorScale","interpolator","xP","clientX","yP","clientY","getColor","check","svgWrap","position","maxWidth","viewBox","yLabel","info","dateFieldName","dateToSelect","xScaleAttribute","DailyAttributeBtns","availableAttributes","handleSelectData","graphIndex","btnGroupWrap","TextBox","allData","RightSpan","defaultColor","rightSpan","textItem","infoWrap","ans","small","configureDailyGraphsStore","DailyGraphs","isLoading","setIsLoading","setIsError","graphs","getDailyStats","useCallback","axios","get","features","DailyPage","isError","setDaily","loading","Header","header","to","Lines","Circles","useDifferentShape","lineGraphCircle","cx","cy","r","rx","TinyToolTip","tickNumDays","LineGraph","yAxisLabel","setData","TinyTooltip","moreManagableVersionOfSelectedData","value","selectedData","w","genericTextItem","removeNulls","resp","m","successfullyGotDataForEachSelectedAttr","sectionAvail","fetched","s","getOne","part","Section","section","setSectionAvail","shouldUpdate","setShouldUpdate","setSelectedDate","shouldCancel","getDataForEachSelected","urlPart","filtered","flattened","getDataForEachSelectedCheckbox","sectionAvailCopy","Promise","selectedSection","find","profileStatsGraphWrap","profileStatsGraphLeft","newData","graphSectionBtnGroupWrap","sectionUpdate","checkThis","haveData","profileStatsGraphMain","renderLineGraph","Intro","allAvailableGraphs","handleSelectGraph","h1","p","desc","tabBtn","sections","allUrl","ProfileStats","setAllAvailableGraphs","newAvailGraphs","sortIntoArraysByCounty","field","usedCountyNames","forEach","n","getLatestForCounty","county","dates","TimeStampDate","turnArraysIntoNiceObjects","createManagableObjectAndSetFirstCountyToSelected","CountyName","PopulationCensus16","SET_ALL_DATA","allCounties","newSelectedCounty","getLatestDate","selectedCountyLatestData","SET_ALL_COUNTIES_LATEST_DATA","withoutNestedAttributes","allCountiesLatestData","UPDATE_ALL_COUNTIES_LATEST_DATA","newAllCountiesLatestData","stat","SELECT_ATTRIBUTE","update","selectedAttributeName","SELECT_COUNTY","selectedCounty","SELECT_DATE","yAxisAttribute","XAxisLabel","BarChart","handleSelectOneCounty","storeSections","attribute","countyNamesForAxisLabel","barChartSvgWrap","barHeight","barChartRect","whateverTheyCalledDateThisTime","PopulationProportionCovidCases","toFixed","AttributeBtns","ClickArrows","handleSelectDate","tempJustDates","localHandleSelectDate","isNext","selectedIndex","nextPrevDate","clickArrowsWrap","clickArrows","BarChartSection","handleSelectCounty","selectedAttribute","selectedAttr","setSelectedAttr","ClickRect","y2","y2Height","ClickRectangles","LineGraph2","setSelectedAttribute","hoverInfoDate","setHoverInfoDate","newSelected","useForXExtent","lineGraphSvgWrap","xAxisAttr","CountyBtns","counties","countiesTinyBtnGroupWrap","LineGraphSection","Counties","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.13e6492b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3MvGA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgWrap\":\"lineGraph_svgWrap__ZNc2m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroupWrap\":\"attributeBtns_btnGroupWrap__1YVfF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countiesTinyBtnGroupWrap\":\"countyBtns_countiesTinyBtnGroupWrap__3HFm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summaryWrap\":\"summary_summaryWrap__3euwc\",\"summaryInfoWrap\":\"summary_summaryInfoWrap__2H40J\",\"summaryBox\":\"summary_summaryBox__QxK1l\",\"sectionHeading\":\"summary_sectionHeading__12M4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"textBox_textItem__T_02Y\",\"infoWrap\":\"textBox_infoWrap__xxZTq\",\"small\":\"textBox_small__3tIyq\",\"rightSpan\":\"textBox_rightSpan__3lVY0\"};","import React from 'react';\r\nimport classes from './layout.module.css';\r\n\r\nconst layout = ({ children }) => {\r\n  return <div className={classes.pageWrap}>{children}</div>;\r\n};\r\n\r\nexport default layout;\r\n","import React from 'react';\r\nimport classes from './sectionWrapSimple.module.css';\r\n\r\n\r\n// offsetBottom to join with section underneath\r\nconst SectionWrapSimple = ({ children, offsetBottom, minHeight }) => (\r\n  <div style={{marginBottom: offsetBottom ? offsetBottom : '0', minHeight: minHeight ? minHeight : 0}} className={`${classes.sectionWrapSimple} ${offsetBottom ? classes.removeBottomOffset : ''}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SectionWrapSimple;\r\n","import React, { useEffect, useState } from 'react';\r\nimport classes from './summary.module.css';\r\nimport SectionWrapSimple from '../../UI/Sections/SectionWrapSimple/sectionWrapSimple';\r\n\r\nconst Summary = ({ stats }) => {\r\n  const getLastestDailyStats = (data) => {\r\n    const datesOnly = data.map((d) => d.attributes.Date);\r\n\r\n    const newestDate = Math.max(...datesOnly);\r\n\r\n    const ans = data.filter((d) => d.attributes.Date === newestDate);\r\n\r\n    return ans[0];\r\n  };\r\n\r\n  const [latest, setLatest] = useState();\r\n\r\n  useEffect(() => {\r\n    if (stats.length) {\r\n      const latestDailyStats = getLastestDailyStats(stats);\r\n      setLatest(latestDailyStats.attributes);\r\n    }\r\n  }, [stats]);\r\n\r\n  return (\r\n    <SectionWrapSimple>\r\n      {latest ? (\r\n        <div className={classes.summaryWrap}>\r\n          <div className={classes.sectionHeading}>\r\n            <h2 style={{ color: 'var(--white' }}>\r\n              Last Updated {new Date(latest.Date).toString().substring(0, 15)}\r\n            </h2>\r\n            <p>\r\n              The graphs below are based on data from data.gov.ie, available{' '}\r\n              <a\r\n                href=\"https://opendata-geohive.hub.arcgis.com/datasets/d8eb52d56273413b84b0187a4e9117be_0/data?geometry=-7.694%2C53.288%2C-7.691%2C53.289\"\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n              >\r\n                here\r\n              </a>\r\n              . It is updated every evening, with the latest record reporting\r\n              the counts recorded at 1pm the same day.\r\n            </p>\r\n          </div>\r\n          <div className={classes.summaryInfoWrap}>\r\n            <div className={classes.summaryBox}>\r\n              <h3>\r\n                {latest.TotalConfirmedCovidCases.toLocaleString()}{' '}\r\n                <small>\r\n                  (+\r\n                  {latest.ConfirmedCovidCases.toLocaleString()})*\r\n                </small>\r\n              </h3>\r\n              <h4>Total Confirmed Cases</h4>\r\n              <p>({new Date(latest.Date).toString().substring(0, 15)})</p>\r\n            </div>\r\n            <div className={classes.summaryBox}>\r\n              <h3>\r\n                {' '}\r\n                {latest.TotalCovidDeaths.toLocaleString()}\r\n                <small>\r\n                  {' '}\r\n                  (+\r\n                  {latest.ConfirmedCovidDeaths.toLocaleString()})*\r\n                </small>\r\n              </h3>\r\n              <h4>Total Deaths</h4>\r\n              <p>({new Date(latest.Date).toString().substring(0, 15)})</p>\r\n            </div>\r\n            <div className={classes.summaryBox}>\r\n              <h3> {latest.HospitalisedCovidCases.toLocaleString()} </h3>\r\n              <h4>Total Hosipialised</h4>\r\n              <p>\r\n                (\r\n                {new Date(latest.StatisticsProfileDate)\r\n                  .toString()\r\n                  .substring(0, 15)}\r\n                )\r\n              </p>\r\n            </div>\r\n\r\n            <div className={classes.summaryBox}>\r\n              <h3> {latest.RequiringICUCovidCases.toLocaleString()} </h3>\r\n              <h4>Total Requiring ICU</h4>\r\n              <p>\r\n                (\r\n                {new Date(latest.StatisticsProfileDate)\r\n                  .toString()\r\n                  .substring(0, 15)}\r\n                )\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <span style={{color:'var(--orange)', fontSize:'0.7rem', fontWeight:'normal'}}>*Latest daily figures</span>\r\n        </div>\r\n      ) : (\r\n        '  Loading...'\r\n      )}\r\n    </SectionWrapSimple>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import React from 'react';\r\nimport SectionWrapSimple from '../../../UI/Sections/SectionWrapSimple/sectionWrapSimple';\r\n\r\nconst ExtraInfo = () => {\r\n  return (\r\n    <SectionWrapSimple>\r\n      <p>\r\n        <small>\r\n          Note that from April 10th 2020 not all confirmed cases are included in\r\n          the <em>Daily Cases</em> or <em>Percentage Change</em> figures. Cases\r\n          not included represent tests that were sent to Germany for analysis.\r\n          All confirmed cases{' '}\r\n          <strong>\r\n            <em>are</em>\r\n          </strong>{' '}\r\n          included in <em>Total Confirmed Cases</em>.\r\n        </small>\r\n      </p>\r\n      <p>\r\n        <small>\r\n          For example on April 17th the number of <em>New Cases</em> is 597\r\n          while the <em>Total Cases</em> number jumps by 709 to 13,980. This can\r\n          be accounted for by the 112 positive test results returned from\r\n          Germany. Though most of these extra cases seem to be old, they have\r\n          not been backdated in the data released on data.gov.ie. A graph with\r\n          tests backdated is available from gov.ie{' '}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"nofollow noopener noreferrer\"\r\n            href=\"https://assets.gov.ie/73405/f1938dc1f761415b93db5b8009c91898.pdf\"\r\n          >\r\n            here\r\n          </a>{' '}\r\n          (.pdf download) and all updates for April 2020 are available from\r\n          gov.ie{' '}\r\n          <a\r\n            href=\"https://www.gov.ie/en/publication/20f2e0-updates-on-covid-19-coronavirus-since-january-2020/#april\"\r\n            target=\"_blank\"\r\n            rel=\"nofollow noopener noreferrer\"\r\n          >\r\n            here\r\n          </a>\r\n          .\r\n        </small>\r\n      </p>\r\n    </SectionWrapSimple>\r\n  );\r\n};\r\n\r\nexport default ExtraInfo;\r\n","import React from 'react';\r\n\r\nconst ErrorComp = ({ msg }) => (\r\n  <p\r\n    style={{\r\n      color: 'white',\r\n      background: 'var(--purple)',\r\n      padding: '1rem',\r\n      borderRadius: '0.4rem',\r\n      margin: '3rem 0'\r\n    }}\r\n  >\r\n    {msg}\r\n  </p>\r\n);\r\n\r\nexport default ErrorComp;\r\n","import React from 'react';\r\nimport classes from './loading.module.css';\r\nconst LoadingComp = ({ msg }) => (\r\n  <div className={classes.loader}>{msg}</div>\r\n  // <p\r\n  //   style={{\r\n  //     color: 'white',\r\n  //     background: 'var(--purple)',\r\n  //     padding: '1rem',\r\n  //     borderRadius: '0.4rem',\r\n  //     lineHeight:'1rem',\r\n \r\n  //   }}\r\n  // >\r\n  //   {msg}\r\n  // </p>\r\n);\r\n\r\nexport default LoadingComp;\r\n","import { useState, useEffect } from 'react';\r\n\r\nlet sharedState = {};\r\nlet listeners = [];\r\nlet actions = {};\r\n\r\nexport const useStore = (shouldListen=true) => {\r\n  const setState =  useState(sharedState)[1];\r\n\r\n  const dispatch = (actionId, param) => {\r\n    const newState = actions[actionId](sharedState, param);\r\n    sharedState = { ...sharedState, ...newState }\r\n\r\n    for(const listener of listeners) {\r\n      listener(sharedState);\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(shouldListen) {\r\n      listeners.push(setState);\r\n    }\r\n    \r\n\r\n    // remove on unmount\r\n    return ()=>{\r\n      if(shouldListen){\r\n        listeners = listeners.filter(l=> l !== setState);\r\n      }\r\n  \r\n    }\r\n  }, [setState, shouldListen]);\r\n\r\n  return [sharedState, dispatch];\r\n}\r\n\r\nexport const initStore = (userActions, initialState) => {\r\n  if(initialState) {\r\n    sharedState = {...sharedState, ...initialState}\r\n  }\r\n  actions = {...actions, ...userActions}\r\n}","import { initStore } from '../../Store/store';\r\n\r\n// TODO shared with counties-store (& profileStats.js=>section.js !)\r\nconst removeFromNestedAttributes = (data) => {\r\n  return data.map((d) => {\r\n    let obj = {};\r\n    for (const key in d.attributes) {\r\n      obj[key] = d.attributes[key];\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nconst calculateAverageOverTime = (data, ofWhat, numDays, newKeyName) => {\r\n  const appendNewArrayContainingDataToBeAveraged = (theData) => {\r\n    theData.map((d, i) => {\r\n      if (i >= numDays - 1) {\r\n        d[newKeyName] = theData.slice(i - (numDays - 1), i + 1);\r\n      } else {\r\n        d[newKeyName] = null;\r\n      }\r\n      return d;\r\n    });\r\n    return theData;\r\n  };\r\n\r\n  const reduceNewArrayToSingleAverageNum = (theData) => {\r\n    const ans = theData.map((d) => {\r\n      // const oldArr = d[newKeyName];\r\n      if (d[newKeyName] && d[newKeyName].length === numDays) {\r\n        const added = d[newKeyName].reduce((acc, e) => {\r\n          acc += e[ofWhat];\r\n          return acc;\r\n        }, 0);\r\n        if (added && !isNaN(added)) {\r\n          d[newKeyName] = added / numDays;\r\n          // d.oldArr = oldArr;\r\n        }\r\n      }\r\n      return d;\r\n    });\r\n\r\n    return ans;\r\n  };\r\n\r\n  const ans = [\r\n    appendNewArrayContainingDataToBeAveraged,\r\n    reduceNewArrayToSingleAverageNum,\r\n  ].reduce((data, fn) => fn(data), data);\r\n\r\n  return ans;\r\n};\r\n\r\nconst calculatePercentageChangeOf = (data, ofWhat = 'ConfirmedCovidCases') => {\r\n  return data.map((d, i) => {\r\n    const v2 = d[ofWhat];\r\n    if (data[i - 1]) {\r\n      // skip the first\r\n      const v1 = data[i - 1][ofWhat];\r\n      const change = v2 - v1;\r\n      const percentageChange = Math.round((change * 100) / v1);\r\n      d.percentageDailyChange = percentageChange;\r\n    } else {\r\n      d.percentageDailyChange = null;\r\n    }\r\n    return d;\r\n  });\r\n};\r\n\r\nconst configureStore = () => {\r\n  const actions = {\r\n    SET_ALL_DAILY_GRAPHS: (curState, response) => {\r\n      const copy = curState.dailyGraphsStore;\r\n\r\n      const withAverageChangeDailyCases = [\r\n        removeFromNestedAttributes,\r\n        calculatePercentageChangeOf,\r\n      ].reduce((data, fn) => {\r\n        return fn(data);\r\n      }, response);\r\n\r\n      const with5DayAverage = calculateAverageOverTime(\r\n        withAverageChangeDailyCases,\r\n        'percentageDailyChange',\r\n        5,\r\n        'percentageDailyChange5DayAverage'\r\n      );\r\n\r\n      const withAverageDailyCasesEach5Days = calculateAverageOverTime(\r\n        with5DayAverage,\r\n        'ConfirmedCovidCases',\r\n        5,\r\n        'AverageConfirmedCases'\r\n      );\r\n\r\n      // copy[0].all = withAverageDailyCasesEach5Days;\r\n      copy.map((graph) => (graph.all = withAverageDailyCasesEach5Days));\r\n    \r\n      return { dailyGraphsStore: copy };\r\n    },\r\n    SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA: (curState, latestDate) => {\r\n      const copy = curState.dailyGraphsStore;\r\n\r\n      // each graph\r\n      copy.map((graph) => {\r\n        if (!latestDate) {\r\n          latestDate = Math.max(...graph.all.map((c) => c.Date));\r\n        }\r\n        const latestData = graph.all.filter((a) => a.Date === latestDate)[0];\r\n        graph.selectedDate = latestDate;\r\n        graph.selectedDateData = latestData;\r\n        return graph;\r\n      });\r\n\r\n      return { dailyAlt: copy };\r\n    },\r\n    SELECT_DAILY_GRAPHS_ATTRS: (curState, { fieldName, graphId }) => {\r\n      // which graph??\r\n\r\n      const copy = curState.dailyGraphsStore;\r\n\r\n      copy.map((graph) => {\r\n        // .avail bool\r\n        if (graph.id === graphId) {\r\n          const newAvail = graph.avail.map((a) => {\r\n            if (a.fieldName === fieldName) {\r\n              a.selected = !a.selected;\r\n            }\r\n            return a;\r\n          });\r\n          graph.avail = newAvail;\r\n\r\n          // .selectedAttributeNames\r\n          const doAttrNames = (oldNames) => {\r\n            // not the right whatever....\r\n            if (!oldNames.includes(fieldName)) {\r\n              oldNames.push(fieldName);\r\n            } else {\r\n              const index = oldNames.indexOf(fieldName);\r\n              if (index > -1) {\r\n                oldNames.splice(index, 1);\r\n              }\r\n            }\r\n            return oldNames;\r\n          };\r\n\r\n          graph.selectedAttributeNames = doAttrNames(\r\n            graph.selectedAttributeNames\r\n          );\r\n        }\r\n\r\n        return graph;\r\n      });\r\n\r\n      return { dailyAlt: copy };\r\n    },\r\n  };\r\n  initStore(actions, {\r\n    dailyGraphsStore: [\r\n      {\r\n        name: 'DailyAlt',\r\n        id: 1,\r\n        sectionName: 'Daily Cases',\r\n        description:\r\n          '5 day average is average of current days new confirmed cases and 4 previous days.',\r\n        xAxisLabel: '# cases',\r\n        xAxisAttribute: 'Date',\r\n        selectedAttributeNames: ['ConfirmedCovidCases'],\r\n        selectedDate: '',\r\n        selectedDateData: [],\r\n        all: [],\r\n        avail: [\r\n          {\r\n            name: 'New Cases',\r\n\r\n            fieldName: 'ConfirmedCovidCases',\r\n            xAxisDescription: 'Number of Confirmed Cases',\r\n            xAxisAttribute: 'Date',\r\n            selected: true,\r\n            color: 'var(--purple)',\r\n          },\r\n          {\r\n            name: 'New Cases (5 day avg)',\r\n            fieldName: 'AverageConfirmedCases',\r\n            xAxisAttribute: 'Date',\r\n            xAxisDescription: 'AverageConfirmedCases',\r\n            selected: false,\r\n            color: 'var(--yellow)',\r\n          },\r\n          {\r\n            name: 'Total Cases',\r\n            fieldName: 'TotalConfirmedCovidCases',\r\n            xAxisDescription: 'Total Number of Confirmed Cases',\r\n            xAxisAttribute: 'Date',\r\n            selected: false,\r\n            color: 'var(--blue)',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'DailyAlt',\r\n        id: 2,\r\n        sectionName: 'Daily Cases (Percentage Change)',\r\n        description:\r\n          'Percentage Change calculated as (V2 - V1) x 100 / V1. 5 day average is average of current day and 4 previous days. ',\r\n        xAxisLabel: '% change',\r\n        xAxisAttribute: 'Date',\r\n        selectedAttributeNames: ['percentageDailyChange'],\r\n        selectedDate: '',\r\n        selectedDateData: [],\r\n        all: [],\r\n        avail: [\r\n          {\r\n            name: 'New Cases (% change)',\r\n            fieldName: 'percentageDailyChange',\r\n            xAxisAttribute: 'Date',\r\n            xAxisDescription: '% Daily Change (newCases)',\r\n            selected: true,\r\n            color: 'var(--blue)',\r\n          },\r\n          {\r\n            name: 'New Cases (% change) 5 day avg',\r\n            fieldName: 'percentageDailyChange5DayAverage',\r\n            xAxisDescription: 'percentageDailyChange5DayAverage',\r\n            xAxisAttribute: 'Date',\r\n            selected: false,\r\n            color: 'var(--purple)',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'DailyAlt',\r\n        id: 3,\r\n        sectionName: 'Deaths',\r\n        description: 'Description of deaths data.',\r\n        xAxisLabel: '# deaths',\r\n        xAxisAttribute: 'Date',\r\n        selectedAttributeNames: ['ConfirmedCovidDeaths'],\r\n        selectedDate: '',\r\n        selectedDateData: [],\r\n        all: [],\r\n        avail: [\r\n          {\r\n            name: 'New Deaths',\r\n            fieldName: 'ConfirmedCovidDeaths',\r\n            xAxisDescription: 'Number of Deaths',\r\n            xAxisAttribute: 'Date',\r\n            selected: true,\r\n            color: 'var(--green)',\r\n          },\r\n\r\n          {\r\n            name: 'Total Deaths',\r\n            fieldName: 'TotalCovidDeaths',\r\n            xAxisDescription: 'Total Number of Deaths',\r\n            xAxisAttribute: 'Date',\r\n            selected: false,\r\n            color: 'var(--orange)',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport classes from './sectionWrap.module.css';\r\n// import SectionSide from '../SectionSide/sectionSide';\r\n\r\n\r\nconst SectionWrap = ({ children }) => (\r\n  <div className={classes.sectionWrap}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SectionWrap;\r\n","import React from 'react';\r\nimport classes from './sectionMain.module.css';\r\n\r\nconst SectionMain = ({ children, background }) => {\r\n\r\n  return <div style={{background: `${background ? background : 'var(--white)'}`}} className={classes.sectionMain}>{children}</div>;\r\n};\r\n\r\nexport default SectionMain;\r\n","import React from 'react';\r\nimport classes from './sectionSide.module.css';\r\n\r\nconst SectionSide = ({title, subtitle, description, children}) => {\r\n  return(\r\n    <div className={classes.sectionSideWrap}>\r\n      {/* <div className={classes.sectionHeader}>\r\n        <h3>\r\n          {title} <br />\r\n          <small>{subtitle} </small>\r\n        </h3>\r\n        <p>{description}</p>\r\n      </div> */}\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SectionSide;","import React from 'react';\r\nimport classes from './sectionHeader.module.css';\r\n\r\nconst SectionHeader = ({ title, subtitle, description, children }) => (\r\n  <div className={classes.sectionHeader}>\r\n    <h3>\r\n      {title} <br />\r\n      <small>{subtitle} </small>\r\n    </h3>\r\n    <p>{description}</p>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SectionHeader;","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './axis.module.css';\r\n\r\nconst Axis = ({ dimensions, xScale, yScale, selectLogScale }) => {\r\n  const xAxisRef = useRef(null);\r\n  const yAxisRef = useRef(null);\r\n  const xAxis = d3.axisBottom();\r\n  const yAxis = d3.axisLeft();\r\n  const yTickWidth = -Math.abs(\r\n    dimensions.width - dimensions.margin.right - dimensions.margin.left\r\n  );\r\n  const xTickWidth = -Math.abs(\r\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom\r\n  );\r\n\r\n  useEffect(() => {\r\n    doAxis();\r\n  });\r\n\r\n  const doAxis = () => {\r\n    const xRef = d3.select(xAxisRef.current);\r\n    const yRef = d3.select(yAxisRef.current);\r\n    xAxis.scale(xScale).ticks(d3.timeDay.every(2));\r\n    if (yScale.theType === 'LOG') {\r\n      // appended to yScale in lineGraph\r\n\r\n      yAxis.scale(yScale).ticks(10, ',.0f');\r\n    } else {\r\n      yAxis.scale(yScale).ticks(20);\r\n    }\r\n\r\n    //= scaleSymlog handles values below zero but I can't figure out how to get the ticks to behave. Below moves some of them to the right of the graph\r\n    // if (yScale.theType === 'LOG') { // appended to yScale in lineGraph\r\n    //   yAxis\r\n    //     .scale(yScale)\r\n    //     .ticks(10, ',.0f')\r\n    //     .tickFormat((d, i, textLabels) => {\r\n    //       // transform some of the labels to the right cause o' clutter see global app.css for .dodgyTransformClutterLogScaleLabels\r\n\r\n    //       textLabels.map((textLabel, i) => {\r\n    //         if (i % 2 !== 0) {\r\n    //           return (textLabel.classList.value =\r\n    //             'dodgyTransformClutterLogScaleLabels');\r\n    //         }\r\n    //         return textLabel;\r\n    //       });\r\n    //       return d;\r\n    //     });\r\n    // }\r\n\r\n    xRef.call(xAxis.tickSize(xTickWidth));\r\n    yRef.call(yAxis.tickSize(yTickWidth));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <g\r\n        ref={xAxisRef}\r\n        className={classes.axisGroupX}\r\n        transform={`translate(0,${dimensions.height - dimensions.margin.top})`}\r\n      ></g>\r\n      <g\r\n        ref={yAxisRef}\r\n        className={classes.axisGroupY}\r\n        transform={`translate(${dimensions.margin.left}, 0)`}\r\n      ></g>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Axis;\r\n","import React from 'react';\r\n\r\nconst YAxisLabel = ({ text, yClass, height, margin }) => {\r\n  return (\r\n    <text\r\n      // fill=\"var(--black)\"\r\n      fill=\"var(--white)\" // for dark graph theme\r\n      // x={-Math.abs(height / 2 +40)}\r\n      x={-Math.abs(height -margin.bottom)}\r\n      y=\"12\"\r\n      style={{ transform: 'rotate(-90deg)', fontSize: '1rem', fontWeight:700 }}\r\n      className={yClass}\r\n    >\r\n      {text}\r\n    </text>\r\n  );\r\n};\r\n\r\nexport default YAxisLabel;\r\n","import React  from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nconst Line = ({\r\n  graphData,\r\n  handleHover,\r\n  handleHoverLeave,\r\n  xScale,\r\n  yScale,\r\n  fieldName,\r\n  color,\r\n\r\n}) => {\r\n\r\n  \r\n  const line = d3\r\n    .line()\r\n    .x((d) => xScale(d['Date']))\r\n    .y((d) => {\r\n      return yScale(d[fieldName]);\r\n    });\r\n\r\n  const path = line(graphData);\r\n\r\n  return (\r\n    <path\r\n      d={path}\r\n      fill=\"none\"\r\n      stroke={color}\r\n      id={fieldName}\r\n      strokeWidth={graphData.selected ? '4px' : '2px'}\r\n      onMouseOver={(e) => handleHover(e, color)}\r\n      onMouseLeave={(e) => handleHoverLeave(e)}\r\n \r\n    ></path>\r\n  );\r\n};\r\n\r\nexport default Line;\r\n","import React, { useState } from 'react';\r\n\r\nconst HoverRect = ({\r\n  rect,\r\n  // graphData,\r\n  attr, // the actual data (from api attributes:{})\r\n  handleHoverDate,\r\n  handleHoverLeaveDate,\r\n  xAxisAttribute, // name of 'date' field - Date / StatisticsProfileDate\r\n  handleTextBox,\r\n  selected,\r\n  date,\r\n  selectRect,\r\n}) => {\r\n \r\n  const [isHovered, setIsHovered] = useState(false);\r\n  \r\n  const localHandleHover = (e) => {\r\n    setIsHovered(true);\r\n    handleHoverDate(e, attr); \r\n  };\r\n  \r\n  const localHandleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n    handleHoverLeaveDate(e);\r\n  };\r\n\r\n  const localHandleTextBox = (attr) => {\r\n    selectRect(date);\r\n    handleTextBox(attr, xAxisAttribute);\r\n  };\r\n\r\n  return (\r\n    <rect\r\n      key={rect.key}\r\n      onMouseEnter={(e) =>\r\n        localHandleHover(e)\r\n      }\r\n      onMouseLeave={(e) => localHandleHoverLeave(e)}\r\n      x={rect.xOffset}\r\n      y={rect.y}\r\n      width={rect.rectWidth}\r\n      height={rect.height}\r\n      fill=\"var(--white)\" // for dark graph theme\r\n      style={{ transition: 'all 0.005s linear', cursor: 'pointer' }}\r\n      opacity={`${isHovered || selected ? '0.2' : '0'}`}\r\n      onClick={() => localHandleTextBox(attr)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HoverRect;\r\n","import React, { useState } from 'react';\r\nimport HoverRect from './hoverRect';\r\n\r\nconst HoverRectangles = ({\r\n  graphData,\r\n  dimensions,\r\n  xScale,\r\n  handleHoverDate,\r\n  xAxisAttribute,\r\n  handleHoverLeaveDate,\r\n  handleTextBox,\r\n}) => {\r\n\r\n  const [selectedRectDate, setSelectedRectDate] = useState('');\r\n  const { width, height, margin } = dimensions;\r\n\r\n  return graphData.length\r\n    ? graphData.map((attr, i) => {\r\n        const graphWidth = width - margin.left - margin.right;\r\n        const rectWidth = graphWidth / graphData.length;\r\n        const x = xScale(attr[xAxisAttribute]);\r\n        const xOffset = x - rectWidth / 2;\r\n        const rect = {\r\n          x: x,\r\n          y: margin.top,\r\n          graphWidth,\r\n          rectWidth,\r\n          height: height - margin.bottom,\r\n          xOffset,\r\n          key: `${graphData.fieldName}-${i}`,\r\n\r\n          selected:\r\n            selectedRectDate === attr[xAxisAttribute]\r\n              ? true\r\n              : false,\r\n          date: attr[xAxisAttribute],\r\n        };\r\n        return x ? (\r\n          <HoverRect\r\n            rect={rect}\r\n            attr={attr}\r\n            key={attr[xAxisAttribute]}\r\n            // graphData={graphData}\r\n            handleHoverLeaveDate={handleHoverLeaveDate}\r\n            handleHoverDate={handleHoverDate}\r\n            handleTextBox={handleTextBox}\r\n            xAxisAttribute={xAxisAttribute}\r\n            selectRect={setSelectedRectDate}\r\n            selected={rect.selected}\r\n            date={rect.date}\r\n          />\r\n        ) : null;\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default HoverRectangles;\r\n","import React from 'react';\r\n// import classes from './boringButton.module.css';\r\n\r\nconst BoringButton = ({ config, onClick, children}) => {\r\n\r\n  const { background, borderRadius, color, border, fontWeight, fontSize, padding, outline, minWidth} = config || {};\r\n\r\n  return <button \r\n  style={{\r\n    background: `${background ? background : 'var(--blue)'} `,\r\n    borderRadius: `${borderRadius ? borderRadius : '0.4rem'}`,\r\n    color: `${color ? color : 'var(--white)'}`,\r\n    border: `${border ? border : 'none'}`,\r\n    fontWeight: `${fontWeight ? fontWeight : '700'}`,\r\n    fontSize: `${fontSize ? fontSize : '0.6rem'}`,\r\n    padding: `${padding ? padding : '0.5rem 1rem'}`,\r\n    outline: `${outline ? outline : 'none'}`, \r\n    minWidth: `${minWidth ? minWidth : '5rem'}`\r\n  \r\n  }}\r\n  onClick={onClick}\r\n>\r\n  {children}\r\n</button>\r\n}\r\n\r\nexport default BoringButton;","import React, { useState, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './lineGraphDaily2.module.css';\r\nimport Axis from './axis';\r\nimport YAxisLabel from '../../../UI/Graphs/yAxisLabel';\r\nimport Line from './line';\r\nimport { useStore } from '../../../Store/store';\r\nimport HoverRectangles from '../../../UI/Graphs/HoverRectangles/hoverRectangles';\r\nimport BoringButton from '../../../UI/Buttons/boringButton';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 50,\r\n    right: 50,\r\n    top: 50,\r\n    bottom: 50,\r\n  },\r\n  width: 800,\r\n  height: 600,\r\n};\r\nconst { margin, width, height } = dimensions;\r\nconst LineGraphDaily = ({ graphId }) => {\r\n  const dispatch = useStore(false)[1];\r\n  const dailyData = useStore()[0].dailyGraphsStore;\r\n\r\n  const daily = dailyData.filter((d) => d.id === graphId)[0]; //should be called graph\r\n\r\n  const [selectLogScale, setSelectLogScale] = useState(true);\r\n\r\n  const svgRef = useRef(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverColor, setHoverColor] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n\r\n  const calculateYExtentOfSelectedAttributes = () => {\r\n    // get yScale\r\n    const getExtentsForAllSelectedAttributes = () => {\r\n      const extents = daily.selectedAttributeNames.map((attr) => {\r\n        return d3.extent(daily.all, (d) => d[attr]);\r\n      });\r\n      return extents;\r\n    };\r\n    const selectedExtents = getExtentsForAllSelectedAttributes();\r\n    const maxValue = selectedExtents.map((h) =>\r\n      Math.max(...selectedExtents.map((h) => h[1]))\r\n    )[0];\r\n    const minValue = selectedExtents.map((h) =>\r\n      Math.min(...selectedExtents.map((h) => h[0]))\r\n    )[0];\r\n    const yExtent = [minValue, maxValue];\r\n    return yExtent;\r\n  };\r\n\r\n  const getYScale = () => {\r\n    const getYExtent = () => {\r\n      let extent = calculateYExtentOfSelectedAttributes();\r\n      // logScale can't deal with <= 0\r\n      if (selectLogScale && extent[0] <= 0) {\r\n        extent[0] = 1;\r\n      }\r\n      return extent;\r\n    };\r\n    const yExtent = getYExtent();\r\n    if (selectLogScale) {\r\n      const yScale = d3\r\n        .scaleLog()\r\n        // .scaleSymlog() accepts values below zero but causes more trouble than it's worth\r\n        .domain(yExtent)\r\n        .clamp(true)\r\n        .range([height - margin.top, margin.bottom])\r\n        .nice();\r\n      yScale.theType = 'LOG'; // need this for nice axis (axis.js)\r\n      return yScale;\r\n    } else {\r\n      const yScale = d3\r\n        .scaleLinear()\r\n        .domain(yExtent)\r\n        .clamp(true)\r\n        .range([height - margin.top, margin.bottom]);\r\n      yScale.theType = 'LINEAR'; // need this for nice axis\r\n      return yScale;\r\n    }\r\n  };\r\n\r\n  const getXExtent = () => {\r\n    return d3.extent(daily.all, (d) => d.Date);\r\n  };\r\n\r\n  const getXScale = () => {\r\n    const xExtent = getXExtent();\r\n    const xScale = d3\r\n      .scaleTime()\r\n      .domain([xExtent[0], xExtent[1]])\r\n      .range([margin.left, width - margin.right]);\r\n    return xScale;\r\n  };\r\n\r\n  const colorScale = d3\r\n    .scaleSequential()\r\n    .domain([0, 100])\r\n    .interpolator(d3.interpolateRainbow);\r\n\r\n  const handleTextBox = (data, dateFieldName) => {\r\n    if (!data || !dateFieldName) return;\r\n    const dateToSelect = data[dateFieldName];\r\n    dispatch('SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA', dateToSelect);\r\n  };\r\n\r\n  const handleHover = (e, color) => {\r\n    setHoverInfo(e.target.id);\r\n    setHoverColor(color);\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n  const handleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n  };\r\n  //============\r\n  const handleHoverDate = (e, info) => {\r\n    // daily data date attr is 'Date'\r\n    // statistics profile data date attr is 'StatisticsProfileDate'\r\n    let dateFieldName = 'Date';\r\n    if (!info[dateFieldName]) {\r\n      dateFieldName = 'Date';\r\n    }\r\n    setHoverInfo(new Date(info[dateFieldName]).toString().substring(0, 10));\r\n    setHoverColor('var(--lightBlack)');\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeaveDate = () => {\r\n    setIsHovered(false);\r\n  };\r\n  //==========\r\n  const getColor = (fieldName) => {\r\n    const check = daily.avail.filter((d) => d.fieldName === fieldName);\r\n    if (check.length && check[0].color) {\r\n      return check[0].color;\r\n    }\r\n\r\n    return 'var(--blue)';\r\n  };\r\n  const toggleLogScale = () => {\r\n    const currentLog = selectLogScale;\r\n    setSelectLogScale(!currentLog);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.svgWrap}>\r\n      <BoringButton onClick={toggleLogScale} config={{minWidth:'8rem'}}>\r\n        {selectLogScale ? 'Use Linear Scale' : 'Use Log Scale'}\r\n      </BoringButton>\r\n\r\n      {isHovered && hoverPosition.length ? (\r\n        <div\r\n          style={{\r\n            opacity: `${isHovered ? '1' : '0'}`,\r\n            position: 'fixed',\r\n            left: `${hoverPosition[0]}px`,\r\n            top: `${hoverPosition[1]}px`,\r\n            background: `${hoverColor}`,\r\n            color: 'var(--white)',\r\n            padding: '0.5rem 1rem',\r\n            borderRadius: '0.4rem',\r\n            fontSize: '0.6rem',\r\n          }}\r\n        >\r\n          {hoverInfo}\r\n        </div>\r\n      ) : null}\r\n\r\n      <svg\r\n        style={{ maxWidth: '100%' }}\r\n        ref={svgRef}\r\n        viewBox=\"0 0 800 600\"\r\n        width={width}\r\n        // height={height}\r\n      >\r\n        {daily && daily.all.length ? (\r\n          <>\r\n            <Axis\r\n              dimensions={dimensions}\r\n              xScale={getXScale()}\r\n              yScale={getYScale()}\r\n              selectLogScale={selectLogScale}\r\n            />\r\n\r\n            <YAxisLabel\r\n              text={daily.xAxisLabel}\r\n              yClass={classes.yLabel}\r\n              height={height}\r\n              margin={margin}\r\n            />\r\n\r\n            <HoverRectangles\r\n              graphData={daily.all}\r\n              dimensions={dimensions}\r\n              xScale={getXScale()}\r\n              xAxisAttribute={daily.xAxisAttribute}// todo\r\n              handleHoverLeaveDate={handleHoverLeaveDate}\r\n              handleHoverDate={handleHoverDate}\r\n              handleTextBox={handleTextBox}\r\n            />\r\n           { daily.selectedAttributeNames.map((fieldName) => {\r\n              return (\r\n                <Line\r\n                  graphData={daily.all}\r\n                  i=\"0\"\r\n                  key={fieldName}\r\n                  handleHover={handleHover}\r\n                  handleHoverLeave={handleHoverLeave}\r\n                  xScale={getXScale()}\r\n                  yScale={getYScale()}\r\n                  colorScale={colorScale}\r\n                  fieldName={fieldName}\r\n                  xScaleAttribute=\"Date\"\r\n                  color={getColor(fieldName)}\r\n        \r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        ) : null}\r\n\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraphDaily;\r\n","import React from 'react';\r\nimport classes from './dailyAttributeBtns.module.css';\r\n\r\nconst DailyAttributeBtns = ({\r\n  availableAttributes,\r\n  handleSelectData,\r\n  graphIndex,\r\n}) => {\r\n  return (\r\n    <div className={classes.btnGroupWrap}>\r\n      {availableAttributes.map((a) => (\r\n        <button\r\n          key={a.fieldName}\r\n          id={a.name}\r\n          name={a.fieldName}\r\n          selected={a.selected}\r\n          style={{\r\n            opacity: `${!a.selected ? '0.7' : `1`}`,\r\n            background: `${a.selected ? `${a.color}` : `var(--lightBlack)`}`,\r\n            border: `${\r\n              !a.selected ? `0.2rem solid ${a.color}` : `0.1rem solid `\r\n            }`,\r\n            outline: 'none',\r\n          }}\r\n          onClick={(e) => handleSelectData(e, graphIndex)}\r\n        >\r\n          {a.name}\r\n        </button>\r\n      ))}\r\n      ;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyAttributeBtns;\r\n","import React, { useState } from 'react';\r\nimport classes from './textBox.module.css';\r\n\r\nconst TextBox = ({ allData }) => {\r\n  const [daily] = useState(allData);\r\n\r\n  const dailyWithTitle = () => {\r\n    return daily.selectedAttributeNames.map((name) => {\r\n      const title = daily.avail.filter((a) => a.fieldName === name)[0].name;\r\n      const color = daily.avail.filter((a) => a.fieldName === name)[0].color;\r\n\r\n      const ans = {};\r\n\r\n      ans[name] = daily.selectedDateData[name];\r\n      ans.color = color;\r\n      ans.title = title;\r\n      ans.fieldName = name;\r\n      ans.info = daily.selectedDateData[name];\r\n\r\n      return ans;\r\n    });\r\n  };\r\n\r\n  const RightSpan = ({ text, fieldName, color }) => {\r\n    let defaultColor = 'var(--blue)';\r\n\r\n    if (color) defaultColor = color;\r\n    return (\r\n      <span\r\n        style={{ background: `${defaultColor}` }}\r\n        className={classes.rightSpan}\r\n      >\r\n        {text || ''}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderRightSpans = () => {\r\n    const withTitle = dailyWithTitle();\r\n\r\n    return withTitle.map((d) => {\r\n      return (\r\n        <div className={classes.infoWrap} key={d.fieldName}>\r\n          <p>{d.title}: </p>\r\n          <RightSpan\r\n            text={d.info}\r\n            color={d.color}\r\n            fieldName={d.fieldName}\r\n          ></RightSpan>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return daily && daily.selectedDateData ? (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          {new Date(daily.selectedDateData[daily.xAxisAttribute])\r\n            .toString()\r\n            .substring(0, 16)}\r\n        </h3>\r\n      </div>\r\n      {renderRightSpans()}\r\n    </div>\r\n  ) : (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          <br />\r\n          <span className={classes.small}></span>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport configureDailyGraphsStore from './dailyGraphs-store';\r\nimport { useStore } from '../../Store/store';\r\nimport SectionWrap from '../../UI/Sections/SectionWrap/sectionWrap';\r\nimport SectionMain from '../../UI/Sections/SectionMain/sectionMain';\r\nimport SectionSide from '../../UI/Sections/SectionSide/sectionSide';\r\nimport SectionHeader from '../../UI/Sections/SectionHeader/sectionHeader';\r\nimport LineGraphDaily from './LineGraphDaily/lineGraphDaily';\r\n\r\nimport DailyAttributeBtns from '../Counties/SectionsUI/DailyAttributeBtns/dailyAttributeBtns';\r\nimport TextBox from './TextBox/textBox';\r\n\r\nconfigureDailyGraphsStore();\r\n\r\n// Daily data only (no Statistics Profile fields) for each day.\r\nconst dailyStatsSoFarUrl = `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/CovidStatisticsProfileHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=Date,ConfirmedCovidCases,TotalConfirmedCovidCases,ConfirmedCovidDeaths,TotalCovidDeaths,ConfirmedCovidRecovered,TotalCovidRecovered,FID&returnGeometry=false&outSR=4326&f=json`;\r\n\r\nconst DailyGraphs = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const dispatch = useStore()[1];\r\n  const graphs = useStore()[0].dailyGraphsStore;\r\n\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n      try {\r\n        const data = await getDailyStats();\r\n\r\n        dispatch('SET_ALL_DAILY_GRAPHS', data);\r\n        dispatch('SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA');\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const getDailyStats = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(dailyStatsSoFarUrl);\r\n      return response.data.features;\r\n    } catch (e) {\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n  }, []);\r\n\r\n  const handleSelectData = (e, graphId) => {\r\n    const fieldName = e.target.name;\r\n    dispatch('SELECT_DAILY_GRAPHS_ATTRS', { fieldName, graphId });\r\n  };\r\n  return graphs && graphs.length\r\n    ? graphs.map((graph, index) => (\r\n \r\n        <SectionWrap key={index}>\r\n          <SectionSide>\r\n            <SectionHeader\r\n              title={graph.sectionName}\r\n              subtitle=\"\"\r\n              description={graph.description}\r\n            />\r\n            {!isLoading && graph.all.length ? (\r\n              <TextBox allData={graph} />\r\n            ) : (\r\n              'Loading...'\r\n            )}\r\n            <DailyAttributeBtns\r\n              availableAttributes={graph.avail}\r\n              graphIndex={graph.id}\r\n              handleSelectData={handleSelectData}\r\n            />\r\n          </SectionSide>\r\n          <SectionMain background='var(--lightBlack)'>\r\n            {!isLoading && graph && graph.all.length ? (\r\n              <LineGraphDaily\r\n                // graphData={graph}\r\n                graphId={graph.id}\r\n              />\r\n            ) : (\r\n              'Loading...'\r\n            )}\r\n          </SectionMain>\r\n        </SectionWrap>\r\n\r\n      ))\r\n    : null;\r\n};\r\n\r\nexport default DailyGraphs;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Layout from '../layout';\r\nimport axios from 'axios';\r\nimport Summary from '../Summary/summary';\r\nimport ExtraInfo from './ExtraInfo/extraInfo';\r\nimport ErrorComp from '../../UI/error';\r\nimport LoadingComp from '../../UI/loading';\r\nimport DailyGraphs from '../DailyGraphs/dailyGraphs';\r\n\r\n// uri with data that's being updated\r\nconst dailyStatsSoFarUrl = `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/CovidStatisticsProfileHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=*&outSR=4326&f=json`;\r\n\r\nconst DailyPage = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [daily, setDaily] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n      try {\r\n        const data = await getDailyStats();\r\n        setDaily(data);\r\n\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const getDailyStats = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(dailyStatsSoFarUrl);\r\n      return response.data.features;\r\n    } catch (e) {\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      {isError ? <ErrorComp msg=\"Could not load data.\" /> : null}\r\n      {isLoading ? <LoadingComp msg=\"Loading...\" /> : null}\r\n      {daily && daily.length && <Summary stats={daily} loading={isLoading} />}\r\n\r\n      <DailyGraphs />\r\n      <ExtraInfo />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default DailyPage;\r\n","import React from 'react';\r\nimport classes from './header.module.css';\r\nimport { Link } from 'react-router-dom';\r\nconst Header = () => (\r\n  <header className={classes.header}>\r\n    <h1>Ireland Coronavirus Stats</h1>\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/stats\">Profiles</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/counties\">Counties</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport * as d3 from 'd3';\r\n\r\nconst Lines = ({data, xScale, yScale}) => {\r\n\r\n    const ans = data.map((graphData) => {\r\n      if (graphData.data.length && graphData.selected) {\r\n        const line = d3\r\n          .line()\r\n          // .x((d) => xScale(d.attributes.StatisticsProfileDate))\r\n          .x((d) => xScale(d[graphData.xAxisAttribute]))\r\n          .y((d) => yScale(d[graphData.fieldName]));\r\n  \r\n        const path = line(graphData.data);\r\n        return  (\r\n          <path\r\n            key={graphData.fieldName}\r\n            d={path}\r\n            fill=\"none\"\r\n            stroke={graphData.color}\r\n            strokeWidth=\"2px\"\r\n          ></path>\r\n        );\r\n      }\r\n    });\r\n    return ans;\r\n  \r\n  \r\n}\r\n\r\nexport default Lines;","import React from 'react';\r\nimport classes from './circles.module.css';\r\n\r\nconst Circles = ({\r\n  data,\r\n  yScale,\r\n  xScale,\r\n  handleTextBox,\r\n  handleHover,\r\n  handleHoverLeave,\r\n}) => {\r\n  return data.map((graphData) => {\r\n    return graphData.data.length && graphData.selected\r\n      ? graphData.data.map((attr, i) => {\r\n          const y = yScale(attr[graphData.fieldName]);\r\n          const x = xScale(attr[graphData.xAxisAttribute]);\r\n          // console.log(data,data.useDifferentShape)\r\n          return x && y && !graphData.useDifferentShape ? (\r\n            <circle\r\n              key={`${graphData.fieldName}-${i}`}\r\n              className={classes.lineGraphCircle}\r\n              onClick={() => handleTextBox(attr, graphData.xAxisAttribute)}\r\n              onMouseEnter={(e) => handleHover(e, attr, graphData)}\r\n              onMouseLeave={(e) => handleHoverLeave(e)}\r\n              cx={x}\r\n              cy={y}\r\n              r=\"0.3rem\"\r\n              fill={graphData.color}\r\n            ></circle>\r\n          ) : x && y && graphData.useDifferentShape ? (\r\n            <rect\r\n              key={`${graphData.fieldName}-${i}`}\r\n              className={classes.lineGraphCircle}\r\n              onClick={() => handleTextBox(attr, graphData.xAxisAttribute)}\r\n              onMouseEnter={(e) => handleHover(e, attr, graphData)}\r\n              onMouseLeave={(e) => handleHoverLeave(e)}\r\n              x={x}\r\n              y={y}\r\n              rx=\"0.1rem\"\r\n              width=\"0.2rem\"\r\n              height=\"0.6rem\"\r\n              fill={graphData.color}\r\n            ></rect>\r\n          ) : null;\r\n        })\r\n      : null;\r\n  });\r\n};\r\n\r\nexport default Circles;\r\n","import React from 'react';\r\n\r\nconst TinyToolTip = ({ isHovered, hoverPosition, hoverColor, children }) => {\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        opacity: `${isHovered ? '1' : '0'}`,\r\n        position: 'fixed',\r\n        left: `${hoverPosition[0]}px`,\r\n        top: `${hoverPosition[1]}px`,\r\n        background: `${hoverColor}`,\r\n        color: 'var(--white)',\r\n        padding: '0.5rem 1rem',\r\n        borderRadius: '0.4rem',\r\n        fontSize: '0.6rem',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TinyToolTip;\r\n","import React, { useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './axis.module.css';\r\n\r\nconst Axis = ({ dimensions, xScale, yScale, tickNumDays }) => {\r\n  const xAxisRef = useRef(null);\r\n  const yAxisRef = useRef(null);\r\n  const xAxis = d3.axisBottom();\r\n  const yAxis = d3.axisLeft();\r\n  const yTickWidth = -Math.abs(\r\n    dimensions.width - dimensions.margin.right - dimensions.margin.left\r\n  );\r\n  const xTickWidth = -Math.abs(\r\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom + 10\r\n  );\r\n\r\n  const doAxis = () => {\r\n    const xRef = d3.select(xAxisRef.current);\r\n    const yRef = d3.select(yAxisRef.current);\r\n    xAxis.scale(xScale).ticks(d3.timeDay.every(tickNumDays || 1));\r\n    // xAxis.scale(xScale).ticks(d3.timeDay);\r\n    yAxis.scale(yScale).ticks(20, ',.1s');\r\n    xRef.call(xAxis.tickSize(xTickWidth));\r\n    yRef.call(yAxis.tickSize(yTickWidth));\r\n  };\r\n  doAxis();\r\n\r\n  return (\r\n    <>\r\n      <g\r\n        className={classes.axisGroupX}\r\n        ref={xAxisRef}\r\n        transform={`translate(0,${\r\n          dimensions.height - dimensions.margin.top + 10\r\n        })`}\r\n      ></g>\r\n      <g\r\n        className={classes.axisGroupY}\r\n        style={{ stroke: 'none' }}\r\n        ref={yAxisRef}\r\n        transform={`translate(${dimensions.margin.left}, 0)`}\r\n      ></g>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Axis;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './lineGraph.module.css';\r\nimport Lines from './lines';\r\nimport Circles from './circles';\r\nimport HoverRectangles from '../../../UI/Graphs/HoverRectangles/hoverRectangles';\r\nimport TinyTooltip from '../../../UI/Tooltips/TinyTooltip';\r\nimport YAxisLabel from '../../../UI/Graphs/yAxisLabel';\r\nimport Axis from '../../../UI/Graphs/axis';\r\n\r\n// Prevent lines/circles spilling over from the start of graph. Use selected attrubute with the earliest non null values for the date\r\nconst calculateYExtentOfSelectedAttributes = (data) => {\r\n  const selected = data.filter((d) => d.selected);\r\n  const getExtentsForAllSelectedAttributes = () => {\r\n    const extents = selected.map((attr) => {\r\n      return d3.extent(attr.data, (d) => d.StatisticsProfileDate);\r\n    });\r\n    return extents;\r\n  };\r\n  const selectedExtents = getExtentsForAllSelectedAttributes();\r\n  const maxValue = selectedExtents.map((h) =>\r\n    Math.max(...selectedExtents.map((h) => h[1]))\r\n  )[0];\r\n  const minValue = selectedExtents.map((h) =>\r\n    Math.min(...selectedExtents.map((h) => h[0]))\r\n  )[0];\r\n  const xExtent = [minValue, maxValue];\r\n\r\n  return xExtent;\r\n};\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 50,\r\n    right: 50,\r\n    top: 50,\r\n    bottom: 50,\r\n  },\r\n  width: 800,\r\n  height: 600,\r\n};\r\nconst { margin, width, height } = dimensions;\r\nconst LineGraph = ({ theData, handleTextBox, yAxisLabel }) => {\r\n  const [data, setData] = useState(theData);\r\n\r\n  const svgRef = useRef(null);\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverColor, setHoverColor] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n\r\n  // let xExtent = d3.extent(data[0].data, (d) => d[data[0].xAxisAttribute]);\r\n  const xExtent = calculateYExtentOfSelectedAttributes(data);\r\n\r\n  useEffect(() => {\r\n    setData(theData);\r\n  }, [theData]);\r\n\r\n  // Switched to log scale, yExtent is hardcoded\r\n  // const yExtent = d3.extent(data[0].data, (d) => d.attributes.CovidCasesConfirmed);\r\n\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([xExtent[0], xExtent[1]])\r\n    .range([margin.left, width - margin.right]);\r\n\r\n  const yScale = d3\r\n    .scaleLog()\r\n    .domain([1, 100000])\r\n    .clamp(true)\r\n    .range([height - margin.top, margin.bottom])\r\n    .nice();\r\n\r\n  const handleHoverDate = (e, info) => {\r\n    // daily data date attr is 'Date'\r\n    // statistics profile data date attr is 'StatisticsProfileDate'\r\n    let dateFieldName = 'StatisticsProfileDate';\r\n    if (!info[dateFieldName]) {\r\n      dateFieldName = 'Date';\r\n    }\r\n    setHoverInfo(new Date(info[dateFieldName]).toString().substring(0, 10));\r\n    setHoverColor('var(--lightBlack)');\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeaveDate = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  const handleHover = (e, info, attr) => {\r\n    setHoverInfo(`${attr.name}: ${info[attr.fieldName]}`);\r\n    setHoverColor(attr.color);\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.svgWrap}>\r\n      {isHovered && hoverPosition.length ? (\r\n        <TinyTooltip\r\n          isHovered={isHovered}\r\n          hoverPosition={hoverPosition}\r\n          hoverColor={hoverColor}\r\n        >\r\n          {hoverInfo}\r\n        </TinyTooltip>\r\n      ) : null}\r\n\r\n      <svg ref={svgRef} viewBox=\"0 0 800 600\" width={width}>\r\n        <Axis\r\n          dimensions={dimensions}\r\n          xScale={xScale}\r\n          yScale={yScale}\r\n          tickNumDays={2}\r\n        />\r\n        {yAxisLabel ? (\r\n          <YAxisLabel text={yAxisLabel} height={height} margin={margin} />\r\n        ) : null}\r\n\r\n        <Lines data={data} xScale={xScale} yScale={yScale} />\r\n\r\n        {data && data.length  ? (\r\n          <HoverRectangles\r\n            graphData={data[0].data}\r\n            dimensions={dimensions}\r\n            xAxisAttribute={data[0].xAxisAttribute}\r\n            xScale={xScale}\r\n            handleHoverLeaveDate={handleHoverLeaveDate}\r\n            handleHoverDate={handleHoverDate}\r\n            handleTextBox={handleTextBox}\r\n          />\r\n        ) : null}\r\n\r\n        <Circles\r\n          data={data}\r\n          yScale={yScale}\r\n          xScale={xScale}\r\n          handleTextBox={handleTextBox}\r\n          handleHover={handleHover}\r\n          handleHoverLeave={handleHoverLeave}\r\n        \r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import React from 'react';\r\nimport classes from './textBox.module.css';\r\nimport LoadingComp from '../../../UI/loading';\r\n\r\nconst getKeysValues = (data) => {\r\n  return data.map((d) => {\r\n    return {\r\n      name: d.name,\r\n      fieldName: d.fieldName,\r\n      value: d.selectedData.map((w) => {\r\n        return w[d.fieldName];\r\n      })[0],\r\n      color: d.color,\r\n      xAxisAttribute: d.xAxisAttribute,\r\n    };\r\n  });\r\n};\r\n\r\nconst TextBox = ({ selectedDateData, selectedDate, loading }) => {\r\n  const moreManagableVersionOfSelectedData = getKeysValues(selectedDateData);\r\n\r\n  const RightSpan = ({ text, color }) => {\r\n    return (\r\n      <span style={{ background: `${color}` }} className={classes.rightSpan}>\r\n        {text}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.genericTextItem}>\r\n      {loading ? (\r\n        <LoadingComp msg=\"Loading...\" />\r\n      ) : (\r\n        <>\r\n        <div className={classes.infoWrap}>\r\n          <h3>\r\n            {selectedDate\r\n              ? new Date(selectedDate).toString().substring(0, 16)\r\n              : ''}\r\n          </h3>\r\n        </div>\r\n         {moreManagableVersionOfSelectedData\r\n          ? moreManagableVersionOfSelectedData.map((d, i) => {\r\n              return (\r\n                <div className={classes.infoWrap} key={i}>\r\n                  <p> {d.name} </p>\r\n                  <RightSpan color={d.color} text={d.value} />\r\n                </div>\r\n              );\r\n            })\r\n          : null}\r\n        </>\r\n      )}\r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import axios from 'axios';\r\n\r\nexport const removeNulls = (resp, fieldName) => {\r\n  const noNulls = resp.filter((m) => {\r\n    for (const i in m.attributes) {\r\n      return m.attributes[fieldName] !== null;\r\n    }\r\n  });\r\n  return noNulls;\r\n};\r\n\r\nexport const removeFromNestedAttributes = (data) => {\r\n  return data.map((d) => {\r\n    let obj = {};\r\n    for (const key in d.attributes) {\r\n      obj[key] = d.attributes[key];\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nexport const successfullyGotDataForEachSelectedAttr = (sectionAvail) => {\r\n  const selected = sectionAvail.map((attr) => (attr.selected ? true : false));\r\n  const fetched = sectionAvail.map((attr) => (attr.data.length ? true : false));\r\n\r\n  const selectedButDataNotFetched = selected.map((s, i) => {\r\n    if (s && !fetched[i]) return false;\r\n    return true;\r\n  });\r\n\r\n  // ie fail if any false\r\n  return selectedButDataNotFetched.filter((w) => !w).length === 0;\r\n};\r\n\r\nexport const baseUrl = (specificUrlPart) =>\r\n  `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/CovidStatisticsProfileHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=${specificUrlPart}&returnGeometry=false&outSR=4326&f=json`;\r\n\r\nexport const getOne = async (part) => {\r\n  try {\r\n    const response = await axios.get(baseUrl(part));\r\n    return response.data.features;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport classes from './section.module.css';\r\n\r\nimport LineGraph from '../LineGraph/lineGraph';\r\nimport TextBox from '../TextBox/textBox';\r\nimport ErrorComp from '../../../UI/error';\r\nimport {\r\n  removeNulls,\r\n  removeFromNestedAttributes,\r\n  successfullyGotDataForEachSelectedAttr,\r\n  getOne\r\n} from './section-util';\r\n\r\n\r\nconst Section = ({ section }) => {\r\n  const [sectionAvail, setSectionAvail] = useState(section.avail);\r\n  const [shouldUpdate, setShouldUpdate] = useState(true);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [isError, setIsError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const shouldCancel = useRef(false);\r\n\r\n  const getDataForEachSelected = useCallback(async (attr) => {\r\n    if (attr.selected && !attr.data.length) {\r\n      const features = await getOne(attr.urlPart);\r\n      if (features) {\r\n        // data is from the beginning of records but first few weeks are all null for Profile Stats\r\n        const filtered = removeNulls(features, attr.fieldName);\r\n        const flattened = removeFromNestedAttributes(filtered);\r\n        attr.data = flattened;\r\n        return attr;\r\n      }\r\n    }\r\n    return attr; // always return a but check error below\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const getDataForEachSelectedCheckbox = async () => {\r\n        let sectionAvailCopy = sectionAvail;\r\n\r\n        sectionAvailCopy = await Promise.all(\r\n          sectionAvailCopy.map(getDataForEachSelected)\r\n        );\r\n\r\n        if (shouldCancel.current) return false;\r\n\r\n        return successfullyGotDataForEachSelectedAttr(sectionAvailCopy)\r\n          ? sectionAvailCopy\r\n          : false;\r\n      };\r\n\r\n      if (shouldUpdate) {\r\n        setIsLoading(true);\r\n        const ans = await getDataForEachSelectedCheckbox();\r\n\r\n        if (!ans) setIsError(true);\r\n\r\n        if (ans) {\r\n          setSectionAvail(ans);\r\n          const selectedSection = ans.find((s) => s.selected);\r\n\r\n          // default date to latest - first time only!\r\n          if(!selectedDate) {\r\n            setSelectedDate(\r\n              selectedSection.data[selectedSection.data.length - 1][\r\n                selectedSection.xAxisAttribute\r\n              ]\r\n            );\r\n          }\r\n          setShouldUpdate(false);\r\n        }\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [shouldUpdate, sectionAvail, getDataForEachSelected, isError, selectedDate]);\r\n\r\n  const handleTextBox = (data, dateFieldName) => {\r\n\r\n    if (!data || !dateFieldName) return;\r\n    setSelectedDate(data[dateFieldName]);\r\n  };\r\n\r\n  const renderLineGraph = () => {\r\n    if (!sectionAvail || !sectionAvail.length) {\r\n      return;\r\n    }\r\n    return (\r\n      <LineGraph\r\n        theData={sectionAvail}\r\n        yAxisLabel={section.yAxisLabel}\r\n        handleTextBox={handleTextBox}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleSelectData = (e) => {\r\n    if (isLoading) return;\r\n    const name = e.target.name;\r\n    const sectionUpdate = sectionAvail.map((a) => {\r\n      if (a.fieldName === name) {\r\n        a.selected = !a.selected;\r\n      }\r\n      return a;\r\n    });\r\n    setSectionAvail(sectionUpdate);\r\n\r\n    // Check if already have the data first\r\n    const haveData = (name) => {\r\n      const checkThis = sectionAvail.filter((s) => s.fieldName === name)[0];\r\n      return checkThis && checkThis.data.length ? false : true;\r\n    };\r\n    const needToGetData = haveData(name);\r\n\r\n    if (needToGetData && !isLoading) {\r\n      setShouldUpdate(true);\r\n    }\r\n  };\r\n\r\n  const renderCheckButtons = () => {\r\n    return section.avail.map((a) => (\r\n      <button\r\n        key={a.fieldName}\r\n        id={a.name}\r\n        name={a.fieldName}\r\n        selected={a.selected}\r\n        style={{\r\n          opacity: `${a.selected ? '0.5' : `1`}`,\r\n          background: `${a.selected ? 'gray' : `${a.color}`}`,\r\n          border: `${a.selected ? `0.1rem solid ${a.color}` : `0.1rem solid `}`,\r\n          outline: 'none',\r\n        }}\r\n        onClick={(e) => handleSelectData(e)}\r\n      >\r\n        {a.name}\r\n      </button>\r\n    ));\r\n  };\r\n\r\n  const getDataOnSelectedDate = () => {\r\n    const selected = sectionAvail.filter((d) => d.selected);\r\n\r\n    const onlyOnDate = selected.map((s) => {\r\n      const newData = s.data.filter((d) => {\r\n        return d[s.xAxisAttribute] === selectedDate;\r\n      });\r\n      s.selectedData = newData;\r\n      return s;\r\n    }, []);\r\n\r\n    return onlyOnDate;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isError ? (\r\n        <ErrorComp msg=\"Could not load data.\" />\r\n      ) : (\r\n        <div className={classes.profileStatsGraphWrap}>\r\n          <div className={classes.profileStatsGraphLeft}>\r\n            <div className={classes.sectionHeader}>\r\n              <h3>{section.sectionName}</h3>\r\n              {/* <p>{section.description}</p> */}\r\n            </div>\r\n\r\n            {selectedDate && sectionAvail ? (\r\n              <TextBox\r\n                loading={isLoading}\r\n                selectedDate={selectedDate}\r\n                selectedDateData={getDataOnSelectedDate()}\r\n              />\r\n            ) : null}\r\n\r\n            <div className={classes.graphSectionBtnGroupWrap}>\r\n              {renderCheckButtons()}\r\n            </div>\r\n          </div>\r\n          <div className={classes.profileStatsGraphMain}>\r\n            {renderLineGraph()}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport SectionWrapSimple from '../../../UI/Sections/SectionWrapSimple/sectionWrapSimple';\r\nimport classes from './intro.module.css';\r\n\r\nconst Intro = ({ allAvailableGraphs, handleSelectGraph, h1, desc, p }) => (\r\n  <SectionWrapSimple offsetBottom=\"-3rem\">\r\n    <h1 style={{ color: 'var(--white)', margin: 0 }}>{h1}</h1>\r\n    <p className={classes.desc}></p>\r\n    <p className={classes.p}>{p}</p>\r\n    <div className={classes.btnGroupWrap}>\r\n      {allAvailableGraphs.map((graph, i) => (\r\n        <button\r\n          className={classes.tabBtn}\r\n          key={i}\r\n          style={{\r\n            background: `${graph.selected ? 'var(--orange)' : 'var(--black)'}`,\r\n          }}\r\n          onClick={() => handleSelectGraph(graph.name)}\r\n        >\r\n          {graph.sectionName}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  </SectionWrapSimple>\r\n);\r\n\r\nexport default Intro;\r\n","export  const sections = [\r\n  {\r\n    name: 'transmissionType',\r\n    sectionName: 'Transmission Type',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center. New data is released each evening and dates back to 12am two days previously.',\r\n    allUrl: `StatisticsProfileDate,CommunityTransmission,UnderInvestigation,CloseContact,CovidCasesConfirmed,TravelAbroad`,\r\n    xAxisAttribute: 'StatisticsProfileDate',\r\n    yAxisLabel: '#Cases',\r\n    avail: [\r\n      {\r\n        name: 'Community Transmission',\r\n        urlPart: `StatisticsProfileDate,CommunityTransmission`,\r\n        fieldName: 'CommunityTransmission',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Under Investigation',\r\n        urlPart: `StatisticsProfileDate,UnderInvestigation`,\r\n        fieldName: 'UnderInvestigation',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Close Contact',\r\n        urlPart: `StatisticsProfileDate,CloseContact`,\r\n        fieldName: 'CloseContact',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Travel Abroad',\r\n        urlPart: `StatisticsProfileDate,TravelAbroad`,\r\n        fieldName: 'TravelAbroad',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--black)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'hospitalisations',\r\n    sectionName: 'Hospitalisations',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases Hospitalised',\r\n    avail: [\r\n      {\r\n        name: 'Hospitalised',\r\n        urlPart: `StatisticsProfileDate,HospitalisedCovidCases`,\r\n        fieldName: 'HospitalisedCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Requiring ICU',\r\n        urlPart: `StatisticsProfileDate,RequiringICUCovidCases`,\r\n        fieldName: 'RequiringICUCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--black)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'genderProfiles',\r\n    sectionName: 'Gender Profiles',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases',\r\n    avail: [\r\n      {\r\n        name: 'Female',\r\n        urlPart: `StatisticsProfileDate,Female`,\r\n        fieldName: 'Female',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Male',\r\n        urlPart: `StatisticsProfileDate,Male`,\r\n        fieldName: 'Male',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Unknown',\r\n        urlPart: `StatisticsProfileDate,Unknown`,\r\n        fieldName: 'Unknown',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--black)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'ageProfiles',\r\n    sectionName: 'Age Profiles - Cases',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases in Age Group',\r\n    avail: [\r\n      {\r\n        name: 'Aged 65 and up',\r\n        urlPart: `StatisticsProfileDate,Aged65up,CovidCasesConfirmed`,\r\n        fieldName: 'Aged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'pink',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 55 to 64',\r\n        urlPart: `StatisticsProfileDate,Aged55to64,CovidCasesConfirmed`,\r\n        fieldName: 'Aged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 45 to 54',\r\n        urlPart: `StatisticsProfileDate,Aged45to54,CovidCasesConfirmed`,\r\n        fieldName: 'Aged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'blue',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 35 to 44',\r\n        urlPart: `StatisticsProfileDate,Aged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'Aged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'violet',\r\n        selected: false,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 25 to 34',\r\n        urlPart: `StatisticsProfileDate,Aged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'Aged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'darkgreen',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 15 to 24',\r\n        urlPart: `StatisticsProfileDate,Aged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'Aged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 5 to 14',\r\n        urlPart: `StatisticsProfileDate,Aged5to14,CovidCasesConfirmed`,\r\n        fieldName: 'Aged5to14',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 1 to 4',\r\n        urlPart: `StatisticsProfileDate,Aged1to4,CovidCasesConfirmed`,\r\n        fieldName: 'Aged1to4',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 1',\r\n        urlPart: `StatisticsProfileDate,Aged1,CovidCasesConfirmed`,\r\n        fieldName: 'Aged1',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--black)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    name: 'hospitalisedAgeProfiles',\r\n    sectionName: 'Age Profiles - Hospitalised',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Hospitalised in Age Group',\r\n    avail: [\r\n      {\r\n        name: 'Hospitalised Aged 65 and up',\r\n        urlPart: `StatisticsProfileDate,Aged65up,CovidCasesConfirmed,HospitalisedAged65up`,\r\n        fieldName: 'HospitalisedAged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'pink',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 55 to 64',\r\n        urlPart: `StatisticsProfileDate,Aged55to64,HospitalisedAged55to64, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 45 to 54',\r\n        urlPart: `StatisticsProfileDate,Aged45to54,HospitalisedAged45to54, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'blue',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 35 to 44',\r\n        urlPart: `StatisticsProfileDate,Aged35to44,HospitalisedAged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'violet',\r\n        selected: false,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 25 to 34',\r\n        urlPart: `StatisticsProfileDate,Aged25to34,HospitalisedAged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'darkgreen',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 15 to 24',\r\n        urlPart: `StatisticsProfileDate,Aged15to24,HospitalisedAged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 5 to 14',\r\n        urlPart: `StatisticsProfileDate,Aged5to14,HospitalisedAged5to14,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5to14',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 5',\r\n        urlPart: `StatisticsProfileDate,Aged1to4,HospitalisedAged5,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Total Hospitalised',\r\n        urlPart: `StatisticsProfileDate,HospitalisedCovidCases,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Total Requiring ICU',\r\n        urlPart: `StatisticsProfileDate,RequiringICUCovidCases,CovidCasesConfirmed`,\r\n        fieldName: 'RequiringICUCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--black)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'hospitalisedAndCasesAgeProfiles',\r\n    sectionName: 'Age Profiles - Hospitalised & Cases',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases vs #Hospitalised in Age Group',\r\n    avail: [\r\n      {\r\n        name: 'Aged 65 and up (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed,HospitalisedAged65up`,\r\n        fieldName: 'HospitalisedAged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'rgb(204, 208, 56)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 65 and up (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged65up,CovidCasesConfirmed`,\r\n        fieldName: 'Aged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'rgb(204, 208, 56)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 55 to 64 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged55to64, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 55 to 64 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged55to64,CovidCasesConfirmed`,\r\n        fieldName: 'Aged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 45 to 54 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged45to54, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 45 to 54 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged45to54,CovidCasesConfirmed`,\r\n        fieldName: 'Aged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 35 to 44 (Hospitalised) ',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'rgb(240, 68, 148)',\r\n        selected: false,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 35 to 44 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'Aged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'rgb(240, 68, 148)',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 25 to 34 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'rgb(255, 131, 61)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 25 to 34 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'Aged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'rgb(255, 131, 61)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 15 to 24 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 15 to 24 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'Aged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 5 to 14 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged5to14,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5to14',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 5 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged5,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 1 to 4 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged1to4,CovidCasesConfirmed`,\r\n        fieldName: 'Aged1to4',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--black)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'clusters',\r\n    sectionName: 'Clusters Notified',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '# Clusters Notified',\r\n    avail: [\r\n      {\r\n        name: 'Clusters',\r\n        urlPart: `StatisticsProfileDate,ClustersNotified,CovidCasesConfirmed`,\r\n        fieldName: 'ClustersNotified',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        yAxisLabel: '# Clusters Notified',\r\n        selected: true,\r\n        color: 'pink',\r\n        data: [],\r\n      },\r\n      // {\r\n      //   name: 'Analysis based on #cases',\r\n      //   urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n      //   fieldName: 'CovidCasesConfirmed',\r\n      //   xAxisAttribute: 'StatisticsProfileDate',\r\n      //   selected: false,\r\n      //   color: 'var(--black)',\r\n      //   data: [],\r\n      // },\r\n    ],\r\n  },\r\n  {\r\n    name: 'medianAge',\r\n    sectionName: 'Median Age',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '# Median age of Cases',\r\n    avail: [\r\n      {\r\n        name: 'Median Age',\r\n        urlPart: `StatisticsProfileDate,Median_Age,CovidCasesConfirmed`,\r\n        fieldName: 'Median_Age',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n\r\n        selected: true,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      // {\r\n      //   name: 'Analysis based on #cases',\r\n      //   urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n      //   fieldName: 'CovidCasesConfirmed',\r\n      //   xAxisAttribute: 'StatisticsProfileDate',\r\n      //   selected: false,\r\n      //   color: 'var(--black)',\r\n      //   data: [],\r\n      // },\r\n    ],\r\n  },\r\n];","import React, { useState } from 'react';\r\nimport Layout from '../layout';\r\nimport Section from './Sections/section';\r\nimport Intro from './Intro/intro.js';\r\nimport { sections } from './sections-data';\r\n\r\nconst ProfileStats = () => {\r\n  const initAvailableGraphs = () => {\r\n    return sections.map((s, i) => {\r\n      return {\r\n        name: s.name,\r\n        sectionName: s.sectionName,\r\n        description: s.description,\r\n        selected: i === 0 ? true : false,\r\n      };\r\n    });\r\n  };\r\n\r\n  const [allAvailableGraphs, setAllAvailableGraphs] = useState(\r\n    initAvailableGraphs()\r\n  );\r\n\r\n  const handleSelectGraph = (name) => {\r\n    const newAvailGraphs = allAvailableGraphs.map((graph) => {\r\n      return {\r\n        ...graph,\r\n        selected: graph.name === name ? true : false,\r\n      };\r\n    });\r\n    setAllAvailableGraphs(newAvailGraphs);\r\n  };\r\n\r\n  const selectedGraphName = () =>\r\n    allAvailableGraphs.filter((graph) => graph.selected)[0].name;\r\n\r\n  return (\r\n    <Layout>\r\n      allAvailableGraphs.length ? (\r\n      <Intro\r\n        handleSelectGraph={handleSelectGraph}\r\n        allAvailableGraphs={allAvailableGraphs}\r\n        h1=\"Graphs\"\r\n        desc=\"Select graph below.\"\r\n        p=\"This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center. New data is released each evening and dates back to 12am two days previously.\"\r\n      />\r\n      {sections.map((section, i) => {\r\n        return section.name === selectedGraphName() ? (\r\n          <Section key={section.avail[0].name} section={section} />\r\n        ) : null;\r\n      })}\r\n      ) : null\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ProfileStats;\r\n","// import { initStore } from './store';\r\nimport { initStore } from '../../Store/store';\r\nimport * as d3 from 'd3';\r\n\r\nconst colorScale = d3\r\n  .scaleSequential()\r\n  .domain([0, 100])\r\n  .interpolator(d3.interpolateRainbow);\r\n\r\nconst sortIntoArraysByCounty = (data, field = 'CountyName') => {\r\n  // data in = [{galway},{galway},{longford}]\r\n  // want data out = [[{galway},{galway}],[{longford}]]\r\n  const usedCountyNames = [];\r\n  const newData = [];\r\n  data.forEach((d) => {\r\n    // new county\r\n    if (!usedCountyNames.includes(d[field])) {\r\n      usedCountyNames.push(d[field]);\r\n      newData.push([d]);\r\n    } else {\r\n      // find county in array of arrays and push new one in\r\n      const correctArray = newData.filter((n) => n[0][field] === d[field])[0];\r\n      correctArray.push(d);\r\n    }\r\n  });\r\n  return newData;\r\n};\r\n\r\n// Shared with dailyAlt-store\r\nconst removeFromNestedAttributes = (data) => {\r\n  return data.map((d) => {\r\n    let obj = {};\r\n    for (const key in d.attributes) {\r\n      obj[key] = d.attributes[key];\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nconst getLatestDate = (county) => {\r\n  const dates = county.stats.map((s) => s.TimeStampDate);\r\n  const newestDate = Math.max(...dates.map((d) => d));\r\n  return newestDate;\r\n};\r\n\r\nconst getLatestForCounty = (county) => {\r\n  const dates = county.stats.map((s) => s.TimeStampDate);\r\n  const newestDate = Math.max(...dates.map((d) => d));\r\n  const newestData = county.stats.filter((s) => s.TimeStampDate === newestDate);\r\n  return newestData[0];\r\n};\r\n\r\nconst turnArraysIntoNiceObjects = (data) => {\r\n  return data.map((n, i) =>\r\n    createManagableObjectAndSetFirstCountyToSelected(n, i)\r\n  );\r\n};\r\n\r\nconst doTediousStuff = (features) => {\r\n  return [\r\n    removeFromNestedAttributes,\r\n    sortIntoArraysByCounty,\r\n    turnArraysIntoNiceObjects,\r\n  ].reduce((features, fn) => {\r\n    return fn(features);\r\n  }, features);\r\n};\r\n\r\nconst createManagableObjectAndSetFirstCountyToSelected = (n, i) => {\r\n  const obj = {};\r\n  obj.name = n[0].CountyName;\r\n  obj.selected = false;\r\n  obj.stats = [...n];\r\n  obj['color'] = colorScale(n[0].PopulationCensus16);\r\n  if (i === 0) {\r\n    obj['selected'] = true;\r\n  }\r\n  return obj;\r\n};\r\nconst configureStore = () => {\r\n  const actions = {\r\n    SET_ALL_DATA: (curState, response) => {\r\n      const copy = curState.sections;\r\n      const allCounties = doTediousStuff(response);\r\n      copy[0].allCounties = allCounties;\r\n\r\n      // default selectedCounty & selectedCountyLatestData\r\n      copy[0].newSelectedCounty = allCounties[0];\r\n\r\n      const latestDate = getLatestDate(allCounties[0]);\r\n      copy[0].selectedCountyLatestData = getLatestForCounty(allCounties[0]);\r\n      copy[0].selectedDate = latestDate;\r\n\r\n      return { sections: copy };\r\n    },\r\n    SET_ALL_COUNTIES_LATEST_DATA: (curState, response) => {\r\n      const withoutNestedAttributes = removeFromNestedAttributes(response);\r\n      const copy = curState.sections;\r\n      copy[0].allCountiesLatestData = withoutNestedAttributes;\r\n    },\r\n    UPDATE_ALL_COUNTIES_LATEST_DATA: (curState, date) => {\r\n      const copy = curState.sections;\r\n\r\n      const newAllCountiesLatestData = copy[0].allCounties.map(\r\n        (county) =>\r\n          county.stats.filter((stat) => stat.TimeStampDate === date)[0]\r\n      );\r\n      copy[0].allCountiesLatestData = newAllCountiesLatestData;\r\n\r\n      return { sections: copy };\r\n    },\r\n    SELECT_ATTRIBUTE: (curState, fieldName) => {\r\n      const sectionUpdate = curState.sections[0].avail.map((a) => {\r\n        if (a.fieldName === fieldName) {\r\n          a.selected = true;\r\n        } else {\r\n          a.selected = false;\r\n        }\r\n        return a;\r\n      });\r\n      const update = curState.sections;\r\n      update[0].avail = sectionUpdate;\r\n\r\n      // also set just the name\r\n      update[0].selectedAttributeName = fieldName;\r\n\r\n      return { sections: update };\r\n    },\r\n    SELECT_COUNTY: (curState, county) => {\r\n      const copy = curState.sections;\r\n\r\n      const selectedCounty = copy[0].allCounties.filter(\r\n        (a) => a.name === county\r\n      )[0];\r\n      const latestData = getLatestForCounty(selectedCounty);\r\n\r\n      copy[0].newSelectedCounty = selectedCounty;\r\n\r\n      // also set selectedCountyLatestData\r\n      copy[0].selectedCountyLatestData = latestData;\r\n\r\n      // and set selected bool in allCounties\r\n      copy[0].allCounties = copy[0].allCounties.map((all) => {\r\n        if (all.name === county) {\r\n          all.selected = true;\r\n        } else {\r\n          all.selected = false;\r\n        }\r\n        return all;\r\n      });\r\n\r\n      return { sections: copy };\r\n    },\r\n    SELECT_DATE: (curState, date) => {\r\n      // want to set selectedCountyLatest data to whatever is in newSelectedCounty ie find correct one by date in newSelectedCounty.state\r\n      const copy = curState.sections;\r\n      const ans = copy[0].newSelectedCounty.stats.filter(\r\n        (county) => county.TimeStampDate === date\r\n      )[0];\r\n\r\n      copy[0].selectedCountyLatestData = ans;\r\n      copy[0].selectedDate = date;\r\n\r\n      // also set allCountiesLatestData\r\n      return { sections: copy };\r\n    },\r\n  };\r\n  initStore(actions, {\r\n    sections: [\r\n      {\r\n        name: 'Counties Time',\r\n        sectionName: 'Counties',\r\n        allCounties: [],\r\n        allCountiesLatestData: [],\r\n        newSelectedCounty: {},\r\n        xAxisAttribute: 'TimeStampDate',\r\n        selectedDate: '',\r\n        selectedCountyLatestData: {}, // Rename, may as well use this for selected date data as well\r\n        selectedAttributeName: 'ConfirmedCovidCases',\r\n        dateFieldName: 'TimeStampDate',\r\n        avail: [\r\n          {\r\n            name: 'Total Number of Cases',\r\n            fieldName: 'ConfirmedCovidCases',\r\n            yAxisAttribute: 'CountyName',\r\n            xAxisDescription: 'Number of Confirmed Cases',\r\n            selected: true,\r\n            color: 'var(--purple)',\r\n            data: [],\r\n          },\r\n          {\r\n            name: 'Cases per 100,000',\r\n            fieldName: 'PopulationProportionCovidCases',\r\n            yAxisAttribute: 'CountyName',\r\n            xAxisDescription: 'Cases per 100,000 of Population',\r\n            selected: false,\r\n            color: 'var(--green)',\r\n            data: [],\r\n          },\r\n          {\r\n            name: 'Population 2016',\r\n            fieldName: 'PopulationCensus16',\r\n            yAxisAttribute: 'Population 2016',\r\n            xAxisDescription: 'Population 2016',\r\n            selected: false,\r\n            color: 'var(--orange)',\r\n            data: [],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react'\r\n\r\nconst XAxisLabel = ({text, yClass, height, width, margin}) => {\r\n  return (\r\n    <text\r\n    fill=\"var(--white)\" // for dark graph theme\r\n    x={margin.right}\r\n    y={height-10}\r\n    style={{fontSize:'1rem' }}\r\n    className={yClass}\r\n  >\r\n    {text}\r\n  </text>\r\n  )\r\n}\r\n\r\nexport default XAxisLabel;","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './barChart.module.css';\r\nimport { useStore } from '../../../Store/store';\r\nimport XAxisLabel from '../../../UI/Graphs/xAxisLabel';\r\nimport BoringButton from '../../../UI/Buttons/boringButton';\r\nimport LoadingComp from '../../../UI/loading';\r\nconst dimensions = {\r\n  margin: {\r\n    left: 70,\r\n    right: 60,\r\n    top: 60,\r\n    bottom: 60,\r\n  },\r\n  width: 1000,\r\n  height: 800,\r\n};\r\nconst { margin, width, height } = dimensions;\r\n\r\nconst BarChart = ({ handleSelectOneCounty, isLoading }) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n\r\n  const attribute = storeSections.selectedAttributeName;\r\n  const selectedData = storeSections.avail.filter((data) => data.selected)[0];\r\n\r\n  const [selectLogScale, setSelectLogScale] = useState(true);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n\r\n  // Refs\r\n  const svgRef = useRef(null);\r\n  const xAxisRef = useRef(null);\r\n  const yAxisRef = useRef(null);\r\n\r\n  const xExtent = d3.extent(\r\n    storeSections.allCountiesLatestData,\r\n    (county) => county[attribute]\r\n  );\r\n  const countyNamesForAxisLabel = storeSections.allCountiesLatestData.map(\r\n    (c) => c.CountyName\r\n  );\r\n  const xAxis = d3.axisBottom();\r\n  const yAxis = d3.axisLeft();\r\n\r\n  const yScale = d3\r\n    .scaleBand()\r\n    .domain(countyNamesForAxisLabel)\r\n    .range([height - margin.top, margin.bottom]);\r\n\r\n  const getXScale = () => {\r\n    if (selectLogScale) {\r\n      return d3\r\n        .scaleLog()\r\n        .domain([1, Math.max(10000, xExtent[1])])\r\n        .clamp(true)\r\n        .range([margin.left, width - margin.right])\r\n        .nice();\r\n    } else {\r\n      return d3\r\n        .scaleLinear()\r\n        .domain(xExtent)\r\n        .clamp(true)\r\n        .range([margin.left, width - margin.right]);\r\n    }\r\n  };\r\n  const xScale = getXScale();\r\n\r\n  const toggleLogScale = () => {\r\n    const currentLog = selectLogScale;\r\n    setSelectLogScale(!currentLog);\r\n  };\r\n\r\n  const doAxis = useCallback(() => {\r\n    const xRef = d3.select(xAxisRef.current);\r\n    const yRef = d3.select(yAxisRef.current);\r\n\r\n    const xTickWidth = -Math.abs(height - margin.top - margin.bottom);\r\n    xAxis.scale(xScale).ticks(10, ',.1s');\r\n    yAxis.scale(yScale);\r\n    xRef.call(xAxis.tickSize(xTickWidth));\r\n    yRef.call(yAxis);\r\n  }, [yScale, xScale, xAxis, yAxis]);\r\n\r\n  useEffect(() => {\r\n    doAxis();\r\n  }, [doAxis]);\r\n\r\n  const handleHover = (e, info) => {\r\n    setHoverInfo(info);\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n  const handleHoverLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n  const localHandleSelectCounty = (county) => {\r\n    handleSelectOneCounty(county);\r\n  };\r\n\r\n  const renderRectangles = () => {\r\n    return storeSections.allCountiesLatestData.map((c) => {\r\n      const numCounties = 26;\r\n      const barHeight = (height - margin.top - margin.bottom) / numCounties;\r\n      const y = yScale(c.CountyName);\r\n      const length = xScale(c[attribute]) - margin.left;\r\n\r\n      return (\r\n        <g key={c.CountyName}>\r\n          <rect\r\n            onClick={() => localHandleSelectCounty(c.CountyName)}\r\n            className={classes.barChartRect}\r\n            onMouseEnter={(e) => handleHover(e, c[attribute])}\r\n            onMouseLeave={(e) => handleHoverLeave(e)}\r\n            width={length}\r\n            height={barHeight}\r\n            strokeWidth=\"1\"\r\n            stroke={\r\n              c.CountyName === storeSections.newSelectedCounty.name\r\n                ? selectedData.color\r\n                : 'var(--white)'\r\n            }\r\n            fill={\r\n              c.CountyName === storeSections.newSelectedCounty.name\r\n                ? 'var(--white)'\r\n                : selectedData.color\r\n            }\r\n            opacity={`${\r\n              c.CountyName === storeSections.newSelectedCounty.name ? 1 : 0.75\r\n            }`}\r\n            x={margin.left}\r\n            y={y}\r\n          ></rect>\r\n        </g>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <div className={(classes.svgWrap, classes.barChartSvgWrap)}>\r\n      {isHovered && hoverPosition.length ? (\r\n        <div\r\n          style={{\r\n            opacity: `${isHovered ? '1' : '0'}`,\r\n            position: 'fixed',\r\n            left: `${hoverPosition[0]}px`,\r\n            top: `${hoverPosition[1]}px`,\r\n            background: 'var(--black)',\r\n            color: 'var(--white)',\r\n            padding: '0.5rem 1rem',\r\n            borderRadius: '0.4rem',\r\n            fontSize: '0.6rem',\r\n          }}\r\n        >\r\n          {selectedData.name}: {hoverInfo}\r\n        </div>\r\n      ) : null}\r\n\r\n      <BoringButton onClick={toggleLogScale} config={{ minWidth: '8rem' }}>\r\n        {' '}\r\n        {selectLogScale ? 'Use Linear Scale' : 'Use Log Scale'}\r\n      </BoringButton>\r\n      {isLoading ? (\r\n        <LoadingComp />\r\n      ) : (\r\n        <svg viewBox={`0 0 ${width} ${height}`} ref={svgRef} width={width}>\r\n          <g\r\n            ref={xAxisRef}\r\n            transform={`translate(0,${\r\n              dimensions.height - dimensions.margin.top\r\n            })`}\r\n          ></g>\r\n          <g\r\n            ref={yAxisRef}\r\n            transform={`translate(${dimensions.margin.left}, 0)`}\r\n          ></g>\r\n\r\n          {storeSections.allCountiesLatestData &&\r\n          selectedData &&\r\n          storeSections.allCountiesLatestData.length ? (\r\n            <>\r\n              <g>{renderRectangles()}</g>\r\n            </>\r\n          ) : null}\r\n          <XAxisLabel\r\n            width={width}\r\n            text={selectedData ? selectedData.xAxisDescription : ''}\r\n            height={height}\r\n            margin={margin}\r\n          />\r\n        </svg>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React from 'react';\r\nimport classes from './textBox.module.css';\r\nimport { useStore } from '../../../Store/store';\r\n\r\n\r\nconst TextBox = () => {\r\n  const storeSections = useStore()[0].sections[0];\r\n  const selectedCountyLatestData = storeSections.selectedCountyLatestData;\r\n\r\n  const whateverTheyCalledDateThisTime = storeSections.dateFieldName;\r\n\r\n  const RightSpan = ({ text }) => {\r\n    let color = 'var(--blue)';\r\n    return (\r\n      <span style={{ background: `${color}` }} className={classes.rightSpan}>\r\n        {text || ''}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return selectedCountyLatestData ? (\r\n    <div className={classes.textItem}>\r\n \r\n      <div className={classes.infoWrap}>\r\n     \r\n        <h3>\r\n          {selectedCountyLatestData.CountyName} <br />\r\n          <span className={classes.small}>\r\n            {new Date(selectedCountyLatestData[whateverTheyCalledDateThisTime])\r\n              .toString()\r\n              .substring(0, 16)}\r\n          </span>\r\n        </h3>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Confirmed Cases: </p>\r\n        <RightSpan\r\n          text={selectedCountyLatestData.ConfirmedCovidCases}\r\n          fieldName=\"ConfirmedCovidCases\"\r\n        ></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Population 2016: </p>\r\n        <RightSpan\r\n          text={selectedCountyLatestData.PopulationCensus16}\r\n          fieldName=\"PopulationCensus16\"\r\n        ></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Cases per 100,000: </p>\r\n        <RightSpan\r\n          text={\r\n            selectedCountyLatestData.PopulationProportionCovidCases\r\n              ? selectedCountyLatestData.PopulationProportionCovidCases.toFixed(\r\n                  2\r\n                )\r\n              : ''\r\n          }\r\n          fieldName=\"PopulationProportionCovidCases\"\r\n        ></RightSpan>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          {' '}\r\n          <br />\r\n          <span className={classes.small}></span>\r\n        </h3>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Confirmed Cases: </p>\r\n        <RightSpan text={''}></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Population 2016: </p>\r\n        <RightSpan text={''}></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Cases per 100,000: </p>\r\n        <RightSpan text={''}></RightSpan>\r\n      </div>\r\n      >\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport classes from './attributeBtns.module.css'\r\n\r\nconst AttributeBtns = ({availableAttributes, handleSelectData}) => {\r\n  return<div className={classes.btnGroupWrap}>\r\n  { availableAttributes.map((a) => (\r\n    <button\r\n      key={a.fieldName}\r\n      id={a.name}\r\n      name={a.fieldName}\r\n      selected={a.selected}\r\n      style={{\r\n        opacity: `${!a.selected ? '0.8' : `1`}`,\r\n        background: `${a.selected ? `${a.color}` : `var(--lightBlack)`}`,\r\n        border: `${\r\n          !a.selected ? `0.1rem solid ${a.color}` : `0.1rem solid `\r\n        }`,\r\n        outline: 'none',\r\n      }}\r\n      onClick={(e) => handleSelectData(e)}\r\n    >\r\n      {a.name}\r\n    </button>\r\n  ))\r\n    };\r\n  </div>\r\n}\r\n\r\nexport default AttributeBtns;","import React from 'react';\r\nimport classes from './clickArrows.module.css';\r\n\r\nconst ClickArrows = ({ handleSelectDate, selectedDate, tempJustDates }) => {\r\n  const localHandleSelectDate = (isNext) => {\r\n    const indexer = (i) => (isNext ? i + 1 : i - 1);\r\n    const selectedIndex = tempJustDates.indexOf(selectedDate);\r\n    const ans = tempJustDates[indexer(selectedIndex)];\r\n    const nextPrevDate = ans ? ans : selectedDate;\r\n\r\n    if (nextPrevDate === selectedDate) return;\r\n\r\n    handleSelectDate(nextPrevDate);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.clickArrowsWrap}>\r\n      <h6>{new Date(selectedDate).toString().substring(0, 16)}</h6>\r\n      <div className={classes.clickArrows}>\r\n        <button onClick={() => localHandleSelectDate(false)}>\r\n          {' '}\r\n          &#11207; prev\r\n        </button>\r\n        <button onClick={() => localHandleSelectDate(true)}>\r\n          next &#11208;\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClickArrows;\r\n","import React from 'react';\r\nimport BarChart from '../BarChart/barChart';\r\nimport { useStore } from '../../../Store/store';\r\nimport TextBox from '../TextBox/textBox';\r\nimport AttributeBtns from '../SectionsUI/AttributeBtns/attributeBtns';\r\n\r\nimport SectionWrap from '../../../UI/Sections/SectionWrap/sectionWrap';\r\nimport SectionWrapSimple from '../../../UI/Sections/SectionWrapSimple/sectionWrapSimple';\r\nimport SectionSide from '../../../UI/Sections/SectionSide/sectionSide';\r\nimport SectionMain from '../../../UI/Sections/SectionMain/sectionMain';\r\nimport SectionHeader from '../../../UI/Sections/SectionHeader/sectionHeader';\r\nimport ClickArrows from '../ClickArrows/clickArrows';\r\nimport LoadingComp from '../../../UI/loading';\r\nconst BarChartSection = ({\r\n  handleSelectOneCounty,\r\n  handleSelectData,\r\n  handleSelectDate,\r\n  isLoading,\r\n}) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n\r\n  return (\r\n      isLoading ? (\r\n        <SectionWrapSimple minHeight=\"50vh\">\r\n        <LoadingComp />\r\n        </SectionWrapSimple>\r\n      ) : (\r\n          \r\n        <SectionWrap>\r\n          <SectionSide>\r\n            <SectionHeader\r\n              title={`${\r\n                storeSections.avail.filter((a) => a.selected)[0].name\r\n              } by County`}\r\n              subtitle=\"\"\r\n            >\r\n              {storeSections.selectedDate &&\r\n              storeSections.allCounties.length ? (\r\n                <ClickArrows\r\n                  handleSelectDate={handleSelectDate}\r\n                  selectedDate={storeSections.selectedDate}\r\n                  tempJustDates={storeSections.allCounties[0].stats.map(\r\n                    (s) => s.TimeStampDate\r\n                  )}\r\n                />\r\n              ) : null}\r\n            </SectionHeader>\r\n            <TextBox clickArrows={ClickArrows} />\r\n            <AttributeBtns\r\n              availableAttributes={storeSections.avail}\r\n              handleSelectData={handleSelectData}\r\n            />\r\n          </SectionSide>\r\n\r\n          <SectionMain background=\"var(--lightBlack)\">\r\n            <BarChart\r\n              handleSelectOneCounty={handleSelectOneCounty}\r\n              handleSelectDate={handleSelectDate}\r\n              isLoading={isLoading}\r\n            />\r\n          </SectionMain>\r\n      \r\n        </SectionWrap>\r\n      )\r\n        \r\n        \r\n     \r\n\r\n   \r\n    \r\n  );\r\n};\r\n\r\nexport default BarChartSection;\r\n","import React, { useState, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Line = ({\r\n  graphData,\r\n  handleHover,\r\n  handleHoverLeave,\r\n  handleSelectCounty,\r\n  xScale,\r\n  yScale,\r\n  selectedAttribute,\r\n}) => {\r\n  const [selectedAttr, setSelectedAttr] = useState(selectedAttribute);\r\n\r\n  useEffect(() => {\r\n    setSelectedAttr(selectedAttribute);\r\n  }, [selectedAttribute, graphData]);\r\n\r\n  \r\n  const line = d3\r\n    .line()\r\n    .x((d) => xScale(d['TimeStampDate']))\r\n    .y((d) => {\r\n      return yScale(d[selectedAttr]);\r\n    });\r\n\r\n  const path = line(graphData.stats);\r\n  \r\n  return  (\r\n    <path\r\n      d={path}\r\n      fill=\"none\"\r\n      stroke={graphData.color}\r\n      opacity={graphData.selected ? '1' : '0.2'}\r\n      strokeWidth={graphData.selected ? '4px' : '2px'}\r\n      onMouseOver={(e) => handleHover(e, graphData)}\r\n      onMouseLeave={(e) => handleHoverLeave(e)}\r\n      onClick={(e) => handleSelectCounty(e, graphData.name)}\r\n    ></path>\r\n  ) \r\n};\r\n\r\nexport default Line;\r\n","import React, { useState } from 'react';\r\n\r\nconst ClickRect = ({\r\n  rect,\r\n  date,\r\n  handleHoverDate,\r\n  handleHoverLeaveDate,\r\n  handleSelectDate,\r\n  selected,\r\n}) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const localHandleHover = (e, date) => {\r\n    setIsHovered(true);\r\n    handleHoverDate(e, date);\r\n  };\r\n  const localHandleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n    handleHoverLeaveDate(e);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <rect\r\n        onMouseEnter={(e) => localHandleHover(e)}\r\n        onMouseLeave={(e) => localHandleHoverLeave(e)}\r\n        x={rect.xOffset}\r\n        y={\r\n          selected\r\n            ? `${rect.y + (rect.height / 50 - rect.height / 40)}`\r\n            : `${rect.y}`\r\n        }\r\n        width={rect.rectWidth}\r\n        height={selected ? `${rect.height / 40}` : `${rect.height / 50}`}\r\n        stroke={`${isHovered ? 'var(--orange)' : 'var(--white)'}`}\r\n        fill={`${selected ? 'var(--lightBlack)' : 'var(--orange)'}`}\r\n        style={{ transition: 'all 0.005s linear', cursor: 'pointer' }}\r\n        opacity=\"0.8\"\r\n        onClick={() => {\r\n      \r\n          return handleSelectDate(date);\r\n        }}\r\n      />\r\n      <rect\r\n        x={rect.xOffset}\r\n        y={rect.y2}\r\n        width={rect.rectWidth}\r\n        height={selected ? `${rect.y2Height}` : `0`}\r\n        stroke={`${isHovered ? 'var(--purple)' : 'var(--white)'}`}\r\n        opacity=\"0.1\"\r\n        fill={`${selected ? 'var(--white)' : 'var(--lightBlack)'}`}\r\n        style={{ transition: 'all 0.005s linear', cursor: 'pointer' }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClickRect;\r\n","import React from 'react';\r\nimport ClickRect from './clickRect';\r\n\r\nconst ClickRectangles = ({graphData, dimensions, xScale, handleHoverDate, handleHoverLeaveDate, handleTextBox, handleSelectDate, selectedDate}) => {\r\n\r\n\r\n  const {margin, width, height} = dimensions;\r\n\r\n    return graphData.length \r\n      ? graphData.map((date, i) => {\r\n      \r\n          const graphWidth = width - margin.left - margin.right;\r\n          const rectWidth = graphWidth / graphData.length;\r\n          const x = xScale(date);\r\n          const xOffset = x - rectWidth / 2;\r\n          const rect = {\r\n            x: x,\r\n            y:  height - margin.bottom +1,\r\n            y2: margin.top,\r\n            y2Height: height - margin.bottom - margin.top,\r\n            graphWidth,\r\n            rectWidth,\r\n            height: height - margin.bottom,\r\n            xOffset,\r\n            key: `${graphData.fieldName}-${i}`,\r\n          };\r\n          return x ? (\r\n            <ClickRect\r\n              rect={rect}\r\n              date={date}\r\n              key={i}\r\n              selected={date === selectedDate}\r\n              handleHoverLeaveDate={handleHoverLeaveDate}\r\n              handleHoverDate={handleHoverDate}\r\n              handleTextBox={handleTextBox}\r\n              handleSelectDate={handleSelectDate}\r\n            />\r\n          ) : null;\r\n        })\r\n      : null;\r\n}\r\n\r\nexport default ClickRectangles;","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './lineGraph2.module.css';\r\nimport Axis from '../../../UI/Graphs/axis';\r\nimport YAxisLabel from '../../../UI/Graphs/yAxisLabel';\r\nimport Line from './line';\r\nimport { useStore } from '../../../Store/store';\r\nimport ClickRectangles from '../ClickRectangles/clickRectangles';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 50,\r\n    right: 50,\r\n    top: 50,\r\n    bottom: 50,\r\n  },\r\n  width: 1000,\r\n  height: 800,\r\n};\r\nconst { margin, width, height } = dimensions;\r\n\r\nconst LineGraph2 = ({ handleSelectCounty, handleSelectDate }) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n  const selectedData = storeSections.avail.filter((data) => data.selected)[0];\r\n  const svgRef = useRef(null);\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverColor, setHoverColor] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n  const [selectedAttribute, setSelectedAttribute] = useState('');\r\n\r\n  const [hoverInfoDate, setHoverInfoDate] = useState('');\r\n\r\n  // always runs!\r\n  useEffect(() => {\r\n    const findSelectedAttribute = () => {\r\n      const selected = storeSections.avail.filter((d) => d.selected)[0];\r\n      return selected;\r\n    };\r\n    const newSelected = findSelectedAttribute();\r\n    setSelectedAttribute(newSelected.fieldName);\r\n  }, [storeSections.avail]);\r\n\r\n  const useForXExtent = storeSections.allCounties[0].stats;\r\n  const xExtent = d3.extent(useForXExtent, (d) => d.TimeStampDate);\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([xExtent[0], xExtent[1]])\r\n    .range([margin.left, width - margin.right]);\r\n  const yScale = d3\r\n    .scaleLog()\r\n    .domain([1, 10000000])\r\n    .clamp(true)\r\n    .range([height - margin.top, margin.bottom])\r\n    .nice();\r\n  const colorScale = d3\r\n    .scaleSequential()\r\n    .domain([0, 100])\r\n    .interpolator(d3.interpolateRainbow);\r\n\r\n  const handleHover = (e, info) => {\r\n    const county = info.name;\r\n    // e.target.attributes['stroke-width'].value = '0.5rem';\r\n    setHoverInfo(county);\r\n    setHoverColor(info.color);\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  const handleHoverDate = (e, date) => {\r\n    setHoverInfoDate(new Date(date).toString().substring(0, 10));\r\n    setHoverColor('var(--lightBlack)');\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n  };\r\n\r\n  // TODO ?\r\n  const handleHoverLeaveDate = () => {};\r\n\r\n  return (\r\n    <div className={`${classes.svgWrap} ${classes.lineGraphSvgWrap}`}>\r\n      {isHovered && hoverPosition.length ? (\r\n        <div\r\n          style={{\r\n            opacity: `${isHovered ? '1' : '0'}`,\r\n            position: 'fixed',\r\n            left: `${hoverPosition[0]}px`,\r\n            top: `${hoverPosition[1]}px`,\r\n            background: `${hoverColor}`,\r\n            color: 'var(--white)',\r\n            padding: '0.5rem 1rem',\r\n            borderRadius: '0.4rem',\r\n            fontSize: '0.6rem',\r\n          }}\r\n        >\r\n          {hoverInfo || hoverInfoDate}\r\n        </div>\r\n      ) : null}\r\n\r\n      <svg\r\n        ref={svgRef}\r\n        viewBox={`0 0 ${width} ${height}`}\r\n        width={width}\r\n      >\r\n        <Axis dimensions={dimensions} xScale={xScale} yScale={yScale} />\r\n        <YAxisLabel\r\n          text={ selectedData ? selectedData.xAxisDescription : ''}\r\n          height={height}\r\n          margin={margin}\r\n        />\r\n        {storeSections && storeSections.allCountiesLatestData.length ? (\r\n          <ClickRectangles\r\n            graphData={storeSections.allCounties[0].stats.map(\r\n              (county) => county.TimeStampDate\r\n            )}\r\n            dimensions={dimensions}\r\n            xScale={xScale}\r\n            xAxisAttr={storeSections.dateFieldName}\r\n            handleHoverLeaveDate={handleHoverLeaveDate}\r\n            handleHoverDate={handleHoverDate}\r\n            handleSelectDate={handleSelectDate}\r\n            selectedDate={storeSections.selectedDate}\r\n          />\r\n        ) : null}\r\n        {storeSections && storeSections.allCounties.length\r\n          ? storeSections.allCounties.map((graphData, i) => (\r\n             \r\n                <Line\r\n                  graphData={graphData}\r\n                  i={i}\r\n                  key={i}\r\n                  handleHover={handleHover}\r\n                  handleHoverLeave={handleHoverLeave}\r\n                  xScale={xScale}\r\n                  yScale={yScale}\r\n                  colorScale={colorScale}\r\n                  selectedAttribute={selectedAttribute}\r\n                  handleSelectCounty={handleSelectCounty}\r\n                />\r\n          \r\n            ))\r\n          : null}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph2;\r\n","import React from 'react';\r\nimport classes from './countyBtns.module.css';\r\n\r\nconst CountyBtns = ({ counties, handleSelectCounty }) => {\r\n  return (\r\n    <div className={classes.countiesTinyBtnGroupWrap}>\r\n      {counties.map((county) => {\r\n        return (\r\n          <button\r\n            style={{\r\n              border: `${\r\n                county.selected ? `none` : `0.1rem solid ${county.color}`\r\n              }`,\r\n              background: `${\r\n                county.selected ? `${county.color}` : `var(--lightBlack)`\r\n              }`,\r\n              color: `${\r\n                county.selected ? 'var(--lightBlack)' : 'var(--white)'\r\n              }`,\r\n              fontWeight: '700',\r\n            }}\r\n            id={county.name}\r\n            key={county.name}\r\n            onClick={(e) => handleSelectCounty(e)}\r\n          >\r\n            {county.name}\r\n          </button>\r\n        );\r\n      })}\r\n      ;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountyBtns;\r\n","import React from 'react';\r\nimport LineGraph2 from '../LineGraph2/lineGraph2';\r\nimport TextBox from '../TextBox/textBox';\r\nimport AttributeBtns from '../SectionsUI/AttributeBtns/attributeBtns';\r\nimport CountyBts from '../SectionsUI/CountyBtns/countyBtns';\r\nimport SectionWrapSimple from '../../../UI/Sections/SectionWrapSimple/sectionWrapSimple';\r\nimport SectionWrap from '../../../UI/Sections/SectionWrap/sectionWrap';\r\nimport SectionSide from '../../../UI/Sections/SectionSide/sectionSide';\r\nimport SectionMain from '../../../UI/Sections/SectionMain/sectionMain';\r\nimport SectionHeader from '../../../UI/Sections/SectionHeader/sectionHeader';\r\nimport LoadingComp from '../../../UI/loading';\r\nimport { useStore } from '../../../Store/store';\r\n\r\nconst LineGraphSection = ({\r\n  handleSelectData,\r\n  handleSelectCounty,\r\n  handleSelectDate,\r\n  isLoading,\r\n}) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n\r\n  return isLoading ? (\r\n    <SectionWrapSimple minHeight=\"50vh\">\r\n      <LoadingComp />\r\n    </SectionWrapSimple>\r\n  ) : (\r\n    <SectionWrap>\r\n      <SectionSide title={storeSections.name} subtitle=\"subtitle\">\r\n        <SectionHeader\r\n          title={`${\r\n            storeSections.avail.filter((a) => a.selected)[0].name\r\n          } by County`}\r\n          subtitle=\"\"\r\n        ></SectionHeader>\r\n        <TextBox />\r\n\r\n        <AttributeBtns\r\n          availableAttributes={storeSections.avail}\r\n          handleSelectData={handleSelectData}\r\n        />\r\n\r\n        <CountyBts\r\n          counties={storeSections.allCounties}\r\n          handleSelectCounty={handleSelectCounty}\r\n        />\r\n      </SectionSide>\r\n\r\n      <SectionMain background=\"var(--lightBlack)\">\r\n        {storeSections && storeSections.allCounties.length ? (\r\n          <LineGraph2\r\n            handleSelectCounty={handleSelectCounty}\r\n            handleSelectDate={handleSelectDate}\r\n          />\r\n        ) : null}\r\n      </SectionMain>\r\n    </SectionWrap>\r\n  );\r\n};\r\n\r\nexport default LineGraphSection;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Layout from '../layout';\r\nimport axios from 'axios';\r\nimport ErrorComp from '../../UI/error';\r\n\r\nimport configureStore from './counties-store';\r\nimport { useStore } from '../../Store/store';\r\n\r\nimport BarChartSection from './BarChartSection/barChartSection';\r\nimport LineGraphSection from './LineChartSection/lineChartSection';\r\nconfigureStore();\r\n\r\nconst uriLatestAllCounties = `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/Covid19CountyStatisticsHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=CountyName,PopulationCensus16,ConfirmedCovidCases,PopulationProportionCovidCases,FID,TimeStampDate&outSR=4326&resultRecordCount=26&orderByFields=TimeStampDate%20DESC&returnGeometry=false&f=json`;\r\n\r\nconst allCountiesAllResultsConfirmedCasesMoreThanZero = `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/Covid19CountyStatisticsHPSCIrelandOpenData/FeatureServer/0/query?where=ConfirmedCovidCases>0&1%3D1&outFields=CountyName,PopulationCensus16,ConfirmedCovidCases,PopulationProportionCovidCases,FID,TimeStampDate&returnGeometry=false&outSR=4326&f=json`;\r\n\r\nconst Counties = () => {\r\n  const dispatch = useStore()[1];\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  // Latest - all counties\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setIsError(false);\r\n        const response = await axios.get(uriLatestAllCounties);\r\n        dispatch('SET_ALL_COUNTIES_LATEST_DATA', response.data.features);\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n  },[]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setIsError(false);\r\n        const response = await axios.get(\r\n          allCountiesAllResultsConfirmedCasesMoreThanZero\r\n        );\r\n        dispatch('SET_ALL_DATA', response.data.features);\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n  },[]);\r\n\r\n  const handleSelectOneCounty = (county) => {\r\n    dispatch('SELECT_COUNTY', county);\r\n  };\r\n\r\n  const handleSelectData = (e) => {\r\n    const fieldName = e.target.name;\r\n    dispatch('SELECT_ATTRIBUTE', fieldName);\r\n  };\r\n\r\n  // click on county line/tinyBtn to show details in textbox\r\n  const handleSelectCounty = (e, county) => {\r\n    const name = county || e.target.id;\r\n    dispatch('SELECT_COUNTY', name);\r\n  };\r\n\r\n  // click on ClickRectangle\r\n  const handleSelectDate = (date) => {\r\n    dispatch('SELECT_DATE', date);\r\n\r\n    // also update allCountiesLatestData (for Bar Chart)\r\n    dispatch('UPDATE_ALL_COUNTIES_LATEST_DATA', date);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <>\r\n        {isError ? <ErrorComp msg=\"Could not load data.\" /> : null}\r\n\r\n        <BarChartSection\r\n          handleSelectOneCounty={handleSelectOneCounty}\r\n          handleSelectData={handleSelectData}\r\n          handleSelectDate={handleSelectDate}\r\n          isLoading={isLoading}\r\n        />\r\n        <LineGraphSection\r\n          handleSelectDate={handleSelectDate}\r\n          handleSelectCounty={handleSelectCounty}\r\n          handleSelectData={handleSelectData}\r\n          isLoading={isLoading}\r\n        />\r\n      </>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Counties;\r\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/layout';\nimport DailyPage from './components/DailyPage/dailyPage';\nimport Header from './components/Header/header';\nimport ProfileStats from './components/ProfileStats/profileStats';\nimport Counties from './components/Counties/counties';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n        <Layout>\n          <Route exact path=\"/\" component={DailyPage} />\n          <Route exact path=\"/stats\" component={ProfileStats} />\n          <Route exact path=\"/counties\" component={Counties} />\n        </Layout>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatsGraphLeft\":\"section_profileStatsGraphLeft__2J6Xk\",\"sectionHeader\":\"section_sectionHeader__3yEZL\",\"profileStatsGraphMain\":\"section_profileStatsGraphMain__1tUPT\",\"profileStatsGraphWrap\":\"section_profileStatsGraphWrap__2_GlH\",\"graphSectionBtnGroupWrap\":\"section_graphSectionBtnGroupWrap__39Mx9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"genericTextItem\":\"textBox_genericTextItem__w0F8h\",\"infoWrap\":\"textBox_infoWrap__130VE\",\"rightSpan\":\"textBox_rightSpan__153Wo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"desc\":\"intro_desc__IP_KT\",\"p\":\"intro_p__1WsK6\",\"btnGroupWrap\":\"intro_btnGroupWrap__2BMjI\",\"tabBtn\":\"intro_tabBtn__5GASd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barChartSvgWrap\":\"barChart_barChartSvgWrap__1C3mf\",\"barChartRect\":\"barChart_barChartRect__d34aE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionWrapSimple\":\"sectionWrapSimple_sectionWrapSimple__Tq2Ms\",\"sectionMainWrapSimple\":\"sectionWrapSimple_sectionMainWrapSimple__2k0FV\",\"removeBottomOffset\":\"sectionWrapSimple_removeBottomOffset__2h5bS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgWrap\":\"lineGraphDaily2_svgWrap__1faS5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"axisGroupY\":\"axis_axisGroupY__1_P6u\",\"axisGroupX\":\"axis_axisGroupX__2cn4l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineGraphCircle\":\"circles_lineGraphCircle__28LlI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"axisGroupX\":\"axis_axisGroupX__2yVMY\",\"tick\":\"axis_tick__1a3vK\",\"axisGroupY\":\"axis_axisGroupY__1NKPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clickArrowsWrap\":\"clickArrows_clickArrowsWrap__1zdba\",\"clickArrows\":\"clickArrows_clickArrows__4rEdA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineGraphSvgWrap\":\"lineGraph2_lineGraphSvgWrap__3skc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"textBox_textItem__HVXgf\",\"infoWrap\":\"textBox_infoWrap__2n_2T\",\"small\":\"textBox_small__29gI_\",\"rightSpan\":\"textBox_rightSpan__32LzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrap\":\"layout_pageWrap__3QxV1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loading_loader__XPMoq\",\"load7\":\"loading_load7__q6uYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionWrap\":\"sectionWrap_sectionWrap__1jN5n\",\"sectionMainWrap\":\"sectionWrap_sectionMainWrap__XyJx_\",\"sectionSideWrap\":\"sectionWrap_sectionSideWrap__1CacI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionMain\":\"sectionMain_sectionMain__2Q9DQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionSideWrap\":\"sectionSide_sectionSideWrap__jZ7Cf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionHeader\":\"sectionHeader_sectionHeader__370lI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroupWrap\":\"dailyAttributeBtns_btnGroupWrap__3EmF-\"};"],"sourceRoot":""}