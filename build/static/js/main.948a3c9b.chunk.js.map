{"version":3,"sources":["components/DailyGraphs/LineGraphDaily/lineGraphDaily2.module.css","UI/Buttons/boringButton.module.css","UI/Buttons/AttributeBtns/attributeBtns.module.css","components/DailyGraphs/dailyGraphs.module.css","components/Counties/SectionsUI/CountyBtns/countyBtns.module.css","components/Counties/Sections/countiesSideSection.module.css","components/Counties/LineGraph/lineGraph2.module.css","components/DailyGraphs/TextBox/textBox.module.css","components/layout.js","UI/Sections/SectionWrapper/sectionWrapper.js","components/DailyGraphs/LineGraphDaily/line.js","components/Summary/tinyAxis.js","components/Summary/tinySvgLine.js","components/Summary/summaryBox.js","UI/error.js","UI/loading.js","util-functions.js","constants.js","components/Summary/summary.js","components/DailyPage/ExtraInfo/extraInfo.js","Store/store.js","components/DailyGraphs/dailyGraphs-store.js","UI/Sections/SectionWrap/sectionWrap.js","UI/Sections/SectionMain/sectionMain.js","UI/Sections/SectionSide/sectionSide.js","UI/Sections/SectionHeader/sectionHeader.js","components/DailyGraphs/LineGraphDaily/axis.js","UI/Graphs/yAxisLabel.js","UI/Graphs/HoverRectangles/hoverRect.js","UI/Graphs/HoverRectangles/hoverRectangles.js","UI/Buttons/boringButton.js","components/DailyGraphs/LineGraphDaily/lineGraphDaily.js","UI/Buttons/AttributeBtns/attributeBtns.js","components/DailyGraphs/TextBox/textBox.js","components/DailyGraphs/dailyGraphs.js","components/DailyPage/dailyPage.js","components/Header/header.js","components/ProfileStats/LineGraph/lines.js","components/ProfileStats/LineGraph/circles.js","UI/Tooltips/TinyTooltip.js","UI/Graphs/axis.js","components/ProfileStats/LineGraph/lineGraph.js","components/ProfileStats/TextBox/textBox.js","components/ProfileStats/Sections/section-util.js","components/ProfileStats/Sections/section.js","components/ProfileStats/sections-data.js","UI/Buttons/SelectGraphBtnGroup/selectGraphBtnGroup.js","components/ProfileStats/profileStats.js","components/Counties/counties-store.js","img/ctrlSvg.js","components/Counties/ClickArrows/clickArrows.js","components/Counties/Sections/countiesSideSectionHeader.js","components/Counties/TextBox/textBox.js","components/Counties/SectionsUI/CountyBtns/countyBtns.js","components/Counties/Sections/countiesSideSection.js","components/Counties/Sections/countiesSection.js","UI/Graphs/xAxisLabel.js","components/Counties/BarChart/barChart.js","components/Counties/LineGraph/line.js","components/Counties/ClickRectangles/clickRect.js","components/Counties/ClickRectangles/clickRectangles.js","components/Counties/LineGraph/lineGraph.js","components/Counties/TreeGraph/countyTile.js","components/Counties/TreeGraph/countyTiles.js","components/Counties/TreeGraph/treeGraph.js","components/Counties/counties.js","App.js","serviceWorker.js","index.js","components/Header/header.module.css","components/ProfileStats/TextBox/textBox.module.css","components/Counties/ClickArrows/clickArrows.module.css","components/Summary/summary.module.css","components/Summary/tinyAxis.module.css","components/DailyGraphs/LineGraphDaily/axis.module.css","components/ProfileStats/Sections/section.module.css","components/ProfileStats/LineGraph/circles.module.css","UI/Graphs/axis.module.css","UI/Buttons/SelectGraphBtnGroup/selectGraphBtnGroup.module.css","components/Counties/BarChart/barChart.module.css","components/Counties/TextBox/textBox.module.css","components/layout.module.css","UI/Sections/SectionWrapper/sectionWrapper.module.css","components/Summary/tinySvgLine.module.css","components/Summary/summaryBox.module.css","UI/loading.module.css","UI/Sections/SectionWrap/sectionWrap.module.css","UI/Sections/SectionMain/sectionMain.module.css","UI/Sections/SectionSide/sectionSide.module.css","UI/Sections/SectionHeader/sectionHeader.module.css"],"names":["module","exports","layout","children","className","classes","pageWrap","SectionWrapper","sectionWrapper","Line","graphData","handleHover","handleHoverLeave","xScale","yScale","fieldName","color","path","d3","x","d","y","line","fill","stroke","id","strokeWidth","selected","onMouseOver","e","onMouseLeave","TinyAxis","dimensions","xTinyAxisRef","useRef","yTinyAxisRef","xAxis","yAxis","useEffect","doAxis","xRef","current","yRef","scale","ticks","every","call","tickSize","tickFormat","ref","tinyAxisGroupX","transform","height","margin","top","tinyAxisGroupY","width","left","dummy","TinySvgLine","shortStatsForPerformance","label","mouseEnter","mouseLeave","handleClick","isHovered","tinySvgLine","viewBox","style","maxWidth","position","role","aria-label","onClick","selectLogScale","right","bottom","SummaryBox","yesterdayFieldName","niceStats","latest","text","shortTitle","dateField","svgLineFieldName","useState","isLogScale","setIsLogScale","setIsHovered","hoverInfo","setHoverInfo","filter","stat","i","xExtent","Date","updateInfo","domain","range","yExtent","ConfirmedCovidCases","summaryBox","clamp","nice","getYScale","what","letterSpacing","opacity","fontSize","textTransform","fontWeight","padding","background","textAlign","toLocaleString","toString","substring","ErrorComp","msg","borderRadius","LoadingComp","loader","countiesStoreUtil","colorScale","interpolator","sortIntoArraysByCounty","data","field","usedCountyNames","newData","forEach","includes","n","push","getLatestOrSelectedDateDataForCounty","county","selectedDate","dateToUse","dates","stats","map","s","TimeStampDate","Math","max","turnArraysIntoNiceObjects","obj","name","CountyName","PopulationCensus16","createManagableObjectAndSetFirstCountyToSelected","selectAttributeWithThisFieldName","attributes","a","sharedUtil","getLatestDate","getDataByFieldName","fieldValue","removeFromNestedAttributes","attr","key","maxDate","specificDate","specificDateFieldName","getLatestDataOrDataOnSpecificDate","COUNTIES","counties","reg","SUMMARY","dailyStatsSoFarUrl","infoStats","title","undefined","Summary","isLoading","setIsLoading","isError","setIsError","setNiceStats","setLatest","getDailyStats","useCallback","axios","get","response","features","niceData","length","latestDailyStats","summaryWrap","summaryInfoWrap","info","ExtraInfo","href","rel","target","sharedState","listeners","actions","useStore","shouldListen","setState","dispatch","actionId","param","newState","listener","l","initStore","userActions","initialState","calculateAverageOverTime","ofWhat","numDays","newKeyName","theData","slice","added","reduce","acc","isNaN","fn","calculatePercentageChangeOf","v2","v1","change","percentageChange","round","percentageDailyChange","configureStore","SET_ALL_DAILY_GRAPHS","curState","copy","dailyGraphsStore","withAverageChangeDailyCases","with5DayAverage","withAverageDailyCasesEach5Days","graph","all","SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA","latestDate","c","latestData","selectedDateData","dailyAlt","SELECT_DAILY_GRAPHS_ATTRS","graphId","newAvail","avail","selectedAttributeNames","oldNames","index","indexOf","splice","doAttrNames","sectionName","description","xAxisLabel","xAxisAttribute","xAxisDescription","SectionWrap","sectionWrap","SectionMain","sectionMain","SectionSide","subtitle","sectionSideWrap","SectionHeader","sectionHeader","Axis","xAxisRef","yAxisRef","yTickWidth","abs","xTickWidth","theType","axisGroupX","axisGroupY","YAxisLabel","yClass","HoverRect","rect","handleHoverDate","handleHoverLeaveDate","handleTextBox","date","selectRect","onMouseEnter","localHandleHover","localHandleHoverLeave","xOffset","rectWidth","transition","cursor","localHandleTextBox","HoverRectangles","selectedRectDate","setSelectedRectDate","graphWidth","BoringButton","config","overRideStyle","border","outline","minWidth","boringButton","LineGraphDaily","daily","setSelectLogScale","svgRef","hoverColor","setHoverColor","hoverPosition","setHoverPosition","extent","selectedExtents","maxValue","h","min","calculateYExtentOfSelectedAttributes","getYExtent","getXScale","xP","clientX","yP","clientY","getColor","check","display","alignSelf","justifySelf","yLabel","dateFieldName","dateToSelect","xScaleAttribute","AttributeBtns","availableAttributes","handleSelectData","graphIndex","btnGroupWrap","TextBox","allData","RightSpan","defaultColor","rightSpan","textItem","infoWrap","ans","small","configureDailyGraphsStore","DailyGraphs","graphs","forBreakPointBetween900And300","DailyPage","Header","props","header","exact","to","activeClassName","navActive","Lines","Circles","useDifferentShape","lineGraphCircle","cx","cy","r","rx","TinyToolTip","tickNumDays","LineGraph","yAxisLabel","setData","useMemo","StatisticsProfileDate","TinyTooltip","numAvailableAttrs","moreManagableVersionOfSelectedData","value","selectedData","w","profileStatsTextBox","minHeight","removeNulls","resp","m","successfullyGotDataForEachSelectedAttr","sectionAvail","fetched","getOne","part","Section","section","setSectionAvail","shouldUpdate","setShouldUpdate","setSelectedDate","shouldCancel","getDataForEachSelected","urlPart","filtered","flattened","getDataForEachSelectedCheckbox","sectionAvailCopy","Promise","selectedSection","find","graphSectionBtnGroupWrap","sectionUpdate","checkThis","haveData","renderLineGraph","sections","allUrl","SelectGraphBtnGroup","handleSelectGraph","btnClass","tabBtn","ProfileStats","allAvailableGraphs","setAllAvailableGraphs","newAvailGraphs","INIT_COUNTY_DATA","allCounties","util","allStatsAboutSelectedCounty","selectedCountyDataForSelectedDate","INIT_ALL_COUNTIES_LATEST_DATA","withoutNestedAttributes","allCountiesLatestData","UPDATE_ALL_COUNTIES_LATEST_DATA","newAllCountiesLatestData","SELECT_ATTRIBUTE","withThisFieldNameSelected","selectedAttributeName","SELECT_COUNTY","selectedCounty","SELECT_DATE","yAxisAttribute","paths","back","forward","beginning","end","stop","play","CtrlSvg","ctrlType","aria-hidden","focusable","xmlns","ClickArrows","handleSelectDate","justDates","setIsPlaying","isPlaying","localHandleSelectDate","isNext","selectedIndex","nextPrevDate","clickArrowsWrap","dateSpan","clickArrows","earliestDate","localHandleBackToStart","localHandleToLastDate","CountiesSideSectionHeader","storeSections","attrColor","PopulationProportionCovidCases","toFixed","CountyBtns","handleSelectCounty","countiesTinyBtnGroupWrap","CountiesSideSection","showCountyBtns","CountiesSection","XAxisLabel","boringButtonStyle","hoverStyle","BarChart","handleSelectOneCounty","attribute","countyNamesForAxisLabel","barChartSvg","barHeight","barChartRect","selectedAttribute","selectedAttr","setSelectedAttr","ClickRect","y2","y2Height","ClickRectangles","setSelectedAttribute","hoverInfoDate","setHoverInfoDate","useForXExtent","setUseForXExtent","newSelected","lineSvg","CountyTile","tree","showProvinces","arr","isSelected","parent","charAt","toUpperCase","PROVINCES","CountyTiles","countyData","selectedAttributeColor","selectedCountyName","sortedGraphData","sort","b","withProvinces","prov","names","co","province","dataWithOrWithoutProvinces","withoutProvinces","getOpacity","root","sum","size","paddingTop","paddingLeft","paddingRight","paddingBottom","leaves","x0","y0","x1","y1","TreeGraph","setShowProvinces","ONE_DAY","uriLatestAllCounties","allCountiesAllResultsConfirmedCasesMoreThanZero","Counties","setSelectedSection","getSelected","availGraphs","incrementSelectedDate","useDate","latestPossibleDate","interval","setInterval","clearInterval","renderGraph","App","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.948a3c9b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"svgWrap\":\"lineGraphDaily2_svgWrap__1faS5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boringButtonDefaults\":\"boringButton_boringButtonDefaults__82Cjo\",\"boringButton\":\"boringButton_boringButton__og6ot\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroupWrap\":\"attributeBtns_btnGroupWrap__34wN-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forBreakPointBetween900And300\":\"dailyGraphs_forBreakPointBetween900And300__3ZKG1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countiesTinyBtnGroupWrap\":\"countyBtns_countiesTinyBtnGroupWrap__3HFm5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"forBreakPointBetween900And300\":\"countiesSideSection_forBreakPointBetween900And300__Jhr57\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineSvg\":\"lineGraph2_lineSvg__3uCpg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"textBox_textItem__T_02Y\",\"infoWrap\":\"textBox_infoWrap__xxZTq\",\"small\":\"textBox_small__3tIyq\",\"rightSpan\":\"textBox_rightSpan__3lVY0\"};","import React from 'react';\r\nimport classes from './layout.module.css';\r\n\r\nconst layout = ({ children }) => {\r\n\r\n  return <div className={classes.pageWrap}>{children}</div>;\r\n};\r\n\r\nexport default layout;\r\n","import React from 'react';\r\nimport classes from './sectionWrapper.module.css';\r\n\r\nconst SectionWrapper = ({ children }) => (\r\n  <section className={classes.sectionWrapper}>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nexport default SectionWrapper;\r\n","import React  from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n\r\nconst Line = ({\r\n  graphData,\r\n  handleHover,\r\n  handleHoverLeave,\r\n  // handleClick,\r\n  xScale,\r\n  yScale,\r\n  fieldName,\r\n  color,\r\n\r\n}) => {\r\n\r\n  const line = d3\r\n    .line()\r\n    .x((d) => xScale(d['Date']))\r\n    .y((d) => {\r\n      return yScale(d[fieldName]);\r\n    });\r\n\r\n  const path = line(graphData);\r\n\r\n  return (\r\n    <path\r\n      d={path}\r\n      fill=\"none\"\r\n      stroke={color}\r\n      id={fieldName}\r\n      strokeWidth={graphData.selected ? '4px' : '2px'}\r\n      onMouseOver={(e) => handleHover(e, color)}\r\n      onMouseLeave={(e) => handleHoverLeave(e)}\r\n      // onClick={handleClick ? handleClick : false}\r\n    ></path>\r\n  );\r\n};\r\n\r\nexport default Line;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './tinyAxis.module.css';\r\n\r\nconst TinyAxis = ({ dimensions, xScale, yScale }) => {\r\n  const xTinyAxisRef = useRef(null);\r\n  const yTinyAxisRef = useRef(null);\r\n  const xAxis = d3.axisTop();\r\n  const yAxis = d3.axisLeft();\r\n \r\n  useEffect(() => {\r\n    doAxis();\r\n  });\r\n\r\n  const doAxis = () => {\r\n    const xRef = d3.select(xTinyAxisRef.current);\r\n    const yRef = d3.select(yTinyAxisRef.current);\r\n    xAxis.scale(xScale).ticks(d3.timeDay.every(90));\r\n    yAxis.scale(yScale).ticks(2,',.0f');\r\n\r\n    xRef.call(xAxis.tickSize(10).tickFormat(d3.timeFormat(\"%b\")))\r\n    yRef.call(yAxis.tickSize(10));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <g\r\n        ref={xTinyAxisRef}\r\n        className={classes.tinyAxisGroupX}\r\n        transform={`translate(0,${dimensions.height - dimensions.margin.top})`}\r\n      ></g>\r\n      <g\r\n        ref={yTinyAxisRef}\r\n        className={classes.tinyAxisGroupY}\r\n        transform={`translate(${dimensions.width-dimensions.margin.left}, 0)`}\r\n      ></g>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TinyAxis;\r\n","import React from 'react';\r\nimport Line from '../DailyGraphs/LineGraphDaily/line';\r\nimport classes from './tinySvgLine.module.css';\r\nimport TinyAxis from './tinyAxis';\r\n\r\nconst dummy = () => {};\r\n\r\nconst TinySvgLine = ({\r\n  shortStatsForPerformance,\r\n  xScale,\r\n  yScale,\r\n  fieldName,\r\n  label,\r\n  mouseEnter,\r\n  mouseLeave,\r\n  handleClick,\r\n  dimensions,\r\n  isHovered,\r\n}) => (\r\n  <svg\r\n    className={classes.tinySvgLine}\r\n    // viewBox=\"0 0 200 100\"\r\n    viewBox=\"0 -20 200 150\"\r\n    width=\"200\"\r\n    style={{ maxWidth: '100%', position: 'relative' }}\r\n    role=\"img\"\r\n    aria-label={label}\r\n    onMouseOver={(e) => mouseEnter(e)}\r\n    onMouseLeave={(e) => mouseLeave(e)}\r\n    onClick={() => handleClick()}\r\n  >\r\n    {isHovered ? (\r\n      <TinyAxis\r\n        dimensions={dimensions}\r\n        xScale={xScale}\r\n        yScale={yScale}\r\n        selectLogScale={true}\r\n      />\r\n    ) : null}\r\n\r\n    <Line\r\n      graphData={shortStatsForPerformance}\r\n      xScale={xScale}\r\n      yScale={yScale}\r\n      fieldName={fieldName}\r\n      color=\"var(--gray)\"\r\n      handleHover={dummy}\r\n      handleHoverLeave={dummy}\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport default TinySvgLine;\r\n","import React, { useState } from 'react';\r\nimport TinySvgLine from './tinySvgLine';\r\nimport classes from './summaryBox.module.css';\r\nimport * as d3 from 'd3';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 10,\r\n    right: 10,\r\n    top: 10,\r\n    bottom: 10,\r\n  },\r\n  width: 200,\r\n  height: 100,\r\n};\r\nconst { margin, width, height } = dimensions;\r\nconst SummaryBox = ({\r\n  fieldName,\r\n  yesterdayFieldName,\r\n  niceStats,\r\n  latest,\r\n  text,\r\n  shortTitle,\r\n  dateField,\r\n  svgLineFieldName,\r\n}) => {\r\n\r\n  const [isLogScale, setIsLogScale] = useState(true);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState('');\r\n\r\n  // better performance?. Can still get the shape of the graph with this\r\n  const shortStatsForPerformance = niceStats.filter((stat, i) => i % 3 === 0);\r\n  const xExtent = d3.extent(shortStatsForPerformance, (d) => d.Date);\r\n\r\n  const updateInfo = () => {\r\n    setHoverInfo(`${shortTitle} ${isLogScale ? '(Log)' : '(Linear)'}`);\r\n  };\r\n\r\n  const handleMouseIn = (e, what) => {\r\n    updateInfo();\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleMouseOut = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  const handleClick = (e, what) => {\r\n    updateInfo();\r\n    setIsLogScale(!isLogScale);\r\n  };\r\n\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([xExtent[0], xExtent[1]])\r\n    .range([margin.left, width - margin.right]);\r\n\r\n  const yExtent = d3.extent(\r\n    shortStatsForPerformance,\r\n    (d) => d.ConfirmedCovidCases\r\n  );\r\n\r\n  const getYScale = () => {\r\n    let yScale = d3\r\n      .scaleLog()\r\n      .domain(yExtent)\r\n      .clamp(true)\r\n      .range([height - margin.top, margin.bottom])\r\n      .nice();\r\n\r\n    if (!isLogScale) {\r\n      yScale = d3\r\n        .scaleLinear()\r\n        .domain(yExtent)\r\n        .clamp(true)\r\n        .range([height - margin.top, margin.bottom])\r\n        .nice();\r\n    }\r\n    return yScale;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.summaryBox} style={{ position: 'relative' }}>\r\n      <TinySvgLine\r\n        shortStatsForPerformance={shortStatsForPerformance}\r\n        xScale={xScale}\r\n        yScale={getYScale()}\r\n        handleClick={handleClick}\r\n        mouseEnter={handleMouseIn}\r\n        mouseLeave={handleMouseOut}\r\n        fieldName={svgLineFieldName}\r\n        dimensions={dimensions}\r\n        label={text}\r\n        isHovered={isHovered}\r\n      />\r\n\r\n      {isHovered ? (\r\n        <div\r\n          style={{\r\n            position: 'absolute',\r\n            letterSpacing: '0.1rem',\r\n            top: '1rem',\r\n            opacity: 1,\r\n            fontSize: '0.5rem',\r\n            margin: 0,\r\n            right: ' 1rem',\r\n            textTransform: 'uppercase',\r\n            fontWeight: 800,\r\n            color: 'var(--covidGreen)',\r\n            padding: 0,\r\n            background: 'var(--lightBlack)',\r\n            textAlign: 'right',\r\n          }}\r\n        >\r\n          {hoverInfo}\r\n        </div>\r\n      ) : null}\r\n\r\n      <h4>\r\n        {latest[fieldName] ? latest[fieldName].toLocaleString() : ''}{' '}\r\n        {yesterdayFieldName ? (\r\n          <small>\r\n            (+\r\n            {latest[yesterdayFieldName].toLocaleString()})*\r\n          </small>\r\n        ) : null}\r\n      </h4>\r\n      <h3>{text}</h3>\r\n      <p>({new Date(latest[dateField]).toString().substring(0, 15)})</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SummaryBox;\r\n","import React from 'react';\r\n\r\nconst ErrorComp = ({ msg }) => (\r\n  <p\r\n    style={{\r\n      color: 'var(--covidPink)',\r\n      background: 'var(--midBlack)',\r\n      padding: '1rem',\r\n      borderRadius: '0.4rem',\r\n      margin: '3rem 0'\r\n    }}\r\n  >\r\n    {msg}\r\n  </p>\r\n);\r\n\r\nexport default ErrorComp;\r\n","import React from 'react';\r\nimport classes from './loading.module.css';\r\n\r\nconst LoadingComp = ({ msg }) => <div className={classes.loader}>{msg}</div>;\r\n\r\nexport default LoadingComp;\r\n","import * as d3 from 'd3';\r\n\r\nexport const countiesStoreUtil = {\r\n  colorScale: d3\r\n    .scaleSequential()\r\n    .domain([0, 100])\r\n    .interpolator(d3.interpolateRainbow),\r\n\r\n  sortIntoArraysByCounty: (data, field = 'CountyName') => {\r\n    // data in = [{galway},{galway},{longford}]\r\n    // want data out = [[{galway},{galway}],[{longford}]]\r\n    const usedCountyNames = [];\r\n    const newData = [];\r\n    data.forEach((d) => {\r\n      // new county\r\n      if (!usedCountyNames.includes(d[field])) {\r\n        usedCountyNames.push(d[field]);\r\n        newData.push([d]);\r\n      } else {\r\n        // find county in array of arrays and push new one in\r\n        const correctArray = newData.filter((n) => n[0][field] === d[field])[0];\r\n        correctArray.push(d);\r\n      }\r\n    });\r\n    return newData;\r\n  },\r\n\r\n  getLatestOrSelectedDateDataForCounty: (county, selectedDate) => {\r\n    let dateToUse = selectedDate;\r\n    if (!dateToUse) {\r\n      const dates = county.stats.map((s) => s.TimeStampDate);\r\n      dateToUse = Math.max(...dates.map((d) => d));\r\n    }\r\n\r\n    const newestData = county.stats.filter(\r\n      (s) => s.TimeStampDate === dateToUse\r\n    );\r\n    return newestData[0];\r\n  },\r\n\r\n  turnArraysIntoNiceObjects: (data) => {\r\n    const createManagableObjectAndSetFirstCountyToSelected = (n, i) => {\r\n      const obj = {};\r\n      obj.name = n[0].CountyName;\r\n      // should add reg\r\n      obj.selected = false;\r\n      obj.stats = [...n];\r\n      obj['color'] = countiesStoreUtil.colorScale(n[0].PopulationCensus16);\r\n      if (i === 0) {\r\n        obj['selected'] = true;\r\n      }\r\n      return obj;\r\n    };\r\n\r\n    return data.map((n, i) =>\r\n      createManagableObjectAndSetFirstCountyToSelected(n, i)\r\n    );\r\n  },\r\n  selectAttributeWithThisFieldName: (attributes, fieldName) => {\r\n    return attributes.map((a) => {\r\n      if (a.fieldName === fieldName) {\r\n        a.selected = true;\r\n      } else {\r\n        a.selected = false;\r\n      }\r\n      return a;\r\n    });\r\n  },\r\n};\r\n\r\nexport const sharedUtil = {\r\n  getLatestDate: (county) => {\r\n    const dates = county.stats.map((s) => s.TimeStampDate);\r\n    const newestDate = Math.max(...dates.map((d) => d));\r\n    return newestDate;\r\n    // const dates = removeFromNestedAttributes(county, 'stats')\r\n  },\r\n\r\n  getDataByFieldName: (data, fieldName, fieldValue) => {\r\n    return data.filter((s) => s[fieldName] === fieldValue);\r\n  },\r\n\r\n  removeFromNestedAttributes: (data, attr = 'attributes') => {\r\n    return data.map((d) => {\r\n      let obj = {};\r\n      for (const key in d[attr]) {\r\n        obj[key] = d[attr][key];\r\n      }\r\n      return obj;\r\n    });\r\n  },\r\n  maxDate: (specificDate, data, specificDateFieldName) => {\r\n    let dateToUse = specificDate;\r\n    if (!dateToUse) {\r\n      const dates = data.map((s) => s[specificDateFieldName]);\r\n      dateToUse = Math.max(...dates.map((d) => d));\r\n    }\r\n    return dateToUse;\r\n  },\r\n  getLatestDataOrDataOnSpecificDate: (\r\n    data,\r\n    specificDate,\r\n    specificDateFieldName\r\n  ) => {\r\n    const dateToUse = sharedUtil.maxDate(\r\n      specificDate,\r\n      data,\r\n      specificDateFieldName\r\n    );\r\n    const newestData = sharedUtil.getDataByFieldName(\r\n      data,\r\n      specificDateFieldName,\r\n      dateToUse\r\n    );\r\n    return newestData[0];\r\n  },\r\n};\r\n","export const COUNTIES = {\r\n  ONE_DAY: 86400000,\r\n  uriLatestAllCounties: `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/Covid19CountyStatisticsHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=CountyName,PopulationCensus16,ConfirmedCovidCases,PopulationProportionCovidCases,FID,TimeStampDate&outSR=4326&resultRecordCount=26&orderByFields=TimeStampDate%20DESC&returnGeometry=false&f=json`,\r\n\r\n  allCountiesAllResultsConfirmedCasesMoreThanZero: `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/Covid19CountyStatisticsHPSCIrelandOpenData/FeatureServer/0/query?where=ConfirmedCovidCases>0&1%3D1&outFields=CountyName,PopulationCensus16,ConfirmedCovidCases,PopulationProportionCovidCases,FID,TimeStampDate&returnGeometry=false&outSR=4326&f=json`,\r\n\r\n  PROVINCES: [\r\n    {\r\n      name: 'connaught',\r\n      counties: [\r\n        { name: 'Mayo', reg: 'MO' },\r\n        { name: 'Galway', reg: 'G' },\r\n        { name: 'Sligo', reg: 'SO' },\r\n        { name: 'Leitrim', reg: 'LM' },\r\n        { name: 'Roscommon', reg: 'RN' },\r\n      ],\r\n    },\r\n    {\r\n      name: 'ulster',\r\n      counties: [\r\n        { name: 'Donegal', reg: 'DL' },\r\n        { name: 'Monaghan', reg: 'MN' },\r\n        { name: 'Cavan', reg: 'CN' },\r\n      ],\r\n    },\r\n    {\r\n      name: 'leinster',\r\n      counties: [\r\n        { name: 'Longford', reg: 'LD' },\r\n        { name: 'Westmeath', reg: 'WH' },\r\n        { name: 'Louth', reg: 'LH' },\r\n        { name: 'Meath', reg: 'MH' },\r\n        { name: 'Dublin', reg: 'D' },\r\n        { name: 'Wicklow', reg: 'WW' },\r\n        { name: 'Wexford', reg: 'WX' },\r\n        { name: 'Kilkenny', reg: 'KK' },\r\n        { name: 'Carlow', reg: 'CW' },\r\n        { name: 'Kildare', reg: 'KE' },\r\n        { name: 'Laois', reg: 'LS' },\r\n        { name: 'Offaly', reg: 'OY' },\r\n      ],\r\n    },\r\n    {\r\n      name: 'munster',\r\n      counties: [\r\n        { name: 'Cork', reg: 'C' },\r\n        { name: 'Kerry', reg: 'KY' },\r\n        { name: 'Limerick', reg: 'L' },\r\n        { name: 'Clare', reg: 'CE' },\r\n        { name: 'Tipperary', reg: 'T' },\r\n        { name: 'Waterford', reg: 'W' },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const SUMMARY = {\r\n  dailyStatsSoFarUrl: `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/CovidStatisticsProfileHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=ConfirmedCovidCases,Date,ConfirmedCovidDeaths,TotalCovidDeaths,ConfirmedCovidRecovered,TotalConfirmedCovidCases,HospitalisedCovidCases,RequiringICUCovidCases,HealthcareWorkersCovidCases,ClustersNotified,StatisticsProfileDate&outSR=4326&f=json`,\r\n\r\n  infoStats: [\r\n    {\r\n      title: 'Confirmed Cases',\r\n      shortTitle: '# Cases',\r\n      fieldName: 'TotalConfirmedCovidCases',\r\n      yesterdayFieldName: 'ConfirmedCovidCases', //from latest\r\n      svgLineFieldName: 'ConfirmedCovidCases',\r\n      dateField: 'Date',\r\n    },\r\n    {\r\n      title: 'Confirmed Recovered',\r\n      shortTitle: '# Recovered',\r\n      fieldName: 'ConfirmedCovidRecovered',\r\n      yesterdayFieldName: undefined, //from latest\r\n      svgLineFieldName: 'ConfirmedCovidRecovered',\r\n      dateField: 'Date',\r\n    },\r\n    {\r\n      title: 'Confirmed Deaths',\r\n      shortTitle: '# Deaths',\r\n      fieldName: 'TotalCovidDeaths',\r\n      yesterdayFieldName: 'ConfirmedCovidDeaths', //from latest\r\n      svgLineFieldName: 'ConfirmedCovidDeaths',\r\n      dateField: 'Date',\r\n    },\r\n    {\r\n      title: 'Hospitalised',\r\n      shortTitle: '# Hospitalised',\r\n      fieldName: 'HospitalisedCovidCases',\r\n      yesterdayFieldName: undefined, //from latest\r\n      svgLineFieldName: 'HospitalisedCovidCases',\r\n      dateField: 'StatisticsProfileDate',\r\n    },\r\n    {\r\n      title: '# ICU',\r\n      shortTitle: '# in ICU',\r\n      fieldName: 'RequiringICUCovidCases',\r\n      yesterdayFieldName: undefined, //from latest\r\n      svgLineFieldName: 'RequiringICUCovidCases',\r\n      dateField: 'StatisticsProfileDate',\r\n    },\r\n\r\n    {\r\n      title: 'Healthcare Workers Cases',\r\n      shortTitle: '# Healthcare Workers',\r\n      fieldName: 'HealthcareWorkersCovidCases',\r\n      yesterdayFieldName: undefined, //from latest\r\n      svgLineFieldName: 'HealthcareWorkersCovidCases',\r\n      dateField: 'StatisticsProfileDate',\r\n    },\r\n    {\r\n      title: 'Clusters',\r\n      shortTitle: '# Clusters',\r\n      fieldName: 'ClustersNotified',\r\n      yesterdayFieldName: undefined, //from latest\r\n      svgLineFieldName: 'ClustersNotified',\r\n      dateField: 'StatisticsProfileDate',\r\n    },\r\n  ],\r\n};\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport classes from './summary.module.css';\r\nimport SectionWrapper from '../../UI/Sections/SectionWrapper/sectionWrapper';\r\nimport SummaryBox from './summaryBox';\r\nimport ErrorComp from '../../UI/error';\r\nimport LoadingComp from '../../UI/loading';\r\nimport { sharedUtil } from '../../util-functions';\r\nimport { SUMMARY } from '../../constants';\r\n\r\nconst Summary = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [niceStats, setNiceStats] = useState([]);\r\n  const [latest, setLatest] = useState();\r\n  const getDailyStats = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(SUMMARY.dailyStatsSoFarUrl);\r\n      return response.data.features;\r\n    } catch (e) {\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n      try {\r\n      \r\n        const data = await getDailyStats();\r\n        const niceData = sharedUtil.removeFromNestedAttributes(data);\r\n        setNiceStats(niceData);\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n  }, [getDailyStats]);\r\n\r\n\r\n \r\n  useEffect(() => {\r\n    if (niceStats.length) {\r\n      const latestDailyStats = sharedUtil.getLatestDataOrDataOnSpecificDate(\r\n        niceStats,\r\n        false,\r\n        'Date'\r\n      );\r\n\r\n      setLatest(latestDailyStats);\r\n    }\r\n  }, [niceStats]);\r\n\r\n\r\n  return (\r\n    <SectionWrapper>\r\n      {isError ? (\r\n        <ErrorComp msg=\"Could not load Summary.\" />\r\n      ) : (\r\n        <div className={classes.summaryWrap}>\r\n          {latest && !isLoading ? (\r\n            <>\r\n              <div className={classes.summaryInfoWrap}>\r\n                {SUMMARY.infoStats.map((info) => (\r\n                  <SummaryBox\r\n                    key={info.fieldName}\r\n                    niceStats={niceStats}\r\n                    fieldName={info.fieldName}\r\n                    yesterdayFieldName={info.yesterdayFieldName}\r\n                    latest={latest}\r\n                    text={info.title}\r\n                    shortTitle={info.shortTitle}\r\n                    dateField={info.dateField}\r\n                    svgLineFieldName={info.svgLineFieldName}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <span\r\n                style={{\r\n                  color: 'var(--gray)',\r\n                  fontSize: '0.7rem',\r\n                  fontWeight: 'normal',\r\n                }}\r\n              >\r\n                *Latest daily figures\r\n                <br />\r\n                Last Updated:{' '}\r\n                {new Date(latest.Date).toString().substring(0, 15)}\r\n              </span>\r\n            </>\r\n          ) : (\r\n            <LoadingComp msg=\"Loading\" />\r\n          )}\r\n        </div>\r\n      )}\r\n    </SectionWrapper>\r\n  );\r\n};\r\n\r\nexport default Summary;\r\n","import React from 'react';\r\nimport SectionWrapper from '../../../UI/Sections/SectionWrapper/sectionWrapper';\r\n\r\nconst ExtraInfo = () => {\r\n  return (\r\n    <SectionWrapper>\r\n      <p>\r\n        All data taken from data.gov.ie, available{' '}\r\n        <a\r\n          href=\"https://opendata-geohive.hub.arcgis.com/datasets/d8eb52d56273413b84b0187a4e9117be_0/data?geometry=-7.694%2C53.288%2C-7.691%2C53.289\"\r\n          rel=\"noopener noreferrer\"\r\n          target=\"_blank\"\r\n        >\r\n          here\r\n        </a>\r\n        . It is updated every evening, with the latest records for{' '}\r\n        <em>Total Confirmed Cases</em>, <em>Confirmed Recovered</em> and{' '}\r\n        <em>Total Confirmed Deaths</em> reporting the counts recorded at 1pm the\r\n        same day.\r\n      </p>\r\n      <p>\r\n        Other data is part of of the HSPC's{' '}\r\n        <em>Daily Statistics Profile of Covid-19</em>. It is also updated each\r\n        evening but dates back to 12am two days previously.{' '}\r\n      </p>\r\n\r\n      <p>\r\n        Note that from April 10th 2020 not all confirmed cases are included in\r\n        the <em>Daily Cases</em> or <em>Percentage Change</em> figures. Cases\r\n        not included represent tests that were sent to Germany for analysis. All\r\n        confirmed cases{' '}\r\n        <strong>\r\n          <em>are</em>\r\n        </strong>{' '}\r\n        included in <em>Total Confirmed Cases</em>.\r\n      </p>\r\n      <p>\r\n        For example on April 17th the number of <em>New Cases</em> is 597 while\r\n        the <em>Total Cases</em> number jumps by 709 to 13,980. This can be\r\n        accounted for by the 112 positive test results returned from Germany.\r\n        Though most of these extra cases seem to be old, they have not been\r\n        backdated in the data released on data.gov.ie. A graph with tests\r\n        backdated is available from gov.ie{' '}\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"nofollow noopener noreferrer\"\r\n          href=\"https://assets.gov.ie/73405/f1938dc1f761415b93db5b8009c91898.pdf\"\r\n        >\r\n          here\r\n        </a>{' '}\r\n        (.pdf download) and all updates for April 2020 are available from gov.ie{' '}\r\n        <a\r\n          href=\"https://www.gov.ie/en/publication/20f2e0-updates-on-covid-19-coronavirus-since-january-2020/#april\"\r\n          target=\"_blank\"\r\n          rel=\"nofollow noopener noreferrer\"\r\n        >\r\n          here\r\n        </a>\r\n        .\r\n      </p>\r\n    </SectionWrapper>\r\n  );\r\n};\r\n\r\nexport default ExtraInfo;\r\n","import { useState, useEffect } from 'react';\r\n\r\nlet sharedState = {};\r\nlet listeners = [];\r\nlet actions = {};\r\n\r\nexport const useStore = (shouldListen=true) => {\r\n  const setState =  useState(sharedState)[1];\r\n\r\n  const dispatch = (actionId, param) => {\r\n    const newState = actions[actionId](sharedState, param);\r\n    sharedState = { ...sharedState, ...newState }\r\n\r\n    for(const listener of listeners) {\r\n      listener(sharedState);\r\n    }\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if(shouldListen) {\r\n      listeners.push(setState);\r\n    }\r\n    \r\n\r\n    // remove on unmount\r\n    return ()=>{\r\n      if(shouldListen){\r\n        listeners = listeners.filter(l=> l !== setState);\r\n      }\r\n  \r\n    }\r\n  }, [setState, shouldListen]);\r\n\r\n  return [sharedState, dispatch];\r\n}\r\n\r\nexport const initStore = (userActions, initialState) => {\r\n  if(initialState) {\r\n    sharedState = {...sharedState, ...initialState}\r\n  }\r\n  actions = {...actions, ...userActions}\r\n}","import { initStore } from '../../Store/store';\r\n\r\n// TODO shared with counties-store (& profileStats.js=>section.js !)\r\nconst removeFromNestedAttributes = (data) => {\r\n  return data.map((d) => {\r\n    let obj = {};\r\n    for (const key in d.attributes) {\r\n      obj[key] = d.attributes[key];\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nconst calculateAverageOverTime = (data, ofWhat, numDays, newKeyName) => {\r\n  const appendNewArrayContainingDataToBeAveraged = (theData) => {\r\n    theData.map((d, i) => {\r\n      if (i >= numDays - 1) {\r\n        d[newKeyName] = theData.slice(i - (numDays - 1), i + 1);\r\n      } else {\r\n        d[newKeyName] = null;\r\n      }\r\n      return d;\r\n    });\r\n    return theData;\r\n  };\r\n\r\n  const reduceNewArrayToSingleAverageNum = (theData) => {\r\n    const ans = theData.map((d) => {\r\n      // const oldArr = d[newKeyName];\r\n      if (d[newKeyName] && d[newKeyName].length === numDays) {\r\n        const added = d[newKeyName].reduce((acc, e) => {\r\n          acc += e[ofWhat];\r\n          return acc;\r\n        }, 0);\r\n        if (added && !isNaN(added)) {\r\n          d[newKeyName] = added / numDays;\r\n          // d.oldArr = oldArr;\r\n        }\r\n      }\r\n      return d;\r\n    });\r\n\r\n    return ans;\r\n  };\r\n\r\n  const ans = [\r\n    appendNewArrayContainingDataToBeAveraged,\r\n    reduceNewArrayToSingleAverageNum,\r\n  ].reduce((data, fn) => fn(data), data);\r\n\r\n  return ans;\r\n};\r\n\r\nconst calculatePercentageChangeOf = (data, ofWhat = 'ConfirmedCovidCases') => {\r\n  return data.map((d, i) => {\r\n    const v2 = d[ofWhat];\r\n    if (data[i - 1]) {\r\n      // skip the first\r\n      const v1 = data[i - 1][ofWhat];\r\n      const change = v2 - v1;\r\n      const percentageChange = Math.round((change * 100) / v1);\r\n      d.percentageDailyChange = percentageChange;\r\n    } else {\r\n      d.percentageDailyChange = null;\r\n    }\r\n    return d;\r\n  });\r\n};\r\n\r\nconst configureStore = () => {\r\n  const actions = {\r\n    SET_ALL_DAILY_GRAPHS: (curState, response) => {\r\n      const copy = curState.dailyGraphsStore;\r\n\r\n      const withAverageChangeDailyCases = [\r\n        removeFromNestedAttributes,\r\n        calculatePercentageChangeOf,\r\n      ].reduce((data, fn) => {\r\n        return fn(data);\r\n      }, response);\r\n\r\n      const with5DayAverage = calculateAverageOverTime(\r\n        withAverageChangeDailyCases,\r\n        'percentageDailyChange',\r\n        5,\r\n        'percentageDailyChange5DayAverage'\r\n      );\r\n\r\n      const withAverageDailyCasesEach5Days = calculateAverageOverTime(\r\n        with5DayAverage,\r\n        'ConfirmedCovidCases',\r\n        5,\r\n        'AverageConfirmedCases'\r\n      );\r\n\r\n      // copy[0].all = withAverageDailyCasesEach5Days;\r\n      copy.map((graph) => (graph.all = withAverageDailyCasesEach5Days));\r\n    \r\n      return { dailyGraphsStore: copy };\r\n    },\r\n    SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA: (curState, latestDate) => {\r\n      const copy = curState.dailyGraphsStore;\r\n\r\n      // each graph\r\n      copy.map((graph) => {\r\n        if (!latestDate) {\r\n          latestDate = Math.max(...graph.all.map((c) => c.Date));\r\n        }\r\n        const latestData = graph.all.filter((a) => a.Date === latestDate)[0];\r\n        graph.selectedDate = latestDate;\r\n        graph.selectedDateData = latestData;\r\n        return graph;\r\n      });\r\n\r\n      return { dailyAlt: copy };\r\n    },\r\n    SELECT_DAILY_GRAPHS_ATTRS: (curState, { fieldName, graphId }) => {\r\n      // which graph??\r\n\r\n      const copy = curState.dailyGraphsStore;\r\n\r\n      copy.map((graph) => {\r\n        // .avail bool\r\n        if (graph.id === graphId) {\r\n          const newAvail = graph.avail.map((a) => {\r\n            if (a.fieldName === fieldName) {\r\n              a.selected = !a.selected;\r\n            }\r\n            return a;\r\n          });\r\n          graph.avail = newAvail;\r\n\r\n          // .selectedAttributeNames\r\n          const doAttrNames = (oldNames) => {\r\n            // not the right whatever....\r\n            if (!oldNames.includes(fieldName)) {\r\n              oldNames.push(fieldName);\r\n            } else {\r\n              const index = oldNames.indexOf(fieldName);\r\n              if (index > -1) {\r\n                oldNames.splice(index, 1);\r\n              }\r\n            }\r\n            return oldNames;\r\n          };\r\n\r\n          graph.selectedAttributeNames = doAttrNames(\r\n            graph.selectedAttributeNames\r\n          );\r\n        }\r\n\r\n        return graph;\r\n      });\r\n\r\n      return { dailyAlt: copy };\r\n    },\r\n  };\r\n  initStore(actions, {\r\n    dailyGraphsStore: [\r\n      {\r\n        name: 'DailyAlt',\r\n        id: 1,\r\n        sectionName: 'Daily Cases',\r\n        description:\r\n          '5 day average is average of current days new confirmed cases and 4 previous days.',\r\n        xAxisLabel: '# cases',\r\n        xAxisAttribute: 'Date',\r\n        selectedAttributeNames: ['ConfirmedCovidCases'],\r\n        selectedDate: '',\r\n        selectedDateData: [],\r\n        all: [],\r\n        avail: [\r\n          {\r\n            name: 'New Cases',\r\n\r\n            fieldName: 'ConfirmedCovidCases',\r\n            xAxisDescription: 'Number of Confirmed Cases',\r\n            xAxisAttribute: 'Date',\r\n            selected: true,\r\n            color: 'var(--green)',\r\n          },\r\n          {\r\n            name: 'New Cases (5 day avg)',\r\n            fieldName: 'AverageConfirmedCases',\r\n            xAxisAttribute: 'Date',\r\n            xAxisDescription: 'AverageConfirmedCases',\r\n            selected: false,\r\n            color: 'var(--yellow)',\r\n          },\r\n          {\r\n            name: 'Total Cases',\r\n            fieldName: 'TotalConfirmedCovidCases',\r\n            xAxisDescription: 'Total Number of Confirmed Cases',\r\n            xAxisAttribute: 'Date',\r\n            selected: false,\r\n            color: 'var(--white)',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'DailyAlt',\r\n        id: 2,\r\n        sectionName: 'Daily Cases (Percentage Change)',\r\n        description:\r\n          'Percentage Change calculated as (V2 - V1) x 100 / V1. 5 day average is average of current day and 4 previous days. ',\r\n        xAxisLabel: '% change',\r\n        xAxisAttribute: 'Date',\r\n        selectedAttributeNames: ['percentageDailyChange'],\r\n        selectedDate: '',\r\n        selectedDateData: [],\r\n        all: [],\r\n        avail: [\r\n          {\r\n            name: 'New Cases (% change)',\r\n            fieldName: 'percentageDailyChange',\r\n            xAxisAttribute: 'Date',\r\n            xAxisDescription: '% Daily Change (newCases)',\r\n            selected: true,\r\n            color: 'var(--blue)',\r\n          },\r\n          {\r\n            name: 'New Cases (% change) 5 day avg',\r\n            fieldName: 'percentageDailyChange5DayAverage',\r\n            xAxisDescription: 'percentageDailyChange5DayAverage',\r\n            xAxisAttribute: 'Date',\r\n            selected: false,\r\n            color: 'var(--purple)',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        name: 'DailyAlt',\r\n        id: 3,\r\n        sectionName: 'Deaths',\r\n        description: '',\r\n        xAxisLabel: '# deaths',\r\n        xAxisAttribute: 'Date',\r\n        selectedAttributeNames: ['ConfirmedCovidDeaths'],\r\n        selectedDate: '',\r\n        selectedDateData: [],\r\n        all: [],\r\n        avail: [\r\n          {\r\n            name: 'New Deaths',\r\n            fieldName: 'ConfirmedCovidDeaths',\r\n            xAxisDescription: 'Number of Deaths',\r\n            xAxisAttribute: 'Date',\r\n            selected: true,\r\n            color: 'var(--green)',\r\n          },\r\n\r\n          {\r\n            name: 'Total Deaths',\r\n            fieldName: 'TotalCovidDeaths',\r\n            xAxisDescription: 'Total Number of Deaths',\r\n            xAxisAttribute: 'Date',\r\n            selected: false,\r\n            color: 'var(--orange)',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport classes from './sectionWrap.module.css';\r\n// import SectionSide from '../SectionSide/sectionSide';\r\n\r\n\r\nconst SectionWrap = ({ children }) => (\r\n  <div className={classes.sectionWrap}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SectionWrap;\r\n","import React from 'react';\r\nimport classes from './sectionMain.module.css';\r\n\r\nconst SectionMain = ({ children, background }) => {\r\n  return (\r\n    <div\r\n      style={{ background: `${background ? background : 'var(--midBlack)'}` }}\r\n      className={classes.sectionMain}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionMain;\r\n","import React from 'react';\r\nimport classes from './sectionSide.module.css';\r\n\r\nconst SectionSide = ({title, subtitle, description, children}) => {\r\n  return(\r\n    <div className={classes.sectionSideWrap}>\r\n\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SectionSide;","import React from 'react';\r\nimport classes from './sectionHeader.module.css';\r\n\r\nconst SectionHeader = ({ title, subtitle, description, children }) => (\r\n  <div className={classes.sectionHeader}>\r\n    <h3>\r\n      {title} <br />\r\n      <small>{subtitle} </small>\r\n    </h3>\r\n    {description ? <p>{description}</p> : null}\r\n\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default SectionHeader;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './axis.module.css';\r\n\r\nconst Axis = ({ dimensions, xScale, yScale, selectLogScale }) => {\r\n  const xAxisRef = useRef(null);\r\n  const yAxisRef = useRef(null);\r\n  const xAxis = d3.axisBottom();\r\n  const yAxis = d3.axisLeft();\r\n  const yTickWidth = -Math.abs(\r\n    dimensions.width - dimensions.margin.right - dimensions.margin.left\r\n  );\r\n  const xTickWidth = -Math.abs(\r\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom\r\n  );\r\n\r\n  useEffect(() => {\r\n    doAxis();\r\n  });\r\n\r\n  const doAxis = () => {\r\n    const xRef = d3.select(xAxisRef.current);\r\n    const yRef = d3.select(yAxisRef.current);\r\n    xAxis.scale(xScale).ticks(d3.timeDay.every(2));\r\n    if (yScale.theType === 'LOG') {\r\n      // appended to yScale in lineGraph\r\n\r\n      yAxis.scale(yScale).ticks(10, ',.0f');\r\n    } else {\r\n      yAxis.scale(yScale).ticks(20);\r\n    }\r\n\r\n    //= scaleSymlog handles values below zero but I can't figure out how to get the ticks to behave. Below moves some of them to the right of the graph\r\n    // if (yScale.theType === 'LOG') { // appended to yScale in lineGraph\r\n    //   yAxis\r\n    //     .scale(yScale)\r\n    //     .ticks(10, ',.0f')\r\n    //     .tickFormat((d, i, textLabels) => {\r\n    //       // transform some of the labels to the right cause o' clutter see global app.css for .dodgyTransformClutterLogScaleLabels\r\n\r\n    //       textLabels.map((textLabel, i) => {\r\n    //         if (i % 2 !== 0) {\r\n    //           return (textLabel.classList.value =\r\n    //             'dodgyTransformClutterLogScaleLabels');\r\n    //         }\r\n    //         return textLabel;\r\n    //       });\r\n    //       return d;\r\n    //     });\r\n    // }\r\n\r\n    xRef.call(xAxis.tickSize(xTickWidth));\r\n    yRef.call(yAxis.tickSize(yTickWidth));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <g\r\n        ref={xAxisRef}\r\n        className={classes.axisGroupX}\r\n        transform={`translate(0,${dimensions.height - dimensions.margin.top})`}\r\n      ></g>\r\n      <g\r\n        ref={yAxisRef}\r\n        className={classes.axisGroupY}\r\n        transform={`translate(${dimensions.margin.left}, 0)`}\r\n      ></g>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Axis;\r\n","import React from 'react';\r\n\r\nconst YAxisLabel = ({ text, yClass, height, margin }) => {\r\n  return (\r\n    <text\r\n      fill=\"var(--white)\" // for dark graph theme\r\n      x={-Math.abs(height -margin.bottom)}\r\n      y=\"12\"\r\n      style={{ transform: 'rotate(-90deg)', fontSize: '1rem', fontWeight:700 }}\r\n      className={yClass}\r\n    >\r\n      {text}\r\n    </text>\r\n  );\r\n};\r\n\r\nexport default YAxisLabel;\r\n","import React, { useState } from 'react';\r\n\r\nconst HoverRect = ({\r\n  rect,\r\n  attr, // the actual data (from api attributes:{})\r\n  handleHoverDate,\r\n  handleHoverLeaveDate,\r\n  xAxisAttribute, // name of 'date' field - Date / StatisticsProfileDate\r\n  handleTextBox,\r\n  selected,\r\n  date,\r\n  selectRect,\r\n}) => {\r\n \r\n  const [isHovered, setIsHovered] = useState(false);\r\n  \r\n  const localHandleHover = (e) => {\r\n    setIsHovered(true);\r\n    handleHoverDate(e, attr); \r\n  };\r\n  \r\n  const localHandleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n    handleHoverLeaveDate(e);\r\n  };\r\n\r\n  const localHandleTextBox = (attr) => {\r\n    selectRect(date);\r\n    handleTextBox(attr, xAxisAttribute);\r\n  };\r\n\r\n  return (\r\n    <rect\r\n      key={rect.key}\r\n      onMouseEnter={(e) =>\r\n        localHandleHover(e)\r\n      }\r\n      onMouseLeave={(e) => localHandleHoverLeave(e)}\r\n      x={rect.xOffset}\r\n      y={rect.y}\r\n      width={rect.rectWidth}\r\n      height={rect.height}\r\n      fill=\"var(--white)\" // for dark graph theme\r\n      style={{ transition: 'all 0.005s linear', cursor: 'pointer' }}\r\n      opacity={`${isHovered || selected ? '0.2' : '0'}`}\r\n      onClick={() => localHandleTextBox(attr)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default HoverRect;\r\n","import React, { useState } from 'react';\r\nimport HoverRect from './hoverRect';\r\n\r\nconst HoverRectangles = ({\r\n  graphData,\r\n  dimensions,\r\n  xScale,\r\n  handleHoverDate,\r\n  xAxisAttribute,\r\n  handleHoverLeaveDate,\r\n  handleTextBox,\r\n}) => {\r\n\r\n  const [selectedRectDate, setSelectedRectDate] = useState('');\r\n  const { width, height, margin } = dimensions;\r\n\r\n  return graphData.length\r\n    ? graphData.map((attr, i) => {\r\n        const graphWidth = width - margin.left - margin.right;\r\n        const rectWidth = graphWidth / graphData.length;\r\n        const x = xScale(attr[xAxisAttribute]);\r\n        const xOffset = x - rectWidth / 2;\r\n        const rect = {\r\n          x: x,\r\n          y: margin.top,\r\n          graphWidth,\r\n          rectWidth,\r\n          height: height - margin.bottom,\r\n          xOffset,\r\n          key: `${graphData.fieldName}-${i}`,\r\n\r\n          selected:\r\n            selectedRectDate === attr[xAxisAttribute]\r\n              ? true\r\n              : false,\r\n          date: attr[xAxisAttribute],\r\n        };\r\n        return x ? (\r\n          <HoverRect\r\n            rect={rect}\r\n            attr={attr}\r\n            key={attr[xAxisAttribute]}\r\n            handleHoverLeaveDate={handleHoverLeaveDate}\r\n            handleHoverDate={handleHoverDate}\r\n            handleTextBox={handleTextBox}\r\n            xAxisAttribute={xAxisAttribute}\r\n            selectRect={setSelectedRectDate}\r\n            selected={rect.selected}\r\n            date={rect.date}\r\n          />\r\n        ) : null;\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default HoverRectangles;\r\n","import React from 'react';\r\nimport classes from './boringButton.module.css';\r\n\r\nconst BoringButton = ({ config, onClick, children, overRideStyle }) => {\r\n  const {\r\n    background,\r\n    borderRadius,\r\n    color,\r\n    border,\r\n    fontWeight,\r\n    fontSize,\r\n    padding,\r\n    outline,\r\n    minWidth,\r\n    position,\r\n    right,\r\n    left,\r\n    top,\r\n    bottom,\r\n  } = config || {};\r\n\r\n  const theStyle = () => {\r\n    return {\r\n      background: `${background ? background : 'var(--blue)'} `,\r\n      borderRadius: `${borderRadius ? borderRadius : '0.4rem'}`,\r\n      color: `${color ? color : 'var(--white)'}`,\r\n      border: `${border ? border : 'none'}`,\r\n      fontWeight: `${fontWeight ? fontWeight : '700'}`,\r\n      fontSize: `${fontSize ? fontSize : '0.6rem'}`,\r\n      padding: `${padding ? padding : '0.5rem 1rem'}`,\r\n      outline: `${outline ? outline : 'none'}`,\r\n      minWidth: `${minWidth ? minWidth : '5rem'}`,\r\n      position: `${position ? position : ''}`,\r\n      right: `${right ? right : ''}`,\r\n      left: `${left ? left : ''}`,\r\n      top: `${top ? top : ''}`,\r\n      bottom: `${bottom ? bottom : ''}`,\r\n      transition: 'all 200ms ease-out'\r\n    };\r\n  };\r\n\r\n  return (\r\n    <button className={classes.boringButton} style={{ ...theStyle(), ...overRideStyle }} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default BoringButton;\r\n","import React, { useState, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './lineGraphDaily2.module.css';\r\nimport Axis from './axis';\r\nimport YAxisLabel from '../../../UI/Graphs/yAxisLabel';\r\nimport Line from './line';\r\nimport { useStore } from '../../../Store/store';\r\nimport HoverRectangles from '../../../UI/Graphs/HoverRectangles/hoverRectangles';\r\nimport BoringButton from '../../../UI/Buttons/boringButton';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 50,\r\n    right: 50,\r\n    top: 50,\r\n    bottom: 50,\r\n  },\r\n  width: 800,\r\n  height: 600,\r\n};\r\nconst { margin, width, height } = dimensions;\r\nconst LineGraphDaily = ({ graphId }) => {\r\n  const dispatch = useStore(false)[1];\r\n  const dailyData = useStore()[0].dailyGraphsStore;\r\n\r\n  const daily = dailyData.filter((d) => d.id === graphId)[0]; //should be called graph\r\n\r\n  const [selectLogScale, setSelectLogScale] = useState(true);\r\n\r\n  const svgRef = useRef(null);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverColor, setHoverColor] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n\r\n  const calculateYExtentOfSelectedAttributes = () => {\r\n    // get yScale\r\n    const getExtentsForAllSelectedAttributes = () => {\r\n      const extents = daily.selectedAttributeNames.map((attr) => {\r\n        return d3.extent(daily.all, (d) => d[attr]);\r\n      });\r\n      return extents;\r\n    };\r\n    const selectedExtents = getExtentsForAllSelectedAttributes();\r\n    const maxValue = selectedExtents.map((h) =>\r\n      Math.max(...selectedExtents.map((h) => h[1]))\r\n    )[0];\r\n    const minValue = selectedExtents.map((h) =>\r\n      Math.min(...selectedExtents.map((h) => h[0]))\r\n    )[0];\r\n    const yExtent = [minValue, maxValue];\r\n    return yExtent;\r\n  };\r\n\r\n  const getYScale = () => {\r\n    const getYExtent = () => {\r\n      let extent = calculateYExtentOfSelectedAttributes();\r\n      // logScale can't deal with <= 0\r\n      if (selectLogScale && extent[0] <= 0) {\r\n        extent[0] = 1;\r\n      }\r\n      return extent;\r\n    };\r\n    const yExtent = getYExtent();\r\n    if (selectLogScale) {\r\n      const yScale = d3\r\n        .scaleLog()\r\n        // .scaleSymlog() accepts values below zero but causes more trouble than it's worth\r\n        .domain(yExtent)\r\n        .clamp(true)\r\n        .range([height - margin.top, margin.bottom])\r\n        .nice();\r\n      yScale.theType = 'LOG'; // need this for nice axis (axis.js)\r\n      return yScale;\r\n    } else {\r\n      const yScale = d3\r\n        .scaleLinear()\r\n        .domain(yExtent)\r\n        .clamp(true)\r\n        .range([height - margin.top, margin.bottom]);\r\n      yScale.theType = 'LINEAR'; // need this for nice axis\r\n      return yScale;\r\n    }\r\n  };\r\n\r\n  const getXExtent = () => {\r\n    return d3.extent(daily.all, (d) => d.Date);\r\n  };\r\n\r\n  const getXScale = () => {\r\n    const xExtent = getXExtent();\r\n    const xScale = d3\r\n      .scaleTime()\r\n      .domain([xExtent[0], xExtent[1]])\r\n      .range([margin.left, width - margin.right]);\r\n    return xScale;\r\n  };\r\n\r\n  const colorScale = d3\r\n    .scaleSequential()\r\n    .domain([0, 100])\r\n    .interpolator(d3.interpolateRainbow);\r\n\r\n  const handleTextBox = (data, dateFieldName) => {\r\n    if (!data || !dateFieldName) return;\r\n    const dateToSelect = data[dateFieldName];\r\n    dispatch('SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA', dateToSelect);\r\n  };\r\n\r\n  const handleHover = (e, color) => {\r\n    setHoverInfo(e.target.id);\r\n    setHoverColor(color);\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n  const handleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n  };\r\n  //============\r\n  const handleHoverDate = (e, info) => {\r\n    // daily data date attr is 'Date'\r\n    // statistics profile data date attr is 'StatisticsProfileDate'\r\n    let dateFieldName = 'Date';\r\n    if (!info[dateFieldName]) {\r\n      dateFieldName = 'Date';\r\n    }\r\n    setHoverInfo(new Date(info[dateFieldName]).toString().substring(0, 10));\r\n    setHoverColor('var(--lightBlack)');\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeaveDate = () => {\r\n    setIsHovered(false);\r\n  };\r\n  //==========\r\n  const getColor = (fieldName) => {\r\n    const check = daily.avail.filter((d) => d.fieldName === fieldName);\r\n    if (check.length && check[0].color) {\r\n      return check[0].color;\r\n    }\r\n\r\n    return 'var(--blue)';\r\n  };\r\n  const toggleLogScale = () => {\r\n    const currentLog = selectLogScale;\r\n    setSelectLogScale(!currentLog);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <BoringButton onClick={toggleLogScale} config={{position: 'absolute', right: '0', top: '-1rem', padding: '0.25rem 0.5rem', background:'var(--white)', color:'var(--lightBlack)'}}>\r\n        {selectLogScale ? 'Use Linear Scale' : 'Use Log Scale'}\r\n      </BoringButton> */}\r\n      <BoringButton\r\n        onClick={toggleLogScale}\r\n        overRideStyle={{\r\n          background: `${selectLogScale ? 'var(--lightBlack)' : 'var(--covidGreen)'}`,\r\n          color: `${selectLogScale ? 'var(--covidGreen)' : 'var(--lightBlack)'}`,\r\n          borderRadius: ' 0.4rem',\r\n          border: 'none',\r\n          fontWeight: '800',\r\n          letterSpacing: '0.1rem',\r\n          textTransform: 'uppercase',\r\n          fontSize: '0.6rem',\r\n          padding: '0.5rem 1rem',\r\n          outline: 'none',\r\n          minWidth: '5rem',\r\n          display: 'grid',\r\n          alignSelf: 'center',\r\n          justifySelf: 'center',\r\n        }}\r\n      >\r\n        {selectLogScale ? 'Use Linear Scale' : 'Use Log Scale'}\r\n      </BoringButton>\r\n      {isHovered && hoverPosition.length ? (\r\n        <div\r\n          style={{\r\n            opacity: `${isHovered ? '1' : '0'}`,\r\n            position: 'fixed',\r\n            left: `${hoverPosition[0]}px`,\r\n            top: `${hoverPosition[1]}px`,\r\n            background: `${hoverColor}`,\r\n            color: 'var(--white)',\r\n            padding: '0.5rem 1rem',\r\n            borderRadius: '0.4rem',\r\n            fontSize: '0.6rem',\r\n          }}\r\n        >\r\n          {hoverInfo}\r\n        </div>\r\n      ) : null}\r\n\r\n      <svg\r\n        style={{ maxWidth: '100%' }}\r\n        ref={svgRef}\r\n        viewBox=\"0 0 800 600\"\r\n        width={width}\r\n      >\r\n        {daily && daily.all.length ? (\r\n          <>\r\n            <Axis\r\n              dimensions={dimensions}\r\n              xScale={getXScale()}\r\n              yScale={getYScale()}\r\n              selectLogScale={selectLogScale}\r\n            />\r\n\r\n            <YAxisLabel\r\n              text={daily.xAxisLabel}\r\n              yClass={classes.yLabel}\r\n              height={height}\r\n              margin={margin}\r\n            />\r\n\r\n            <HoverRectangles\r\n              graphData={daily.all}\r\n              dimensions={dimensions}\r\n              xScale={getXScale()}\r\n              xAxisAttribute={daily.xAxisAttribute}// todo\r\n              handleHoverLeaveDate={handleHoverLeaveDate}\r\n              handleHoverDate={handleHoverDate}\r\n              handleTextBox={handleTextBox}\r\n            />\r\n           { daily.selectedAttributeNames.map((fieldName) => {\r\n              return (\r\n                <Line\r\n                  graphData={daily.all}\r\n                  i=\"0\"\r\n                  key={fieldName}\r\n                  handleHover={handleHover}\r\n                  handleHoverLeave={handleHoverLeave}\r\n                  xScale={getXScale()}\r\n                  yScale={getYScale()}\r\n                  colorScale={colorScale}\r\n                  fieldName={fieldName}\r\n                  xScaleAttribute=\"Date\"\r\n                  color={getColor(fieldName)}\r\n        \r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        ) : null}\r\n\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineGraphDaily;\r\n","import React from 'react';\r\nimport classes from './attributeBtns.module.css'\r\n\r\nconst AttributeBtns = ({availableAttributes, handleSelectData, graphIndex}) => {\r\n\r\n  return<div className={classes.btnGroupWrap}>\r\n  { availableAttributes.map((a) => (\r\n    <button\r\n      key={a.fieldName}\r\n      id={a.name}\r\n      name={a.fieldName}\r\n      selected={a.selected}\r\n      style={{\r\n        opacity: `${!a.selected ? '0.8' : `1`}`,\r\n        background: `${a.selected ? `${a.color}` : `var(--gray)`}`,\r\n        border: `${\r\n          !a.selected ? `0.1rem solid ${a.color}` : `${a.color} `\r\n        }`,\r\n        color: `${a.selected && a.color === 'var(--white)' ? `var(--lightBlack)` : `var(--white)`}`,\r\n        outline: 'none',\r\n      }}\r\n      onClick={(e) => handleSelectData(e, graphIndex)}\r\n    >\r\n      {a.name}\r\n    </button>\r\n  ))\r\n    };\r\n  </div>\r\n}\r\n\r\nexport default AttributeBtns;","import React, { useState } from 'react';\r\nimport classes from './textBox.module.css';\r\n\r\nconst TextBox = ({ allData }) => {\r\n  const [daily] = useState(allData);\r\n\r\n  const dailyWithTitle = () => {\r\n    return daily.selectedAttributeNames.map((name) => {\r\n      const title = daily.avail.filter((a) => a.fieldName === name)[0].name;\r\n      const color = daily.avail.filter((a) => a.fieldName === name)[0].color;\r\n\r\n      const ans = {};\r\n\r\n      ans[name] = daily.selectedDateData[name];\r\n      ans.color = color;\r\n      ans.title = title;\r\n      ans.fieldName = name;\r\n      ans.info = daily.selectedDateData[name];\r\n\r\n      return ans;\r\n    });\r\n  };\r\n\r\n  const RightSpan = ({ text, fieldName, color }) => {\r\n    let defaultColor = 'var(--blue)';\r\n\r\n    if (color) defaultColor = color;\r\n    return (\r\n      <span\r\n        style={{ \r\n          background: `${defaultColor}`,\r\n          color: `${defaultColor === 'var(--white)' ? 'var(--black)' : ''}`\r\n         }}\r\n        className={classes.rightSpan}\r\n      >\r\n        {text || ''}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderRightSpans = () => {\r\n    const withTitle = dailyWithTitle();\r\n\r\n    return withTitle.map((d) => {\r\n      return (\r\n        <div className={classes.infoWrap} key={d.fieldName}>\r\n          <p>{d.title}: </p>\r\n          <RightSpan\r\n            text={d.info}\r\n            color={d.color}\r\n            fieldName={d.fieldName}\r\n          ></RightSpan>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return daily && daily.selectedDateData ? (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          {new Date(daily.selectedDateData[daily.xAxisAttribute])\r\n            .toString()\r\n            .substring(0, 16)}\r\n        </h3>\r\n      </div>\r\n      {renderRightSpans()}\r\n    </div>\r\n  ) : (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          <br />\r\n          <span className={classes.small}></span>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport configureDailyGraphsStore from './dailyGraphs-store';\r\nimport { useStore } from '../../Store/store';\r\nimport SectionWrap from '../../UI/Sections/SectionWrap/sectionWrap';\r\nimport SectionWrapper from '../../UI/Sections/SectionWrapper/sectionWrapper';\r\nimport SectionMain from '../../UI/Sections/SectionMain/sectionMain';\r\nimport SectionSide from '../../UI/Sections/SectionSide/sectionSide';\r\nimport SectionHeader from '../../UI/Sections/SectionHeader/sectionHeader';\r\nimport LineGraphDaily from './LineGraphDaily/lineGraphDaily';\r\n\r\nimport AttributeBtns from '../../UI/Buttons/AttributeBtns/attributeBtns';\r\nimport TextBox from './TextBox/textBox';\r\nimport classes from './dailyGraphs.module.css'\r\nimport ErrorComp from '../../UI/error';\r\n\r\nconfigureDailyGraphsStore();\r\n\r\n// Daily data only (no Statistics Profile fields) for each day.\r\nconst dailyStatsSoFarUrl = `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/CovidStatisticsProfileHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=Date,ConfirmedCovidCases,TotalConfirmedCovidCases,ConfirmedCovidDeaths,TotalCovidDeaths,ConfirmedCovidRecovered,TotalCovidRecovered,FID&returnGeometry=false&outSR=4326&f=json`;\r\n\r\nconst DailyGraphs = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const dispatch = useStore()[1];\r\n  const graphs = useStore()[0].dailyGraphsStore;\r\n\r\n  const getDailyStats = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get(dailyStatsSoFarUrl);\r\n      return response.data.features;\r\n    } catch (e) {\r\n      setIsLoading(false);\r\n      setIsError(true);\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n      try {\r\n        const data = await getDailyStats();\r\n\r\n        dispatch('SET_ALL_DAILY_GRAPHS', data);\r\n        dispatch('SET_DAILY_GRAPHS_SELECTED_DATE_AND_DATA');\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleSelectData = (e, graphId) => {\r\n    const fieldName = e.target.name;\r\n    dispatch('SELECT_DAILY_GRAPHS_ATTRS', { fieldName, graphId });\r\n  };\r\n\r\n  return graphs && graphs.length\r\n    ? graphs.map((graph, index) => (\r\n      <SectionWrapper key={index}>\r\n        <SectionWrap>\r\n          <SectionSide>\r\n            { isError ? <ErrorComp msg=\"Could not load data.\" /> : (\r\n              <>\r\n              <SectionHeader\r\n              title={graph.sectionName}\r\n              subtitle=\"\"\r\n              description={graph.description}\r\n            />\r\n\r\n            <div className={classes.forBreakPointBetween900And300}>\r\n              {!isLoading && graph.all.length ? (\r\n                <TextBox allData={graph} />\r\n              ) : (\r\n                'Loading...'\r\n              )}\r\n\r\n              <AttributeBtns\r\n                availableAttributes={graph.avail}\r\n                graphIndex={graph.id}\r\n                handleSelectData={handleSelectData}\r\n              />\r\n            </div>\r\n            </>\r\n            ) }\r\n            \r\n          </SectionSide>\r\n          <SectionMain>\r\n            {!isLoading && graph && graph.all.length ? (\r\n              <LineGraphDaily\r\n                graphId={graph.id}\r\n              />\r\n            ) : (\r\n              'Loading...'\r\n            )}\r\n          </SectionMain>\r\n        </SectionWrap>\r\n        </SectionWrapper>\r\n      ))\r\n    : null;\r\n};\r\n\r\nexport default DailyGraphs;\r\n","import React from 'react';\r\nimport Layout from '../layout';\r\nimport Summary from '../Summary/summary';\r\nimport ExtraInfo from './ExtraInfo/extraInfo';\r\nimport DailyGraphs from '../DailyGraphs/dailyGraphs';\r\n\r\nconst DailyPage = () => (\r\n  <Layout>\r\n    <Summary />\r\n    <DailyGraphs />\r\n    <ExtraInfo />\r\n  </Layout>\r\n);\r\n\r\nexport default DailyPage;\r\n","import React from 'react';\r\nimport classes from './header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nconst Header = (props) => (\r\n  <header className={classes.header}>\r\n    <h1>Ireland Coronavirus Stats</h1>\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <NavLink exact to=\"/\" activeClassName={classes.navActive}>\r\n            Home\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to=\"/stats\" activeClassName={classes.navActive}>\r\n            Profiles\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink exact to=\"/counties\" activeClassName={classes.navActive}>\r\n            Counties\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport * as d3 from 'd3';\r\n\r\nconst Lines = ({data, xScale, yScale}) => {\r\n    const ans = data.map((graphData) => {\r\n      if (graphData.data.length && graphData.selected) {\r\n        const line = d3\r\n          .line()\r\n          // .x((d) => xScale(d.attributes.StatisticsProfileDate))\r\n          .x((d) => xScale(d[graphData.xAxisAttribute]))\r\n          .y((d) => yScale(d[graphData.fieldName]));\r\n  \r\n        const path = line(graphData.data);\r\n        return  (\r\n          <path\r\n            key={graphData.fieldName}\r\n            d={path}\r\n            fill=\"none\"\r\n            stroke={graphData.color}\r\n            strokeWidth=\"2px\"\r\n          ></path>\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n    return ans;\r\n  \r\n  \r\n}\r\n\r\nexport default Lines;","import React from 'react';\r\nimport classes from './circles.module.css';\r\n\r\nconst Circles = ({\r\n  data,\r\n  yScale,\r\n  xScale,\r\n  handleTextBox,\r\n  handleHover,\r\n  handleHoverLeave,\r\n}) => {\r\n  return data.map((graphData) => {\r\n    return graphData.data.length && graphData.selected\r\n      ? graphData.data.map((attr, i) => {\r\n          const y = yScale(attr[graphData.fieldName]);\r\n          const x = xScale(attr[graphData.xAxisAttribute]);\r\n          return x && y && !graphData.useDifferentShape ? (\r\n            <circle\r\n              key={`${graphData.fieldName}-${i}`}\r\n              className={classes.lineGraphCircle}\r\n              onClick={() => handleTextBox(attr, graphData.xAxisAttribute)}\r\n              onMouseEnter={(e) => handleHover(e, attr, graphData)}\r\n              onMouseLeave={(e) => handleHoverLeave(e)}\r\n              cx={x}\r\n              cy={y}\r\n              r=\"0.2rem\"\r\n              fill={graphData.color}\r\n            ></circle>\r\n          ) : x && y && graphData.useDifferentShape ? (\r\n            <rect\r\n              key={`${graphData.fieldName}-${i}`}\r\n              className={classes.lineGraphCircle}\r\n              onClick={() => handleTextBox(attr, graphData.xAxisAttribute)}\r\n              onMouseEnter={(e) => handleHover(e, attr, graphData)}\r\n              onMouseLeave={(e) => handleHoverLeave(e)}\r\n              x={x}\r\n              y={y}\r\n              rx=\"0.1rem\"\r\n              width=\"0.2rem\"\r\n              height=\"0.5rem\"\r\n              fill={graphData.color}\r\n            ></rect>\r\n          ) : null;\r\n        })\r\n      : null;\r\n  });\r\n};\r\n\r\nexport default Circles;\r\n","import React from 'react';\r\n\r\nconst TinyToolTip = ({ isHovered, hoverPosition, hoverColor, children }) => {\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        opacity: `${isHovered ? '1' : '0'}`,\r\n        position: 'fixed',\r\n        left: `${hoverPosition[0]}px`,\r\n        top: `${hoverPosition[1]}px`,\r\n        background: `${hoverColor}`,\r\n        color: 'var(--white)',\r\n        padding: '0.5rem 1rem',\r\n        borderRadius: '0.4rem',\r\n        fontSize: '0.6rem',\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TinyToolTip;\r\n","import React, { useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './axis.module.css';\r\n\r\nconst Axis = ({ dimensions, xScale, yScale, tickNumDays }) => {\r\n\r\n  const xAxisRef = useRef(null);\r\n  const yAxisRef = useRef(null);\r\n  const xAxis = d3.axisBottom();\r\n  const yAxis = d3.axisLeft();\r\n  const yTickWidth = -Math.abs(\r\n    dimensions.width - dimensions.margin.right - dimensions.margin.left\r\n  );\r\n  const xTickWidth = -Math.abs(\r\n    dimensions.height - dimensions.margin.top - dimensions.margin.bottom + 10\r\n  );\r\n\r\n  const doAxis = () => {\r\n    const xRef = d3.select(xAxisRef.current);\r\n    const yRef = d3.select(yAxisRef.current);\r\n    xAxis.scale(xScale).ticks(d3.timeDay.every(tickNumDays || 1));\r\n    // xAxis.scale(xScale).ticks(d3.timeDay);\r\n    yAxis.scale(yScale).ticks(20, ',.1s');\r\n    xRef.call(xAxis.tickSize(xTickWidth));\r\n    yRef.call(yAxis.tickSize(yTickWidth));\r\n  };\r\n  doAxis();\r\n\r\n  return (\r\n    <>\r\n      <g\r\n        className={classes.axisGroupX}\r\n        ref={xAxisRef}\r\n        transform={`translate(0,${\r\n          dimensions.height - dimensions.margin.top + 10\r\n        })`}\r\n      ></g>\r\n      <g\r\n        className={classes.axisGroupY}\r\n        style={{ stroke: 'none' }}\r\n        ref={yAxisRef}\r\n        transform={`translate(${dimensions.margin.left}, 0)`}\r\n      ></g>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Axis;\r\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\nimport Lines from './lines';\r\nimport Circles from './circles';\r\nimport HoverRectangles from '../../../UI/Graphs/HoverRectangles/hoverRectangles';\r\nimport TinyTooltip from '../../../UI/Tooltips/TinyTooltip';\r\nimport YAxisLabel from '../../../UI/Graphs/yAxisLabel';\r\nimport Axis from '../../../UI/Graphs/axis';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 50,\r\n    right: 50,\r\n    top: 50,\r\n    bottom: 50,\r\n  },\r\n  width: 800,\r\n  height: 600,\r\n};\r\nconst { margin, width, height } = dimensions;\r\n\r\nconst LineGraph = ({ theData, handleTextBox, yAxisLabel }) => {\r\n  const [data, setData] = useState(theData);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverColor, setHoverColor] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n\r\n  const svgRef = useRef(null);\r\n\r\n  // Prevent lines/circles spilling over from the start of graph. Use selected attrubute with the earliest non null values for the date.\r\n  const xExtent = useMemo(\r\n    function calcXExtent() {\r\n      const selected = data.filter((d) => d.selected);\r\n\r\n      const getExtentsForAllSelectedAttributes = () => {\r\n        const extents = selected.map((attr) => {\r\n          return d3.extent(attr.data, (d) => d.StatisticsProfileDate);\r\n        });\r\n        return extents;\r\n      };\r\n      const selectedExtents = getExtentsForAllSelectedAttributes();\r\n      const maxValue = selectedExtents.map((h) =>\r\n        Math.max(...selectedExtents.map((h) => h[1]))\r\n      )[0];\r\n      const minValue = selectedExtents.map((h) =>\r\n        Math.min(...selectedExtents.map((h) => h[0]))\r\n      )[0];\r\n      const xExtent = [minValue, maxValue];\r\n\r\n      return xExtent;\r\n    },\r\n    [data]\r\n  );\r\n\r\n  useEffect(() => {\r\n    setData(theData);\r\n  }, [theData]);\r\n\r\n  // Switched to log scale, yExtent is hardcoded\r\n  // const yExtent = d3.extent(data[0].data, (d) => d.attributes.CovidCasesConfirmed);\r\n\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([xExtent[0], xExtent[1]])\r\n    .range([margin.left, width - margin.right]);\r\n\r\n  const yScale = d3\r\n    .scaleLog()\r\n    .domain([1, 100000])\r\n    .clamp(true)\r\n    .range([height - margin.top, margin.bottom])\r\n    .nice();\r\n\r\n  const handleHoverDate = (e, info) => {\r\n    // daily data date attr is 'Date' (not relevant anymore...)\r\n    // statistics profile data date attr is 'StatisticsProfileDate'\r\n    // This should not be hardcoded, (theData[?].xAxisAttribute). I'm leaving it cause it's just easier.\r\n    let dateFieldName = 'StatisticsProfileDate';\r\n    if (!info[dateFieldName]) {\r\n      dateFieldName = 'Date';\r\n    }\r\n    setHoverInfo(new Date(info[dateFieldName]).toString().substring(0, 10));\r\n    setHoverColor('var(--lightBlack)');\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeaveDate = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  const handleHover = (e, info, attr) => {\r\n    setHoverInfo(`${attr.name}: ${info[attr.fieldName]}`);\r\n    setHoverColor(attr.color);\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isHovered && hoverPosition.length ? (\r\n        <TinyTooltip\r\n          isHovered={isHovered}\r\n          hoverPosition={hoverPosition}\r\n          hoverColor={hoverColor}\r\n        >\r\n          {hoverInfo}\r\n        </TinyTooltip>\r\n      ) : null}\r\n\r\n      <svg\r\n        ref={svgRef}\r\n        viewBox=\"0 20 800 600\"\r\n        width={width}\r\n        style={{ maxWidth: '100%' }}\r\n      >\r\n        <Axis\r\n          dimensions={dimensions}\r\n          xScale={xScale}\r\n          yScale={yScale}\r\n          tickNumDays={2}\r\n        />\r\n        {yAxisLabel ? (\r\n          <YAxisLabel text={yAxisLabel} height={height} margin={margin} />\r\n        ) : null}\r\n\r\n        <Lines data={data} xScale={xScale} yScale={yScale} />\r\n\r\n        {data && data.length ? (\r\n          <HoverRectangles\r\n            graphData={data[0].data}\r\n            dimensions={dimensions}\r\n            xAxisAttribute={data[0].xAxisAttribute}\r\n            xScale={xScale}\r\n            handleHoverLeaveDate={handleHoverLeaveDate}\r\n            handleHoverDate={handleHoverDate}\r\n            handleTextBox={handleTextBox}\r\n          />\r\n        ) : null}\r\n\r\n        <Circles\r\n          data={data}\r\n          yScale={yScale}\r\n          xScale={xScale}\r\n          handleTextBox={handleTextBox}\r\n          handleHover={handleHover}\r\n          handleHoverLeave={handleHoverLeave}\r\n        />\r\n      </svg>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import React from 'react';\r\nimport classes from './textBox.module.css';\r\nimport LoadingComp from '../../../UI/loading';\r\n\r\nconst getKeysValues = (data) => {\r\n  return data.map((d) => {\r\n    return {\r\n      name: d.name,\r\n      fieldName: d.fieldName,\r\n      value: d.selectedData.map((w) => {\r\n        return w[d.fieldName];\r\n      })[0],\r\n      color: d.color,\r\n      xAxisAttribute: d.xAxisAttribute,\r\n    };\r\n  });\r\n};\r\n\r\nconst TextBox = ({\r\n  selectedDateData,\r\n  selectedDate,\r\n  isLoading,\r\n  numAvailableAttrs,\r\n}) => {\r\n\r\n  const moreManagableVersionOfSelectedData = getKeysValues(selectedDateData);\r\n\r\n  const RightSpan = ({ text, color }) => {\r\n    return (\r\n      <span\r\n        style={{\r\n          background: `${color}`,\r\n          color: `${color === 'var(--white)' ? 'var(--black)' : ''}`,\r\n        }}\r\n        className={classes.rightSpan}\r\n      >\r\n        {text}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classes.profileStatsTextBox}\r\n      // Initial height of box needs to be ok to fit all possible '.infoWraps' so there's no jumping around the page when things are selected. Use numAvailableAttrs\r\n      style={{ minHeight: `${(numAvailableAttrs + 1)*1.8}rem` }}\r\n    >\r\n      {isLoading ? (\r\n        <LoadingComp msg=\"Loading...\" />\r\n      ) : (\r\n        <>\r\n          <div className={classes.infoWrap}>\r\n            <h3>\r\n              {selectedDate\r\n                ? new Date(selectedDate).toString().substring(0, 16)\r\n                : ''}\r\n            </h3>\r\n          </div>\r\n          {moreManagableVersionOfSelectedData\r\n            ? moreManagableVersionOfSelectedData.map((d, i) => {\r\n                return (\r\n                  <div className={classes.infoWrap} key={i}>\r\n                    <p> {d.name} </p>\r\n                    <RightSpan color={d.color} text={d.value} />\r\n                  </div>\r\n                );\r\n              })\r\n            : null}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import axios from 'axios';\r\n\r\nexport const removeNulls = (resp, fieldName) => {\r\n  const noNulls = resp.filter((m) => {\r\n    return m.attributes[fieldName] !== null;\r\n  });\r\n  return noNulls;\r\n};\r\n\r\n// export const removeFromNestedAttributes = (data) => {\r\n//   return data.map((d) => {\r\n//     let obj = {};\r\n//     for (const key in d.attributes) {\r\n//       obj[key] = d.attributes[key];\r\n//     }\r\n//     return obj;\r\n//   });\r\n// };\r\n\r\nexport const successfullyGotDataForEachSelectedAttr = (sectionAvail) => {\r\n  const selected = sectionAvail.map((attr) => (attr.selected ? true : false));\r\n  const fetched = sectionAvail.map((attr) => (attr.data.length ? true : false));\r\n\r\n  const selectedButDataNotFetched = selected.map((s, i) => {\r\n    if (s && !fetched[i]) return false;\r\n    return true;\r\n  });\r\n\r\n  // ie fail if any false\r\n  return selectedButDataNotFetched.filter((w) => !w).length === 0;\r\n};\r\n\r\nexport const baseUrl = (specificUrlPart) =>{\r\n  return `https://services1.arcgis.com/eNO7HHeQ3rUcBllm/arcgis/rest/services/CovidStatisticsProfileHPSCIrelandOpenData/FeatureServer/0/query?where=1%3D1&outFields=${specificUrlPart}&returnGeometry=false&outSR=4326&f=json`;\r\n}\r\nexport const getOne = async (part) => {\r\n  try {\r\n    const response = await axios.get(baseUrl(part));\r\n    return response.data.features;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n};","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport classes from './section.module.css';\r\n\r\nimport LineGraph from '../LineGraph/lineGraph';\r\nimport TextBox from '../TextBox/textBox';\r\nimport ErrorComp from '../../../UI/error';\r\nimport {\r\n  removeNulls,\r\n  successfullyGotDataForEachSelectedAttr,\r\n  getOne,\r\n} from './section-util';\r\nimport { sharedUtil } from '../../../util-functions';\r\n\r\nimport SectionWrap from '../../../UI/Sections/SectionWrap/sectionWrap';\r\nimport SectionSide from '../../../UI/Sections/SectionSide/sectionSide';\r\nimport SectionMain from '../../../UI/Sections/SectionMain/sectionMain';\r\nimport SectionHeader from '../../../UI/Sections/SectionHeader/sectionHeader';\r\nimport AttributeBtns from '../../../UI/Buttons/AttributeBtns/attributeBtns';\r\n\r\nconst Section = ({ section }) => {\r\n  const [sectionAvail, setSectionAvail] = useState(section.avail);\r\n  const [shouldUpdate, setShouldUpdate] = useState(true);\r\n  const [selectedDate, setSelectedDate] = useState('');\r\n  const [isError, setIsError] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const shouldCancel = useRef(false);\r\n\r\n  const getDataForEachSelected = useCallback(async (attr) => {\r\n    if (attr.selected && !attr.data.length) {\r\n      const features = await getOne(attr.urlPart);\r\n      if (features) {\r\n        // data is from the beginning of records but first few weeks are all null for Profile Stats\r\n        const filtered = removeNulls(features, attr.fieldName);\r\n        const flattened = sharedUtil.removeFromNestedAttributes(filtered);\r\n        attr.data = flattened;\r\n        return attr;\r\n      }\r\n    }\r\n    return attr; // always return a but check error below\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const getDataForEachSelectedCheckbox = async () => {\r\n        let sectionAvailCopy = sectionAvail;\r\n\r\n        sectionAvailCopy = await Promise.all(\r\n          sectionAvailCopy.map(getDataForEachSelected)\r\n        );\r\n\r\n        if (shouldCancel.current) return false;\r\n\r\n        return successfullyGotDataForEachSelectedAttr(sectionAvailCopy)\r\n          ? sectionAvailCopy\r\n          : false;\r\n      };\r\n\r\n      if (shouldUpdate) {\r\n        setIsLoading(true);\r\n        const ans = await getDataForEachSelectedCheckbox();\r\n\r\n        if (!ans) setIsError(true);\r\n\r\n        if (ans) {\r\n          setSectionAvail(ans);\r\n          const selectedSection = ans.find((s) => s.selected);\r\n\r\n          // default date to latest - first time only!\r\n          if (!selectedDate) {\r\n            setSelectedDate(\r\n              selectedSection.data[selectedSection.data.length - 1][\r\n                selectedSection.xAxisAttribute\r\n              ]\r\n            );\r\n          }\r\n          setShouldUpdate(false);\r\n        }\r\n        setIsLoading(false);\r\n      }\r\n    })();\r\n  }, [\r\n    shouldUpdate,\r\n    sectionAvail,\r\n    getDataForEachSelected,\r\n    isError,\r\n    selectedDate,\r\n  ]);\r\n\r\n  const handleTextBox = (data, dateFieldName) => {\r\n    if (!data || !dateFieldName) return;\r\n    setSelectedDate(data[dateFieldName]);\r\n  };\r\n\r\n  const renderLineGraph = () => {\r\n\r\n    if (!sectionAvail || !sectionAvail.length) {\r\n      return;\r\n    }\r\n    return (\r\n      <LineGraph\r\n        theData={sectionAvail}\r\n        yAxisLabel={section.yAxisLabel}\r\n        handleTextBox={handleTextBox}\r\n      />\r\n    );\r\n  };\r\n\r\n  const handleSelectData = (e) => {\r\n    if (isLoading) return;\r\n    const name = e.target.name;\r\n    const sectionUpdate = sectionAvail.map((a) => {\r\n      if (a.fieldName === name) {\r\n        a.selected = !a.selected;\r\n      }\r\n      return a;\r\n    });\r\n    setSectionAvail(sectionUpdate);\r\n\r\n    // Check if already have the data first\r\n    const haveData = (name) => {\r\n      const checkThis = sectionAvail.filter((s) => s.fieldName === name)[0];\r\n      return checkThis && checkThis.data.length ? false : true;\r\n    };\r\n    const needToGetData = haveData(name);\r\n\r\n    if (needToGetData && !isLoading) {\r\n      setShouldUpdate(true);\r\n    }\r\n  };\r\n\r\n  const getDataOnSelectedDate = () => {\r\n    const selected = sectionAvail.filter((d) => d.selected);\r\n\r\n    const onlyOnDate = selected.map((s) => {\r\n      const newData = s.data.filter((d) => {\r\n        return d[s.xAxisAttribute] === selectedDate;\r\n      });\r\n      s.selectedData = newData;\r\n      return s;\r\n    }, []);\r\n\r\n    return onlyOnDate;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isError ? (\r\n        <ErrorComp msg=\"Could not load data.\" />\r\n      ) : (\r\n        <SectionWrap>\r\n          <SectionSide>\r\n            <SectionHeader title={section.sectionName} />\r\n            <div className={classes.forBreakPointBetween900And300}>\r\n              {selectedDate && sectionAvail ? (\r\n                <TextBox\r\n                  isLoading={isLoading}\r\n                  selectedDate={selectedDate}\r\n                  selectedDateData={getDataOnSelectedDate()}\r\n                  numAvailableAttrs={section.avail.length}\r\n                />\r\n              ) : null}\r\n\r\n              <div className={classes.graphSectionBtnGroupWrap}>\r\n                <AttributeBtns\r\n                  availableAttributes={section.avail}\r\n                  handleSelectData={handleSelectData}\r\n                />\r\n              </div>\r\n            </div>\r\n          </SectionSide>\r\n          <SectionMain>{renderLineGraph()}</SectionMain>\r\n        </SectionWrap>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Section;\r\n","export  const sections = [\r\n  {\r\n    name: 'transmissionType',\r\n    sectionName: 'Transmission Type',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center. New data is released each evening and dates back to 12am two days previously.',\r\n    allUrl: `StatisticsProfileDate,CommunityTransmission,UnderInvestigation,CloseContact,CovidCasesConfirmed,TravelAbroad`,\r\n    xAxisAttribute: 'StatisticsProfileDate',\r\n    yAxisLabel: '#Cases',\r\n    avail: [\r\n      {\r\n        name: 'Community Transmission',\r\n        urlPart: `StatisticsProfileDate,CommunityTransmission`,\r\n        fieldName: 'CommunityTransmission',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Under Investigation',\r\n        urlPart: `StatisticsProfileDate,UnderInvestigation`,\r\n        fieldName: 'UnderInvestigation',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Close Contact',\r\n        urlPart: `StatisticsProfileDate,CloseContact`,\r\n        fieldName: 'CloseContact',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Travel Abroad',\r\n        urlPart: `StatisticsProfileDate,TravelAbroad`,\r\n        fieldName: 'TravelAbroad',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--white)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'hospitalisations',\r\n    sectionName: 'Hospitalisations',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases Hospitalised',\r\n    avail: [\r\n      {\r\n        name: 'Hospitalised',\r\n        urlPart: `StatisticsProfileDate,HospitalisedCovidCases`,\r\n        fieldName: 'HospitalisedCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Requiring ICU',\r\n        urlPart: `StatisticsProfileDate,RequiringICUCovidCases`,\r\n        fieldName: 'RequiringICUCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--white)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'genderProfiles',\r\n    sectionName: 'Gender Profiles',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases',\r\n    avail: [\r\n      {\r\n        name: 'Female',\r\n        urlPart: `StatisticsProfileDate,Female`,\r\n        fieldName: 'Female',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Male',\r\n        urlPart: `StatisticsProfileDate,Male`,\r\n        fieldName: 'Male',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Unknown',\r\n        urlPart: `StatisticsProfileDate,Unknown`,\r\n        fieldName: 'Unknown',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--white)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'ageProfiles',\r\n    sectionName: 'Age Profiles - Cases',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases in Age Group',\r\n    avail: [\r\n      {\r\n        name: 'Aged 65 and up',\r\n        urlPart: `StatisticsProfileDate,Aged65up,CovidCasesConfirmed`,\r\n        fieldName: 'Aged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--covidPink)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 55 to 64',\r\n        urlPart: `StatisticsProfileDate,Aged55to64,CovidCasesConfirmed`,\r\n        fieldName: 'Aged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 45 to 54',\r\n        urlPart: `StatisticsProfileDate,Aged45to54,CovidCasesConfirmed`,\r\n        fieldName: 'Aged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 35 to 44',\r\n        urlPart: `StatisticsProfileDate,Aged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'Aged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'var(--covidPurple)',\r\n        selected: false,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 25 to 34',\r\n        urlPart: `StatisticsProfileDate,Aged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'Aged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--covidGreen)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 15 to 24',\r\n        urlPart: `StatisticsProfileDate,Aged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'Aged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 5 to 14',\r\n        urlPart: `StatisticsProfileDate,Aged5to14,CovidCasesConfirmed`,\r\n        fieldName: 'Aged5to14',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 1 to 4',\r\n        urlPart: `StatisticsProfileDate,Aged1to4,CovidCasesConfirmed`,\r\n        fieldName: 'Aged1to4',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 1',\r\n        urlPart: `StatisticsProfileDate,Aged1,CovidCasesConfirmed`,\r\n        fieldName: 'Aged1',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--covidOrange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--white)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n\r\n  {\r\n    name: 'hospitalisedAgeProfiles',\r\n    sectionName: 'Age Profiles - Hospitalised',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Hospitalised in Age Group',\r\n    avail: [\r\n      {\r\n        name: 'Hospitalised Aged 65 and up',\r\n        urlPart: `StatisticsProfileDate,Aged65up,CovidCasesConfirmed,HospitalisedAged65up`,\r\n        fieldName: 'HospitalisedAged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--covidPink)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 55 to 64',\r\n        urlPart: `StatisticsProfileDate,Aged55to64,HospitalisedAged55to64, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 45 to 54',\r\n        urlPart: `StatisticsProfileDate,Aged45to54,HospitalisedAged45to54, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--covidBlue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 35 to 44',\r\n        urlPart: `StatisticsProfileDate,Aged35to44,HospitalisedAged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'var(--covidPurple)',\r\n        selected: false,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 25 to 34',\r\n        urlPart: `StatisticsProfileDate,Aged25to34,HospitalisedAged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--covidGreen)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 15 to 24',\r\n        urlPart: `StatisticsProfileDate,Aged15to24,HospitalisedAged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 5 to 14',\r\n        urlPart: `StatisticsProfileDate,Aged5to14,HospitalisedAged5to14,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5to14',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Hospitalised Aged 5',\r\n        urlPart: `StatisticsProfileDate,Aged1to4,HospitalisedAged5,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Total Hospitalised',\r\n        urlPart: `StatisticsProfileDate,HospitalisedCovidCases,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--covidOrange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Total Requiring ICU',\r\n        urlPart: `StatisticsProfileDate,RequiringICUCovidCases,CovidCasesConfirmed`,\r\n        fieldName: 'RequiringICUCovidCases',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--white)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'hospitalisedAndCasesAgeProfiles',\r\n    sectionName: 'Age Profiles - Hospitalised & Cases',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '#Cases vs #Hospitalised in Age Group',\r\n    avail: [\r\n      {\r\n        name: 'Aged 65 and up (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed,HospitalisedAged65up`,\r\n        fieldName: 'HospitalisedAged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: true,\r\n        color: 'var(--covidPink)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 65 and up (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged65up,CovidCasesConfirmed`,\r\n        fieldName: 'Aged65up',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--covidPink)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 55 to 64 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged55to64, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 55 to 64 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged55to64,CovidCasesConfirmed`,\r\n        fieldName: 'Aged55to64',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--purple)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 45 to 54 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged45to54, CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 45 to 54 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged45to54,CovidCasesConfirmed`,\r\n        fieldName: 'Aged45to54',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--blue)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 35 to 44 (Hospitalised) ',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'var(--covidPurple)',\r\n        selected: false,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 35 to 44 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged35to44,CovidCasesConfirmed`,\r\n        fieldName: 'Aged35to44',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        color: 'var(--covidPurple)',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 25 to 34 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--covidGreen)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 25 to 34 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged25to34,CovidCasesConfirmed`,\r\n        fieldName: 'Aged25to34',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--covidGreen)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 15 to 24 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 15 to 24 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged15to24,CovidCasesConfirmed`,\r\n        fieldName: 'Aged15to24',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        useDifferentShape: true,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 5 to 14 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged5to14,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5to14',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--green)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 5 (Hospitalised)',\r\n        urlPart: `StatisticsProfileDate,HospitalisedAged5,CovidCasesConfirmed`,\r\n        fieldName: 'HospitalisedAged5',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Aged 1 to 4 (Cases)',\r\n        urlPart: `StatisticsProfileDate,Aged1to4,CovidCasesConfirmed`,\r\n        fieldName: 'Aged1to4',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--orange)',\r\n        data: [],\r\n      },\r\n      {\r\n        name: 'Analysis based on #cases',\r\n        urlPart: `StatisticsProfileDate,CovidCasesConfirmed`,\r\n        fieldName: 'CovidCasesConfirmed',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        selected: false,\r\n        color: 'var(--white)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'clusters',\r\n    sectionName: 'Clusters Notified',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '# Clusters Notified',\r\n    avail: [\r\n      {\r\n        name: 'Clusters',\r\n        urlPart: `StatisticsProfileDate,ClustersNotified,CovidCasesConfirmed`,\r\n        fieldName: 'ClustersNotified',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n        yAxisLabel: '# Clusters Notified',\r\n        selected: true,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    name: 'medianAge',\r\n    sectionName: 'Median Age',\r\n    description:\r\n      'This data is part of a Daily Statistic Profile of Covid-19 made available by the Health Protection Surveillance Center.',\r\n    yAxisLabel: '# Median age of Cases',\r\n    avail: [\r\n      {\r\n        name: 'Median Age',\r\n        urlPart: `StatisticsProfileDate,Median_Age,CovidCasesConfirmed`,\r\n        fieldName: 'Median_Age',\r\n        xAxisAttribute: 'StatisticsProfileDate',\r\n\r\n        selected: true,\r\n        color: 'var(--yellow)',\r\n        data: [],\r\n      },\r\n     \r\n    ],\r\n  },\r\n];","import React from 'react';\r\nimport classes from './selectGraphBtnGroup.module.css';\r\nconst SelectGraphBtnGroup = ({data, handleSelectGraph, btnClass}) => (\r\n  <div className={classes.btnGroupWrap}>\r\n      {data.map((graph, i) => (\r\n        <button\r\n          className={classes.tabBtn}\r\n          key={i}\r\n          style={{\r\n            background: `${graph.selected ? 'var(--yellow)' : 'var(--black)'}`,\r\n            color: `${graph.selected ? 'var(--lightBlack)' : 'var(--white)'}`,\r\n            fontWeight: `${graph.selected ? '800' : 'normal'}`,\r\n          }}\r\n          onClick={() => handleSelectGraph(graph.name)}\r\n        >\r\n          {graph.sectionName}\r\n        </button>\r\n      ))}\r\n  </div>\r\n  )\r\n\r\n\r\nexport default SelectGraphBtnGroup;","import React, { useState } from 'react';\r\nimport Layout from '../layout';\r\nimport Section from './Sections/section';\r\nimport { sections } from './sections-data';\r\n\r\nimport SectionWrapper from '../../UI/Sections/SectionWrapper/sectionWrapper';\r\nimport SelectGraphBtnGroup from '../../UI/Buttons/SelectGraphBtnGroup/selectGraphBtnGroup';\r\n\r\nconst ProfileStats = () => {\r\n  const initAvailableGraphs = () => {\r\n    return sections.map((s, i) => {\r\n      return {\r\n        name: s.name,\r\n        sectionName: s.sectionName,\r\n        description: s.description,\r\n        selected: i === 0 ? true : false,\r\n      };\r\n    });\r\n  };\r\n\r\n  const [allAvailableGraphs, setAllAvailableGraphs] = useState(\r\n    initAvailableGraphs()\r\n  );\r\n\r\n  const handleSelectGraph = (name) => {\r\n    const newAvailGraphs = allAvailableGraphs.map((graph) => {\r\n      return {\r\n        ...graph,\r\n        selected: graph.name === name ? true : false,\r\n      };\r\n    });\r\n    setAllAvailableGraphs(newAvailGraphs);\r\n  };\r\n\r\n  const selectedGraphName = () =>\r\n    allAvailableGraphs.filter((graph) => graph.selected)[0].name;\r\n\r\n  return (\r\n    <Layout>\r\n      <SectionWrapper>\r\n        <SelectGraphBtnGroup\r\n          data={allAvailableGraphs}\r\n          handleSelectGraph={handleSelectGraph}\r\n        />\r\n\r\n        {sections.map((section, i) => {\r\n          return section.name === selectedGraphName() ? (\r\n            <Section key={section.avail[0].name} section={section} />\r\n          ) : null;\r\n        })}\r\n      </SectionWrapper>\r\n      <SectionWrapper>\r\n        <p>\r\n          This data is part of a Daily Statistic Profile of Covid-19 made\r\n          available by the Health Protection Surveillance Center. New data is\r\n          released each evening and dates back to 12am two days previously.\r\n        </p>\r\n      </SectionWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ProfileStats;\r\n","import { initStore } from '../../Store/store';\r\nimport { countiesStoreUtil as util, sharedUtil } from '../../util-functions';\r\n\r\n// Leaving this function here so one can easily see what it's doing.\r\nconst doTediousStuff = (features) => {\r\n  return [\r\n    sharedUtil.removeFromNestedAttributes,\r\n    util.sortIntoArraysByCounty,\r\n    util.turnArraysIntoNiceObjects,\r\n  ].reduce((features, fn) => {\r\n    return fn(features);\r\n  }, features);\r\n};\r\n\r\nconst configureStore = () => {\r\n  const actions = {\r\n    INIT_COUNTY_DATA: (curState, response) => {\r\n      const copy = curState.sections;\r\n\r\n      const allCounties = doTediousStuff(response);\r\n      copy[0].allCounties = allCounties;\r\n\r\n      // Init Default selected county to first county in array\r\n      copy[0].allStatsAboutSelectedCounty = allCounties[0];\r\n      copy[0].selectedCountyDataForSelectedDate = util.getLatestOrSelectedDateDataForCounty(\r\n        allCounties[0],\r\n        undefined\r\n      );\r\n\r\n      // Init Default date to date of latest available data for first county in array\r\n      copy[0].selectedDate = sharedUtil.getLatestDate(allCounties[0]);\r\n\r\n      return { sections: copy };\r\n    },\r\n    INIT_ALL_COUNTIES_LATEST_DATA: (curState, response) => {\r\n      const withoutNestedAttributes = sharedUtil.removeFromNestedAttributes(response);\r\n      const copy = curState.sections;\r\n\r\n      copy[0].allCountiesLatestData = withoutNestedAttributes;\r\n    },\r\n\r\n    // When selected date changes...\r\n    UPDATE_ALL_COUNTIES_LATEST_DATA: (curState, date) => {\r\n      const copy = curState.sections;\r\n\r\n      const newAllCountiesLatestData = copy[0].allCounties.map(\r\n        (county) =>\r\n          county.stats.filter((stat) => stat.TimeStampDate === date)[0]\r\n      );\r\n      copy[0].allCountiesLatestData = newAllCountiesLatestData;\r\n\r\n      return { sections: copy };\r\n    },\r\n\r\n    SELECT_ATTRIBUTE: (curState, fieldName) => {\r\n      const copy = curState.sections;\r\n\r\n      const withThisFieldNameSelected = util.selectAttributeWithThisFieldName(\r\n        copy[0].avail,\r\n        fieldName\r\n      );\r\n\r\n      copy[0].avail = withThisFieldNameSelected;\r\n\r\n      // also set just the name\r\n      copy[0].selectedAttributeName = fieldName;\r\n\r\n      return { sections: copy };\r\n    },\r\n\r\n    SELECT_COUNTY: (curState, county) => {\r\n      const copy = curState.sections;\r\n\r\n      const selectedCounty = copy[0].allCounties.filter(\r\n        (a) => a.name === county\r\n      )[0];\r\n\r\n      const selectedDate = copy[0].selectedDate || '';\r\n      const latestData = util.getLatestOrSelectedDateDataForCounty(\r\n        selectedCounty,\r\n        selectedDate\r\n      );\r\n\r\n      copy[0].allStatsAboutSelectedCounty = selectedCounty;\r\n      copy[0].selectedCountyDataForSelectedDate = latestData;\r\n\r\n      // and set selected bool in allCounties\r\n      copy[0].allCounties = copy[0].allCounties.map((all) => {\r\n        if (all.name === county) {\r\n          all.selected = true;\r\n        } else {\r\n          all.selected = false;\r\n        }\r\n        return all;\r\n      });\r\n\r\n      return { sections: copy };\r\n    },\r\n    SELECT_DATE: (curState, date) => {\r\n      // want to set selectedCountyLatest data to whatever is in allStatsAboutSelectedCounty ie find correct one by date in allStatsAboutSelectedCounty.stats\r\n      const copy = curState.sections;\r\n      const ans = copy[0].allStatsAboutSelectedCounty.stats.filter(\r\n        (county) => county.TimeStampDate === date\r\n      )[0];\r\n\r\n      copy[0].selectedCountyDataForSelectedDate = ans;\r\n      copy[0].selectedDate = date;\r\n\r\n      // also set allCountiesLatestData\r\n      return { sections: copy };\r\n    },\r\n  };\r\n  initStore(actions, {\r\n    sections: [\r\n      {\r\n        name: 'Counties Time',\r\n        sectionName: 'Counties',\r\n        allCounties: [], // allCountiesAllResultsConfirmedCasesMoreThanZero\r\n        allCountiesLatestData: [], // [{county}x26]\r\n        allStatsAboutSelectedCounty: {}, // Is one {} from allCounties[]\r\n        xAxisAttribute: 'TimeStampDate',\r\n        selectedDate: '',\r\n        selectedCountyDataForSelectedDate: {}, // Rename, may as well use this for selected date data as well\r\n        selectedAttributeName: 'ConfirmedCovidCases',\r\n        avail: [\r\n          {\r\n            name: 'Confirmed Cases',\r\n            fieldName: 'ConfirmedCovidCases',\r\n            yAxisAttribute: 'CountyName',\r\n            xAxisDescription: 'Number of Confirmed Cases',\r\n            selected: true,\r\n            color: 'var(--purple)',\r\n          },\r\n          {\r\n            name: 'Cases per 100,000',\r\n            fieldName: 'PopulationProportionCovidCases',\r\n            yAxisAttribute: 'CountyName',\r\n            xAxisDescription: 'Cases per 100,000 of Population',\r\n            selected: false,\r\n            color: 'var(--green)',\r\n          },\r\n          {\r\n            name: 'Population 2016',\r\n            fieldName: 'PopulationCensus16',\r\n            yAxisAttribute: 'Population 2016',\r\n            xAxisDescription: 'Population 2016',\r\n            selected: false,\r\n            color: 'var(--orange)',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\n\r\nconst paths = {\r\n  \r\n    back: (color) => <path fill={color} d=\"M11.5 280.6l192 160c20.6 17.2 52.5 2.8 52.5-24.6V96c0-27.4-31.9-41.8-52.5-24.6l-192 160c-15.3 12.8-15.3 36.4 0 49.2zm256 0l192 160c20.6 17.2 52.5 2.8 52.5-24.6V96c0-27.4-31.9-41.8-52.5-24.6l-192 160c-15.3 12.8-15.3 36.4 0 49.2z\"></path>,\r\n\r\n    forward: (color)=> <path fill={color} d=\"M500.5 231.4l-192-160C287.9 54.3 256 68.6 256 96v320c0 27.4 31.9 41.8 52.5 24.6l192-160c15.3-12.8 15.3-36.4 0-49.2zm-256 0l-192-160C31.9 54.3 0 68.6 0 96v320c0 27.4 31.9 41.8 52.5 24.6l192-160c15.3-12.8 15.3-36.4 0-49.2z\"></path>,\r\n  \r\n    beginning: (color)=> <path fill={color} d=\"M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z\"></path>,\r\n  \r\n    end: (color) => <path fill={color} d=\"M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z\"></path>, \r\n  \r\n    stop: (color) => <path fill={color} d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\"></path>,\r\n  \r\n    play: (color) => <path fill={color} d=\"M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z\"></path>\r\n  \r\n}\r\n\r\n\r\n\r\nconst CtrlSvg = ({ctrlType, color, height}) => {\r\n\r\n  return <svg style={{height}} aria-hidden=\"true\" focusable=\"false\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\r\n    {paths[ctrlType](color)}\r\n  </svg>\r\n}\r\n\r\nexport default CtrlSvg;\r\n\r\n","import React from 'react';\r\nimport classes from './clickArrows.module.css';\r\nimport CtrlSvg from '../../../img/ctrlSvg';\r\n\r\nconst ClickArrows = ({\r\n  handleSelectDate,\r\n  selectedDate,\r\n  justDates,\r\n  setIsPlaying,\r\n  isPlaying,\r\n}) => {\r\n  const localHandleSelectDate = (isNext) => {\r\n    const indexer = (i) => (isNext ? i + 1 : i - 1);\r\n    const selectedIndex = justDates.indexOf(selectedDate);\r\n    const ans = justDates[indexer(selectedIndex)];\r\n    const nextPrevDate = ans ? ans : selectedDate;\r\n\r\n    if (nextPrevDate === selectedDate) return;\r\n\r\n    handleSelectDate(nextPrevDate);\r\n  };\r\n\r\n  const localHandleBackToStart = () => {\r\n    const earliestDate = Math.min(...justDates.map((d) => d));\r\n    handleSelectDate(earliestDate);\r\n  };\r\n\r\n  const localHandleToLastDate = () => {\r\n    const latestDate = Math.max(...justDates.map((d) => d));\r\n    handleSelectDate(latestDate);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.clickArrowsWrap}>\r\n      <span className={classes.dateSpan}>\r\n        {new Date(selectedDate).toString().substring(0, 16)}\r\n      </span>\r\n      <div className={classes.clickArrows}>\r\n        <button onClick={() => localHandleBackToStart()}>\r\n          <span role=\"img\" aria-label=\"back to start\">\r\n            <CtrlSvg ctrlType=\"beginning\" color=\"var(--yellow)\" height=\"1rem\" />\r\n          </span>\r\n        </button>\r\n        <button onClick={() => localHandleSelectDate(false)}>\r\n          <span role=\"img\" aria-label=\"back one\">\r\n            <CtrlSvg ctrlType=\"back\" color=\"var(--yellow)\" height=\"1rem\" />\r\n          </span>\r\n        </button>\r\n        <button onClick={() => setIsPlaying(!isPlaying)}>\r\n          {isPlaying ? (\r\n            <span>\r\n              <CtrlSvg ctrlType=\"stop\" color=\"var(--yellow)\" height=\"2rem\" />\r\n            </span>\r\n          ) : (\r\n            <span role=\"img\" aria-label=\"play\">\r\n              <CtrlSvg ctrlType=\"play\" color=\"var(--yellow)\" height=\"2rem\" />\r\n            </span>\r\n          )}\r\n        </button>\r\n        <button onClick={() => localHandleSelectDate(true)}>\r\n          <span role=\"img\" aria-label=\"forward one\">\r\n            <CtrlSvg ctrlType=\"forward\" color=\"var(--yellow)\" height=\"1rem\" />\r\n          </span>\r\n        </button>\r\n        <button onClick={() => localHandleToLastDate()}>\r\n          <span role=\"img\" aria-label=\"to end\">\r\n            <CtrlSvg ctrlType=\"end\" color=\"var(--yellow)\" height=\"1rem\" />\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClickArrows;\r\n","import React from 'react';\r\nimport SectionHeader from '../../../UI/Sections/SectionHeader/sectionHeader';\r\nimport ClickArrows from '../ClickArrows/clickArrows';\r\n\r\nconst CountiesSideSectionHeader = ({\r\n  storeSections,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  handleSelectDate,\r\n}) => {\r\n  return (\r\n    <SectionHeader\r\n      title={`${\r\n        storeSections.avail.filter((a) => a.selected)[0].name\r\n      } by County`}\r\n      subtitle=\"\"\r\n    >\r\n      {storeSections.selectedDate && storeSections.allCounties.length ? (\r\n        <ClickArrows\r\n          handleSelectDate={handleSelectDate}\r\n          selectedDate={storeSections.selectedDate}\r\n          justDates={storeSections.allCounties[0].stats.map(\r\n            (s) => s.TimeStampDate\r\n          )}\r\n          isPlaying={isPlaying}\r\n          setIsPlaying={setIsPlaying}\r\n        />\r\n      ) : null}\r\n    </SectionHeader>\r\n  );\r\n};\r\n\r\nexport default CountiesSideSectionHeader;\r\n","import React from 'react';\r\nimport classes from './textBox.module.css';\r\nimport { useStore } from '../../../Store/store';\r\n\r\nconst TextBox = () => {\r\n  const storeSections = useStore()[0].sections[0];\r\n  const selectedCountyDataForSelectedDate =\r\n    storeSections.selectedCountyDataForSelectedDate;\r\n\r\n  const RightSpan = ({ text, fieldName }) => {\r\n    const getColor = (name) =>\r\n      storeSections.avail.filter((s) => s.fieldName === name)[0].color;\r\n    let color = 'var(--blue)';\r\n    let attrColor = getColor(fieldName);\r\n    if (attrColor) color = attrColor;\r\n\r\n    return (\r\n      <span style={{ background: `${color}` }} className={classes.rightSpan}>\r\n        {text || ''}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  return selectedCountyDataForSelectedDate ? (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          {selectedCountyDataForSelectedDate.CountyName} <br />\r\n          <span className={classes.small}>\r\n            {new Date(\r\n              selectedCountyDataForSelectedDate[storeSections.xAxisAttribute]\r\n            )\r\n              .toString()\r\n              .substring(0, 16)}\r\n          </span>\r\n        </h3>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Confirmed Cases: </p>\r\n        <RightSpan\r\n          text={selectedCountyDataForSelectedDate.ConfirmedCovidCases}\r\n          fieldName=\"ConfirmedCovidCases\"\r\n        ></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Population 2016: </p>\r\n        <RightSpan\r\n          text={selectedCountyDataForSelectedDate.PopulationCensus16}\r\n          fieldName=\"PopulationCensus16\"\r\n        ></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Cases per 100,000: </p>\r\n        <RightSpan\r\n          text={\r\n            selectedCountyDataForSelectedDate.PopulationProportionCovidCases\r\n              ? selectedCountyDataForSelectedDate.PopulationProportionCovidCases.toFixed(\r\n                  2\r\n                )\r\n              : ''\r\n          }\r\n          fieldName=\"PopulationProportionCovidCases\"\r\n        ></RightSpan>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className={classes.textItem}>\r\n      <div className={classes.infoWrap}>\r\n        <h3>\r\n          {' '}\r\n          <br />\r\n          <span className={classes.small}></span>\r\n        </h3>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Confirmed Cases: </p>\r\n        <RightSpan text={''}></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Population 2016: </p>\r\n        <RightSpan text={''}></RightSpan>\r\n      </div>\r\n      <div className={classes.infoWrap}>\r\n        <p>Cases per 100,000: </p>\r\n        <RightSpan text={''}></RightSpan>\r\n      </div>\r\n      >\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport classes from './countyBtns.module.css';\r\n\r\nconst CountyBtns = ({ counties, handleSelectCounty }) => {\r\n  return (\r\n    <div className={classes.countiesTinyBtnGroupWrap}>\r\n      {counties.map((county) => {\r\n        return (\r\n          <button\r\n            style={{\r\n              border: `${\r\n                county.selected ? `none` : `0.1rem solid ${county.color}`\r\n              }`,\r\n              background: `${\r\n                county.selected ? `${county.color}` : `var(--lightBlack)`\r\n              }`,\r\n              color: `${\r\n                county.selected ? 'var(--lightBlack)' : 'var(--white)'\r\n              }`,\r\n              fontWeight: '700',\r\n            }}\r\n            id={county.name}\r\n            key={county.name}\r\n            onClick={(e) => handleSelectCounty(e)}\r\n          >\r\n            {county.name}\r\n          </button>\r\n        );\r\n      })}\r\n      ;\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountyBtns;\r\n","import React from 'react';\r\nimport CountiesSideSectionHeader from './countiesSideSectionHeader';\r\nimport SectionSide from '../../../UI/Sections/SectionSide/sectionSide';\r\nimport TextBox from '../TextBox/textBox';\r\nimport AttributeBtns from '../../../UI/Buttons/AttributeBtns/attributeBtns';\r\nimport CountyBts from '../SectionsUI/CountyBtns/countyBtns';\r\nimport classes from './countiesSideSection.module.css';\r\n\r\nconst CountiesSideSection = ({\r\n  showCountyBtns,\r\n  storeSections,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  handleSelectDate,\r\n  handleSelectData,\r\n  handleSelectCounty,\r\n}) => {\r\n  return (\r\n    <SectionSide title={storeSections.name} subtitle=\"subtitle\">\r\n      <CountiesSideSectionHeader\r\n        storeSections={storeSections}\r\n        isPlaying={isPlaying}\r\n        setIsPlaying={setIsPlaying}\r\n        handleSelectDate={handleSelectDate}\r\n      />\r\n\r\n      <div className={classes.forBreakPointBetween900And300}>\r\n        <TextBox />\r\n        <AttributeBtns\r\n          availableAttributes={storeSections.avail}\r\n          handleSelectData={handleSelectData}\r\n        />\r\n      </div>\r\n      {showCountyBtns ? (\r\n        <CountyBts\r\n          counties={storeSections.allCounties}\r\n          handleSelectCounty={handleSelectCounty}\r\n        />\r\n      ) : null}\r\n    </SectionSide>\r\n  );\r\n};\r\n\r\nexport default CountiesSideSection;\r\n","import React from 'react';\r\nimport SectionWrap from '../../../UI/Sections/SectionWrap/sectionWrap';\r\nimport SectionMain from '../../../UI/Sections/SectionMain/sectionMain';\r\nimport CountiesSideSection from './countiesSideSection';\r\n\r\nconst CountiesSection = ({\r\n  children,\r\n  storeSections,\r\n  isPlaying,\r\n  setIsPlaying,\r\n  handleSelectDate,\r\n  handleSelectData,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <SectionWrap>\r\n      <CountiesSideSection\r\n        showCountyBtns={false}\r\n        storeSections={storeSections}\r\n        isPlaying={isPlaying}\r\n        setIsPlaying={setIsPlaying}\r\n        handleSelectDate={handleSelectDate}\r\n        classes={classes}\r\n        handleSelectData={handleSelectData}\r\n      />\r\n      <SectionMain>{children}</SectionMain>\r\n    </SectionWrap>\r\n  );\r\n};\r\n\r\nexport default CountiesSection;\r\n","import React from 'react'\r\n\r\nconst XAxisLabel = ({text, yClass, height, margin}) => {\r\n  return (\r\n    <text\r\n    fill=\"var(--white)\" // for dark graph theme\r\n    x={margin.right+10}\r\n    y={height-10}\r\n    style={{fontSize:'1rem', fontWeight: 700 }}\r\n    className={yClass}\r\n  >\r\n    {text}\r\n  </text>\r\n  )\r\n}\r\n\r\nexport default XAxisLabel;","import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './barChart.module.css';\r\nimport { useStore } from '../../../Store/store';\r\nimport XAxisLabel from '../../../UI/Graphs/xAxisLabel';\r\nimport BoringButton from '../../../UI/Buttons/boringButton';\r\nimport LoadingComp from '../../../UI/loading';\r\nimport ErrorComp from '../../../UI/error';\r\nconst dimensions = {\r\n  margin: {\r\n    left: 70,\r\n    right: 60,\r\n    top: 60,\r\n    bottom: 60,\r\n  },\r\n  width: 1000,\r\n  height: 550,\r\n};\r\nconst { margin, width, height } = dimensions;\r\nconst boringButtonStyle = (selectLogScale) => {\r\n  return {\r\n    background: `${selectLogScale ? 'var(--lightBlack)' : 'var(--covidGreen)'}`,\r\n    color: `${selectLogScale ? 'var(--covidGreen)' : 'var(--lightBlack)'}`,\r\n    borderRadius: ' 0.4rem',\r\n    border: 'none',\r\n    fontWeight: '800',\r\n    letterSpacing: '0.1rem',\r\n    textTransform: 'uppercase',\r\n    fontSize: '0.6rem',\r\n    padding: '0.5rem 1rem',\r\n    outline: 'none',\r\n    minWidth: '5rem',\r\n    display: 'grid',\r\n    alignSelf: 'center',\r\n    justifySelf: 'center',\r\n  };\r\n};\r\n\r\nconst hoverStyle = (isHovered, hoverPosition) => {\r\n  return {\r\n    opacity: `${isHovered ? '1' : '0'}`,\r\n    position: 'fixed',\r\n    left: `${hoverPosition[0]}px`,\r\n    top: `${hoverPosition[1]}px`,\r\n    background: 'var(--black)',\r\n    color: 'var(--white)',\r\n    padding: '0.5rem 1rem',\r\n    borderRadius: '0.4rem',\r\n    fontSize: '0.6rem',\r\n  };\r\n};\r\nconst BarChart = ({ handleSelectOneCounty, isLoading, isError }) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n\r\n  const attribute = storeSections.selectedAttributeName;\r\n  const selectedData = storeSections.avail.filter((data) => data.selected)[0];\r\n\r\n  const [selectLogScale, setSelectLogScale] = useState(true);\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n\r\n  // Refs\r\n  const svgRef = useRef(null);\r\n  const xAxisRef = useRef(null);\r\n  const yAxisRef = useRef(null);\r\n\r\n  const xExtent = d3.extent(\r\n    storeSections.allCountiesLatestData,\r\n    (county) => county[attribute]\r\n  );\r\n  const countyNamesForAxisLabel = storeSections.allCountiesLatestData.map(\r\n    (c) => c.CountyName\r\n  );\r\n  const xAxis = d3.axisBottom();\r\n  const yAxis = d3.axisLeft();\r\n\r\n  const yScale = d3\r\n    .scaleBand()\r\n    .domain(countyNamesForAxisLabel)\r\n    .range([height - margin.top, margin.bottom]);\r\n\r\n  const getXScale = () => {\r\n    if (selectLogScale) {\r\n      return d3\r\n        .scaleLog()\r\n        .domain([1, Math.max(10000, xExtent[1])])\r\n        .clamp(true)\r\n        .range([margin.left, width - margin.right])\r\n        .nice();\r\n    } else {\r\n      return d3\r\n        .scaleLinear()\r\n        .domain(xExtent)\r\n        .clamp(true)\r\n        .range([margin.left, width - margin.right]);\r\n    }\r\n  };\r\n  const xScale = getXScale();\r\n\r\n  const toggleLogScale = () => {\r\n    const currentLog = selectLogScale;\r\n    setSelectLogScale(!currentLog);\r\n  };\r\n\r\n  const doAxis = useCallback(() => {\r\n    const xRef = d3.select(xAxisRef.current);\r\n    const yRef = d3.select(yAxisRef.current);\r\n\r\n    const xTickWidth = -Math.abs(height - margin.top - margin.bottom);\r\n    xAxis.scale(xScale).ticks(10, ',.1s');\r\n    yAxis.scale(yScale);\r\n    xRef.call(xAxis.tickSize(xTickWidth));\r\n    yRef.call(yAxis);\r\n  }, [yScale, xScale, xAxis, yAxis]);\r\n\r\n  useEffect(() => {\r\n    doAxis();\r\n  }, [doAxis]);\r\n\r\n  const handleHover = (e, info) => {\r\n    setHoverInfo(info);\r\n\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n  const handleHoverLeave = () => {\r\n    setIsHovered(false);\r\n  };\r\n  const localHandleSelectCounty = (county) => {\r\n    handleSelectOneCounty(county);\r\n  };\r\n\r\n  const renderRectangles = () => {\r\n    return storeSections.allCountiesLatestData.map((c) => {\r\n      const numCounties = 26;\r\n      const barHeight = (height - margin.top - margin.bottom) / numCounties;\r\n      const y = yScale(c.CountyName);\r\n      const length = xScale(c[attribute]) - margin.left;\r\n\r\n      return (\r\n        <g key={c.CountyName}>\r\n          <rect\r\n            onClick={() => localHandleSelectCounty(c.CountyName)}\r\n            className={classes.barChartRect}\r\n            onMouseEnter={(e) => handleHover(e, c[attribute])}\r\n            onMouseLeave={(e) => handleHoverLeave(e)}\r\n            width={length}\r\n            height={barHeight}\r\n            strokeWidth=\"1\"\r\n            stroke={\r\n              c.CountyName === storeSections.allStatsAboutSelectedCounty.name\r\n                ? selectedData.color\r\n                : 'var(--white)'\r\n            }\r\n            fill={\r\n              c.CountyName === storeSections.allStatsAboutSelectedCounty.name\r\n                ? 'var(--white)'\r\n                : selectedData.color\r\n            }\r\n            opacity={`${\r\n              c.CountyName === storeSections.allStatsAboutSelectedCounty.name\r\n                ? 1\r\n                : 0.75\r\n            }`}\r\n            x={margin.left}\r\n            y={y}\r\n          ></rect>\r\n        </g>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <BoringButton\r\n        onClick={toggleLogScale}\r\n        overRideStyle={boringButtonStyle()}\r\n      >\r\n        {selectLogScale ? 'Use Linear Scale' : 'Use Log Scale'}\r\n      </BoringButton>\r\n\r\n      {isHovered && hoverPosition.length ? (\r\n        <div style={hoverStyle(isHovered, hoverPosition)}>\r\n          {selectedData.name}: {hoverInfo}\r\n        </div>\r\n      ) : null}\r\n\r\n      {isError ? (\r\n        <ErrorComp msg=\"Could not load data for graph.\" />\r\n      ) : isLoading ? (\r\n        <LoadingComp />\r\n      ) : (\r\n        <svg\r\n          className={classes.barChartSvg}\r\n          viewBox={`0 40 ${width - 50} ${height}`}\r\n          ref={svgRef}\r\n          width={width}\r\n        >\r\n          <g\r\n            ref={xAxisRef}\r\n            transform={`translate(0,${\r\n              dimensions.height - dimensions.margin.top\r\n            })`}\r\n          ></g>\r\n          <g\r\n            ref={yAxisRef}\r\n            transform={`translate(${dimensions.margin.left}, 0)`}\r\n          ></g>\r\n\r\n          {storeSections.allCountiesLatestData &&\r\n          selectedData &&\r\n          storeSections.allCountiesLatestData.length ? (\r\n            <>\r\n              <g>{renderRectangles()}</g>\r\n            </>\r\n          ) : null}\r\n          <XAxisLabel\r\n            width={width}\r\n            text={selectedData ? selectedData.xAxisDescription : ''}\r\n            height={height}\r\n            margin={margin}\r\n          />\r\n        </svg>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Line = ({\r\n  graphData,\r\n  handleHover,\r\n  handleHoverLeave,\r\n  handleSelectCounty,\r\n  xScale,\r\n  yScale,\r\n  selectedAttribute,\r\n}) => {\r\n  const [selectedAttr, setSelectedAttr] = useState(selectedAttribute);\r\n\r\n  useEffect(() => {\r\n    setSelectedAttr(selectedAttribute);\r\n  }, [selectedAttribute, graphData]);\r\n\r\n  \r\n  const line = d3\r\n    .line()\r\n    .x((d) => xScale(d['TimeStampDate']))\r\n    .y((d) => {\r\n      return yScale(d[selectedAttr]);\r\n    });\r\n\r\n  const path = line(graphData.stats);\r\n  \r\n  return  (\r\n    <path\r\n      d={path}\r\n      fill=\"none\"\r\n      stroke={graphData.color}\r\n      opacity={graphData.selected ? '1' : '0.4'}\r\n      strokeWidth={graphData.selected ? '4px' : '2px'}\r\n      onMouseOver={(e) => handleHover(e, graphData)}\r\n      onMouseLeave={(e) => handleHoverLeave(e)}\r\n      onClick={(e) => handleSelectCounty(e, graphData.name)}\r\n    ></path>\r\n  ) \r\n};\r\n\r\nexport default Line;\r\n","import React, { useState } from 'react';\r\n\r\n// TODO This is flawed UI-wise. It's because hovering for county <Line> & date is too much. The 'Click Rectangles' are too small... could add them to top of the graph as well. Best solution probably to use same hover date thing as Daily&profile stats and remove the ability to select a county by clicking on the line. \r\nconst ClickRect = ({\r\n  rect,\r\n  date,\r\n  handleHoverDate,\r\n  // handleHoverLeaveDate,\r\n  handleSelectDate,\r\n  selected,\r\n}) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const localHandleHover = (e, date) => {\r\n    setIsHovered(true);\r\n    handleHoverDate(e, date);\r\n  };\r\n  const localHandleHoverLeave = (e) => {\r\n    setIsHovered(false);\r\n    // handleHoverLeaveDate(e);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <rect\r\n        onMouseEnter={(e) => localHandleHover(e)}\r\n        onMouseLeave={(e) => localHandleHoverLeave(e)}\r\n        x={rect.xOffset}\r\n        y={\r\n          selected\r\n            ? `${rect.y + (rect.height / 50 - rect.height / 40)}`\r\n            : `${rect.y}`\r\n        }\r\n        width={rect.rectWidth}\r\n        height={selected ? `${rect.height / 40}` : `${rect.height / 50}`}\r\n        stroke={`${isHovered ? 'var(--orange)' : 'var(--white)'}`}\r\n        fill={`${selected ? 'var(--lightBlack)' : 'var(--orange)'}`}\r\n        style={{ transition: 'all 0.005s linear', cursor: 'pointer' }}\r\n        opacity=\"0.8\"\r\n        onClick={() => {\r\n      \r\n          return handleSelectDate(date);\r\n        }}\r\n      />\r\n      <rect\r\n        x={rect.xOffset}\r\n        y={rect.y2}\r\n        width={rect.rectWidth}\r\n        height={selected ? `${rect.y2Height}` : `0`}\r\n        stroke={`${isHovered ? 'var(--purple)' : 'var(--white)'}`}\r\n        opacity=\"0.1\"\r\n        fill={`${selected ? 'var(--white)' : 'var(--lightBlack)'}`}\r\n        style={{ transition: 'all 0.005s linear', cursor: 'pointer' }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClickRect;\r\n","import React from 'react';\r\nimport ClickRect from './clickRect';\r\n\r\nconst ClickRectangles = ({\r\n  graphData,\r\n  dimensions,\r\n  xScale,\r\n  handleHoverDate,\r\n  // handleHoverLeaveDate,\r\n  handleSelectDate,\r\n  selectedDate, \r\n}) => {\r\n  const { margin, width, height } = dimensions;\r\n\r\n  return graphData.length\r\n    ? graphData.map((date, i) => {\r\n        const graphWidth = width - margin.left - margin.right;\r\n        const rectWidth = graphWidth / graphData.length;\r\n        const x = xScale(date);\r\n        const xOffset = x - rectWidth / 2;\r\n        const rect = {\r\n          x: x,\r\n          y: height - margin.bottom + 1,\r\n          y2: margin.top,\r\n          y2Height: height - margin.bottom - margin.top,\r\n          graphWidth,\r\n          rectWidth,\r\n          height: height - margin.bottom,\r\n          xOffset,\r\n          key: `${graphData.fieldName}-${i}`,\r\n        };\r\n        return x ? (\r\n          <ClickRect\r\n            rect={rect}\r\n            date={date}\r\n            key={i}\r\n            selected={date === selectedDate}\r\n            // handleHoverLeaveDate={handleHoverLeaveDate}\r\n            handleHoverDate={handleHoverDate}\r\n            handleSelectDate={handleSelectDate}\r\n          />\r\n        ) : null;\r\n      })\r\n    : null;\r\n};\r\n\r\nexport default ClickRectangles;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport classes from './lineGraph2.module.css';\r\nimport Axis from '../../../UI/Graphs/axis';\r\nimport YAxisLabel from '../../../UI/Graphs/yAxisLabel';\r\nimport Line from './line';\r\nimport { useStore } from '../../../Store/store';\r\nimport ClickRectangles from '../ClickRectangles/clickRectangles';\r\nimport ErrorComp from '../../../UI/error';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 70,\r\n    right: 60,\r\n    top: 60,\r\n    bottom: 60,\r\n  },\r\n  width: 1000,\r\n  height: 600,\r\n};\r\nconst { margin, width, height } = dimensions;\r\n\r\nconst LineGraph = ({ handleSelectCounty, handleSelectDate, isError }) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n  const selectedData = storeSections.avail.filter((data) => data.selected)[0];\r\n  const svgRef = useRef(null);\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const [hoverInfo, setHoverInfo] = useState();\r\n  const [hoverColor, setHoverColor] = useState();\r\n  const [hoverPosition, setHoverPosition] = useState([]);\r\n  const [selectedAttribute, setSelectedAttribute] = useState('');\r\n  const [hoverInfoDate, setHoverInfoDate] = useState('');\r\n  const [useForXExtent, setUseForXExtent] = useState([]);\r\n  useEffect(() => {\r\n    const findSelectedAttribute = () => {\r\n      const selected = storeSections.avail.filter((d) => d.selected)[0];\r\n      return selected;\r\n    };\r\n    const newSelected = findSelectedAttribute();\r\n    setSelectedAttribute(newSelected.fieldName);\r\n  }, [storeSections.avail]);\r\n\r\n  useEffect(()=> {\r\n    if(storeSections.allCounties.length) {\r\n      setUseForXExtent(storeSections.allCounties[0].stats);\r\n    }\r\n  },[storeSections.allCounties])\r\n \r\n\r\n  const xExtent = d3.extent(useForXExtent, (d) => d.TimeStampDate);\r\n  const xScale = d3\r\n    .scaleTime()\r\n    .domain([xExtent[0], xExtent[1]])\r\n    .range([margin.left, width - margin.right]);\r\n  const yScale = d3\r\n    .scaleLog()\r\n    .domain([1, 10000000])\r\n    .clamp(true)\r\n    .range([height - margin.top, margin.bottom])\r\n    .nice();\r\n  const colorScale = d3\r\n    .scaleSequential()\r\n    .domain([0, 100])\r\n    .interpolator(d3.interpolateRainbow);\r\n\r\n  const handleHover = (e, info) => {\r\n    const county = info.name;\r\n    // e.target.attributes['stroke-width'].value = '0.5rem';\r\n    setHoverInfo(county);\r\n    setHoverColor(info.color);\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n    setIsHovered(true);\r\n  };\r\n\r\n  const handleHoverLeave = (e) => {\r\n\r\n    setIsHovered(false);\r\n  };\r\n\r\n  const handleHoverDate = (e, date) => {\r\n    setHoverInfoDate(new Date(date).toString().substring(0, 10));\r\n    setHoverColor('var(--lightBlack)');\r\n    const xP = e.clientX + 20;\r\n    const yP = e.clientY - 10;\r\n    setHoverPosition([xP, yP]);\r\n  };\r\n\r\n  // TODO ?\r\n  const handleHoverLeaveDate = () => {\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n  \r\n     { isHovered && hoverPosition.length ? (\r\n        <div\r\n          style={{\r\n            opacity: `${isHovered ? '1' : '0'}`,\r\n            position: 'fixed',\r\n            left: `${hoverPosition[0]}px`,\r\n            top: `${hoverPosition[1]}px`,\r\n            background: `${hoverColor}`,\r\n            color: 'var(--white)',\r\n            padding: '0.5rem 1rem',\r\n            borderRadius: '0.4rem',\r\n            fontSize: '0.6rem',\r\n          }}\r\n        >\r\n          {hoverInfo || hoverInfoDate}\r\n        </div>\r\n      ) : null}\r\n    {isError ? <ErrorComp msg='Could not load data for graph.' /> : (\r\n          <svg\r\n          ref={svgRef}\r\n          className={classes.lineSvg}\r\n          viewBox={`0 40 ${width-50} ${height}`}\r\n          width={width}\r\n          style={{maxWidth:'100%'}}\r\n        >\r\n          <Axis dimensions={dimensions} xScale={xScale} yScale={yScale} />\r\n          <YAxisLabel\r\n            text={ selectedData ? selectedData.xAxisDescription : ''}\r\n            height={height}\r\n            margin={margin}\r\n          />\r\n          {storeSections && storeSections.allCountiesLatestData.length ? (\r\n            <ClickRectangles\r\n              graphData={storeSections.allCounties[0].stats.map(\r\n                (county) => county.TimeStampDate\r\n              )}\r\n              dimensions={dimensions}\r\n              xScale={xScale}\r\n              handleHoverLeaveDate={handleHoverLeaveDate}\r\n              handleHoverDate={handleHoverDate}\r\n              handleSelectDate={handleSelectDate}\r\n              selectedDate={storeSections.selectedDate}\r\n            />\r\n          ) : null}\r\n          {storeSections && storeSections.allCounties.length\r\n            ? storeSections.allCounties.map((graphData, i) => (\r\n               \r\n                  <Line\r\n                    graphData={graphData}\r\n                    i={i}\r\n                    key={i}\r\n                    handleHover={handleHover}\r\n                    handleHoverLeave={handleHoverLeave}\r\n                    xScale={xScale}\r\n                    yScale={yScale}\r\n                    colorScale={colorScale}\r\n                    selectedAttribute={selectedAttribute}\r\n                    handleSelectCounty={handleSelectCounty}\r\n                  />\r\n            \r\n              ))\r\n            : null}\r\n        </svg>\r\n\r\n    ) }\r\n\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import React from 'react';\r\n\r\nconst CountyTile = ({\r\n  tree,\r\n  rect,\r\n  handleSelectOneCounty,\r\n  showProvinces,\r\n  i,\r\n  arr,\r\n  attribute,\r\n}) => {\r\n  return (\r\n    <g\r\n      key={tree.data.CountyName}\r\n      style={{ cursor: 'pointer' }}\r\n      onClick={() => handleSelectOneCounty(tree.data.CountyName)}\r\n    >\r\n      {/* white background - otherwise low numbers are darker than high (not intuitive) */}\r\n      <rect\r\n        stroke={rect.stroke}\r\n        strokeWidth=\"0.1rem\"\r\n        fill=\"var(--white)\"\r\n        x={rect.x}\r\n        y={rect.y}\r\n        width={rect.width}\r\n        height={rect.height}\r\n        opacity=\"1\"\r\n      />\r\n      <rect\r\n        stroke={rect.stroke}\r\n        strokeWidth=\"0.1rem\"\r\n        fill={rect.isSelected ? 'var(--white)' : rect.fill}\r\n        x={rect.x}\r\n        y={rect.y}\r\n        width={rect.width}\r\n        height={rect.height}\r\n        opacity={rect.opacity}\r\n      />\r\n      {/* Add Province names */}\r\n      {showProvinces &&\r\n      (i === 0 || tree.parent.data.name !== arr[i - 1].parent.data.name) ? (\r\n        <text\r\n          x={rect.x}\r\n          y={rect.y - 4}\r\n          fontSize=\"0.6rem\"\r\n          fontWeight=\"900\"\r\n          fill=\"var(--yellow)\"\r\n        >\r\n          {tree.parent.data.name\r\n            ? tree.parent.data.name.charAt(0).toUpperCase() +\r\n              tree.parent.data.name.slice(1)\r\n            : ''}\r\n        </text>\r\n      ) : null}\r\n\r\n      {/* If rect is ~wide enough show county name, otherwise show county reg */}\r\n      {rect.width > 80 ? (\r\n        <>\r\n          <text\r\n            x={rect.x + 4}\r\n            y={rect.y + 12}\r\n            height=\"20\"\r\n            fontSize=\"0.6rem\"\r\n            fontWeight=\"900\"\r\n            fill={rect.isSelected ? 'var(--lightBlack)' : 'var(--white)'}\r\n            style={{ textTransform: 'uppercase', letterSpacing: '0.2rem' }}\r\n          >\r\n            {tree.data.CountyName}{' '}\r\n          </text>\r\n          {/*  Only if rect is ~tall enough show number */}\r\n          {rect.height > 20 ? (\r\n            <text\r\n              x={rect.x + 4}\r\n              y={rect.y + 22}\r\n              height=\"20\"\r\n              fontSize=\"0.5rem\"\r\n              fontWeight=\"500\"\r\n              fill={rect.isSelected ? 'var(--lightBlack)' : 'var(--white)'}\r\n              style={{ textTransform: 'uppercase', letterSpacing: '0.1rem' }}\r\n            >\r\n              ({Math.round(tree.data[attribute])})\r\n            </text>\r\n          ) : null}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <text\r\n            x={rect.x + 4}\r\n            y={rect.y + 12}\r\n            height=\"20\"\r\n            fontSize={rect.width < 30 ? '0.5rem' : '0.6rem'}\r\n            fontWeight=\"900\"\r\n            fill={rect.isSelected ? 'var(--lightBlack)' : 'var(--white)'}\r\n          >\r\n            {tree.data.reg}{' '}\r\n          </text>\r\n          {rect.height > 30 ? (\r\n            <text\r\n              x={rect.x + 4}\r\n              y={rect.y + 22}\r\n              height=\"20\"\r\n              fontSize=\"0.5rem\"\r\n              fontWeight=\"500\"\r\n              fill={rect.isSelected ? 'var(--lightBlack)' : 'var(--white)'}\r\n              style={{ textTransform: 'uppercase', letterSpacing: '0.1rem' }}\r\n            >\r\n              ({Math.round(tree.data[attribute])})\r\n            </text>\r\n          ) : null}\r\n        </>\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default CountyTile;\r\n","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport CountyTile from './countyTile';\r\nimport { COUNTIES } from '../../../constants';\r\n\r\nconst { PROVINCES } = COUNTIES;\r\nconst dimensions = {\r\n  margin: {\r\n    left: 70,\r\n    right: 60,\r\n    top: 60,\r\n    bottom: 60,\r\n  },\r\n  width: 1000,\r\n  height: 600,\r\n};\r\nconst { width, height } = dimensions;\r\n\r\n// TODO - leaving this here for now\r\nconst divideIntoProvences = (countyData, attribute) => {\r\n  const ans = PROVINCES.map((prov, i) => {\r\n    const names = prov.counties.map((c) => c.name);\r\n\r\n    prov.children = countyData.filter((c) => {\r\n      if (names.includes(c.CountyName)) {\r\n        // Also add in the reg numbers, this probably shouldn't be happening inside a filter btw\r\n        c.reg = prov.counties.find((co) => co.name === c.CountyName).reg;\r\n        c.province = prov.name;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n    return prov;\r\n  });\r\n\r\n  return ans;\r\n  // return ans;\r\n};\r\n\r\nconst withoutProvinces = (graphData) => {\r\n  return { children: graphData };\r\n};\r\n\r\n// const getOpacity = (extent) => d3.scaleLinear().domain(extent).range([0.2, 1]);\r\n// const getOpacity = (extent) => d3.scaleQuantize().domain(extent).range([0.6,0.7,0.8,0.9, 1]);\r\nconst getOpacity = (graphData, attribute) =>\r\n  d3\r\n    .scaleQuantile()\r\n    .domain(graphData.map((d) => d[attribute]))\r\n    .range([0.5,0.6, 0.7, 0.8]);\r\n\r\nconst CountyTiles = ({\r\n  graphData,\r\n  attribute,\r\n  showProvinces,\r\n  handleSelectOneCounty,\r\n  selectedAttributeColor,\r\n  selectedCountyName,\r\n}) => {\r\n\r\n  // TODO, this should happen automatically in store maybe? Definitely too much sorting going on here.\r\n  const sortedGraphData = graphData.sort((a, b) => a[attribute] - b[attribute]);\r\n\r\n  // Only calling divideIntoProvince() when actually needed causes reg to be missing first time. TODO add reg somewhere more sensible and don't call this until showProvinces is true.\r\n  const withProvinces = { children: divideIntoProvences(graphData, attribute) };\r\n\r\n  const dataWithOrWithoutProvinces = showProvinces\r\n    ? withProvinces\r\n    : withoutProvinces(sortedGraphData);\r\n\r\n  const opacity = getOpacity(graphData, attribute);\r\n  const root = d3\r\n    .hierarchy(dataWithOrWithoutProvinces)\r\n    .sum((d) => d[attribute]);\r\n\r\n  d3\r\n    .treemap()\r\n    .size([width, height])\r\n    .padding(2)\r\n    .paddingTop(15)\r\n    .paddingLeft(10)\r\n    .paddingRight(10)\r\n    .paddingBottom(10)(root);\r\n\r\n  return root.leaves().map((tree, i, arr) => {\r\n    const rect = {\r\n      isSelected:\r\n      tree.data.CountyName === selectedCountyName ? true : false,\r\n      x: tree.x0,\r\n      y: tree.y0,\r\n      width: tree.x1 - tree.x0,\r\n      height: tree.y1 - tree.y0,\r\n      fill: selectedAttributeColor,\r\n      stroke:\r\n        tree.data.CountyName === selectedCountyName ? 'var(--white)' : 'none',\r\n      opacity: opacity(tree.data[attribute]),\r\n    };\r\n\r\n    return (\r\n      <CountyTile \r\n        key={i}\r\n        tree={tree}\r\n        rect={rect}\r\n        handleSelectOneCounty={handleSelectOneCounty}\r\n        showProvinces={showProvinces}\r\n        i={i}\r\n        arr={arr}\r\n        attribute={attribute}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default CountyTiles;\r\n","import React, { useRef, useMemo } from 'react';\r\nimport { useStore } from '../../../Store/store';\r\nimport CountyTiles from './countyTiles';\r\nimport BoringButton from '../../../UI/Buttons/boringButton';\r\nimport ErrorComp from '../../../UI/error';\r\n\r\nconst dimensions = {\r\n  margin: {\r\n    left: 70,\r\n    right: 60,\r\n    top: 60,\r\n    bottom: 60,\r\n  },\r\n  width: 1000,\r\n  height: 600,\r\n};\r\nconst { width, height } = dimensions;\r\n\r\nconst TreeGraph = ({\r\n  showProvinces,\r\n  handleSelectOneCounty,\r\n  setShowProvinces,\r\n  isLoading,\r\n  isError\r\n}) => {\r\n  const storeSections = useStore()[0].sections[0];\r\n  const attribute = storeSections.selectedAttributeName;\r\n\r\n  // get colour corresponding to selected attribute (need it for countyTile colour)\r\n  const selectedAttributeColor = useMemo(() => {\r\n    return storeSections.avail.filter((data) => data.selected)[0].color;\r\n  }, [storeSections.avail]);\r\n\r\n  const svgRef = useRef();\r\n\r\n  return (\r\n    <>\r\n      <BoringButton\r\n        onClick={() => setShowProvinces(!showProvinces)}\r\n        overRideStyle={{\r\n          background: `${showProvinces ? 'var(--lightBlack)' : 'var(--covidGreen)'}`,\r\n          color: `${showProvinces ? 'var(--covidGreen)' : 'var(--lightBlack)'}`,\r\n          borderRadius: ' 0.4rem',\r\n          border: 'none',\r\n          fontWeight: '800',\r\n          letterSpacing: '0.1rem',\r\n          textTransform: 'uppercase',\r\n          fontSize: '0.6rem',\r\n          padding: '0.5rem 1rem',\r\n          outline: 'none',\r\n          minWidth: '5rem',\r\n          display: 'grid',\r\n          alignSelf: 'center',\r\n          justifySelf: 'center',\r\n        }}\r\n      >\r\n        {showProvinces ? 'Hide Provinces' : 'Show  Provinces'}\r\n      </BoringButton>\r\n      {isError ? <ErrorComp msg='Could not load data for graph.' /> : (\r\n              <svg\r\n              style={{ maxWidth: '100%' }}\r\n              viewBox={`0 0 ${width} ${height}`}\r\n              ref={svgRef}\r\n              width={width}\r\n            >\r\n              <CountyTiles\r\n                graphData={storeSections.allCountiesLatestData}\r\n                attribute={attribute}\r\n                showProvinces={showProvinces}\r\n                handleSelectOneCounty={handleSelectOneCounty}\r\n                selectedAttributeColor={selectedAttributeColor}\r\n                selectedCountyName={storeSections.allStatsAboutSelectedCounty.name}\r\n              />\r\n            </svg>\r\n      )}\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TreeGraph;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useStore } from '../../Store/store';\r\nimport axios from 'axios';\r\nimport configureStore from './counties-store';\r\nimport { sharedUtil as util } from '../../util-functions';\r\nimport { COUNTIES } from '../../constants.js';\r\n\r\nimport Layout from '../layout';\r\nimport SelectGraphBtnGroup from '../../UI/Buttons/SelectGraphBtnGroup/selectGraphBtnGroup';\r\nimport CountiesSection from './Sections/countiesSection';\r\nimport BarChart from './BarChart/barChart';\r\nimport LineGraph from './LineGraph/lineGraph';\r\nimport TreeGraph from './TreeGraph/treeGraph';\r\nimport SectionWrapper from '../../UI/Sections/SectionWrapper/sectionWrapper';\r\nconfigureStore();\r\n\r\nconst {\r\n  ONE_DAY,\r\n  uriLatestAllCounties,\r\n  allCountiesAllResultsConfirmedCasesMoreThanZero,\r\n} = COUNTIES;\r\n\r\nconst Counties = () => {\r\n  const dispatch = useStore()[1];\r\n  const storeSections = useStore()[0].sections[0];\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [showProvinces, setShowProvinces] = useState(false);\r\n\r\n  const [selectedSection, setSelectedSection] = useState('bar');\r\n\r\n  const getSelected = (name) => (name === selectedSection ? true : false);\r\n\r\n  // SelectGraphBtnGroup wants data in this format\r\n  const availGraphs = [\r\n    { name: 'bar', sectionName: 'Bar Graph', selected: getSelected('bar') },\r\n    { name: 'tree', sectionName: 'Tree Graph', selected: getSelected('tree') },\r\n    { name: 'line', sectionName: 'Line Graph', selected: getSelected('line') },\r\n  ];\r\n  // Latest - all counties\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setIsError(false);\r\n        const response = await axios.get(uriLatestAllCounties);\r\n        dispatch('INIT_ALL_COUNTIES_LATEST_DATA', response.data.features);\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setIsError(false);\r\n        const response = await axios.get(\r\n          allCountiesAllResultsConfirmedCasesMoreThanZero\r\n        );\r\n        dispatch('INIT_COUNTY_DATA', response.data.features);\r\n        setIsLoading(false);\r\n      } catch (e) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    })();\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleSelectOneCounty = (county) => {\r\n    dispatch('SELECT_COUNTY', county);\r\n  };\r\n\r\n  const handleSelectData = (e) => {\r\n    const fieldName = e.target.name;\r\n    dispatch('SELECT_ATTRIBUTE', fieldName);\r\n  };\r\n\r\n  // click on county line/tinyBtn to show details in textbox\r\n  const handleSelectCounty = (e, county) => {\r\n    const name = county || e.target.id;\r\n    dispatch('SELECT_COUNTY', name);\r\n  };\r\n\r\n  // click on ClickRectangle\r\n  const handleSelectDate = (date) => {\r\n    dispatch('SELECT_DATE', date);\r\n    dispatch('UPDATE_ALL_COUNTIES_LATEST_DATA', date);\r\n  };\r\n\r\n  const renderGraph = () => {\r\n    switch (selectedSection) {\r\n      case 'bar':\r\n        return (\r\n          <BarChart\r\n            handleSelectOneCounty={handleSelectOneCounty}\r\n            handleSelectDate={handleSelectDate}\r\n            isLoading={isLoading}\r\n            isError={isError}\r\n          />\r\n        );\r\n      case 'tree':\r\n        return (\r\n          <TreeGraph\r\n            handleSelectOneCounty={handleSelectOneCounty}\r\n            handleSelectDate={handleSelectDate}\r\n            isLoading={isLoading}\r\n            isError={isError}\r\n            showProvinces={showProvinces}\r\n            setShowProvinces={setShowProvinces}\r\n          />\r\n        );\r\n      case 'line':\r\n        return (\r\n          <LineGraph\r\n            handleSelectCounty={handleSelectCounty}\r\n            handleSelectDate={handleSelectDate}\r\n            isError={isError}\r\n            isLoading={isLoading}\r\n          />\r\n        );\r\n      default:\r\n        return (\r\n          <TreeGraph\r\n            handleSelectOneCounty={handleSelectOneCounty}\r\n            handleSelectDate={handleSelectDate}\r\n            isLoading={isLoading}\r\n            showProvinces={showProvinces}\r\n            setShowProvinces={setShowProvinces}\r\n            isError={isError}\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  const renderGraphSection = () => {\r\n    return (\r\n      <CountiesSection\r\n        storeSections={storeSections}\r\n        isPlaying={isPlaying}\r\n        setIsPlaying={setIsPlaying}\r\n        handleSelectDate={handleSelectDate}\r\n        handleSelectData={handleSelectData}\r\n        handleSelectOneCounty={handleSelectOneCounty}\r\n        isLoading={isLoading}\r\n        isError={isError}\r\n      >\r\n        {renderGraph()}\r\n      </CountiesSection>\r\n    );\r\n  };\r\n\r\n  const incrementSelectedDate = useCallback(() => {\r\n    let useDate = storeSections.selectedDate + ONE_DAY;\r\n    const latestPossibleDate = util.getLatestDate(storeSections.allCounties[0]);\r\n    if (storeSections.selectedDate < latestPossibleDate) {\r\n      dispatch('SELECT_DATE', useDate);\r\n      dispatch('UPDATE_ALL_COUNTIES_LATEST_DATA', useDate);\r\n      return true;\r\n    } else {\r\n      setIsPlaying();\r\n      return false;\r\n    }\r\n  }, [\r\n    dispatch,\r\n    setIsPlaying,\r\n    storeSections.selectedDate,\r\n    storeSections.allCounties,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let interval;\r\n    if (isPlaying) {\r\n      interval = setInterval(() => {\r\n        return incrementSelectedDate();\r\n      }, 400);\r\n      if (!interval) clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isPlaying, incrementSelectedDate]);\r\n\r\n  return (\r\n    <Layout>\r\n        <SectionWrapper>\r\n        {/* {isError ? <ErrorComp msg=\"Could not load data.\" /> : null} */}\r\n          <SelectGraphBtnGroup\r\n            data={availGraphs}\r\n            handleSelectGraph={setSelectedSection}\r\n          />\r\n            \r\n          {renderGraphSection()}\r\n        </SectionWrapper>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Counties;\r\n","import React from 'react';\nimport './App.css';\nimport DailyPage from './components/DailyPage/dailyPage';\nimport Header from './components/Header/header';\nimport ProfileStats from './components/ProfileStats/profileStats';\nimport Counties from './components/Counties/counties';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Header />\n   \n          <Route exact path=\"/\" component={DailyPage} />\n          <Route exact path=\"/stats\" component={ProfileStats} />\n          <Route exact path=\"/counties\" component={Counties} />\n        \n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__3MvGA\",\"navActive\":\"header_navActive__3wFy9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatsTextBox\":\"textBox_profileStatsTextBox__2ixIq\",\"infoWrap\":\"textBox_infoWrap__130VE\",\"genericTextItem\":\"textBox_genericTextItem__w0F8h\",\"rightSpan\":\"textBox_rightSpan__153Wo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clickArrowsWrap\":\"clickArrows_clickArrowsWrap__1zdba\",\"dateSpan\":\"clickArrows_dateSpan__wdSgH\",\"clickArrows\":\"clickArrows_clickArrows__4rEdA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summaryWrap\":\"summary_summaryWrap__3euwc\",\"summaryInfoWrap\":\"summary_summaryInfoWrap__2H40J\",\"sectionHeading\":\"summary_sectionHeading__12M4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tinyAxisGroupY\":\"tinyAxis_tinyAxisGroupY__3xUJO\",\"tinyAxisGroupX\":\"tinyAxis_tinyAxisGroupX__ifugj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"axisGroupY\":\"axis_axisGroupY__1_P6u\",\"axisGroupX\":\"axis_axisGroupX__2cn4l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphSectionBtnGroupWrap\":\"section_graphSectionBtnGroupWrap__39Mx9\",\"forBreakPointBetween900And300\":\"section_forBreakPointBetween900And300__1Pz2L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lineGraphCircle\":\"circles_lineGraphCircle__28LlI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"axisGroupX\":\"axis_axisGroupX__2yVMY\",\"tick\":\"axis_tick__1a3vK\",\"axisGroupY\":\"axis_axisGroupY__1NKPt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnGroupWrap\":\"selectGraphBtnGroup_btnGroupWrap__iCEKE\",\"tabBtn\":\"selectGraphBtnGroup_tabBtn__3vkhs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barChartRect\":\"barChart_barChartRect__d34aE\",\"barChartSvg\":\"barChart_barChartSvg__8WkBg\",\"basicBtn\":\"barChart_basicBtn__2tn4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textItem\":\"textBox_textItem__HVXgf\",\"infoWrap\":\"textBox_infoWrap__2n_2T\",\"small\":\"textBox_small__29gI_\",\"rightSpan\":\"textBox_rightSpan__32LzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageWrap\":\"layout_pageWrap__3QxV1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionWrapper\":\"sectionWrapper_sectionWrapper__PVw0U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tinySvgLine\":\"tinySvgLine_tinySvgLine__1umLw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"summaryBox\":\"summaryBox_summaryBox__1CKy2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loading_loader__XPMoq\",\"load7\":\"loading_load7__q6uYE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionWrap\":\"sectionWrap_sectionWrap__1jN5n\",\"sectionMainWrap\":\"sectionWrap_sectionMainWrap__XyJx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionMain\":\"sectionMain_sectionMain__2Q9DQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionSideWrap\":\"sectionSide_sectionSideWrap__jZ7Cf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionHeader\":\"sectionHeader_sectionHeader__370lI\"};"],"sourceRoot":""}